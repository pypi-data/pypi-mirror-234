# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05-kraken.ipynb (unless otherwise specified).

__all__ = ['OrderBook', 'get_total_qty', 'get_quantile_price', 'get_avg_price_weighted_by_qty',
           'get_avg_price_weighted_by_reversed_qty', 'get_avg_qty_weighted_by_price',
           'get_avg_qty_weighted_by_reversed_price', 'get_total_value', 'get_price_spread']

# Cell

import ccxt
import fastcore.basics as fcb
import pandas as pd

# Cell

class OrderBook:
    def __init__(self, trading_pair='BTC/USD'):
        exchange = ccxt.kraken()
        self.order_book = exchange.fetch_order_book(trading_pair)

        self.bids = pd.DataFrame(self.order_book['bids'], columns=['price', 'qty', 'id'])
        self.asks = pd.DataFrame(self.order_book['asks'], columns=['price', 'qty', 'id'])

# Cell

@fcb.patch_to(OrderBook)

def get_total_qty(self, kind='bid'):

    assert kind in ['bid', 'ask']

    if kind=='bid':
        return self.bids['qty'].sum()
    elif kind=='ask':
        return self.asks['qty'].sum()

# Cell

@fcb.patch_to(OrderBook)

def get_quantile_price(self, kind='bid', q=0.5):

    assert kind in ['bid', 'ask']

    if kind=='bid':
        return self.bids['price'].quantile(q)
    elif kind=='ask':
        return self.asks['price'].quantile(q)

# Cell

@fcb.patch_to(OrderBook)

def get_avg_price_weighted_by_qty(self, kind='bid'):

    assert kind in ['bid', 'ask']

    if kind=='bid':
        return sum(self.bids['price']*self.bids['qty']) / sum(self.bids['qty'])
    elif kind=='ask':
        return sum(self.asks['price']*self.asks['qty']) / sum(self.asks['qty'])

# Cell

@fcb.patch_to(OrderBook)

def get_avg_price_weighted_by_reversed_qty(self, kind='bid'):

    assert kind in ['bid', 'ask']

    if kind=='bid':
        return sum(self.bids['price']/self.bids['qty']) / sum(1/self.bids['qty'])
    elif kind=='ask':
        return sum(self.asks['price']/self.asks['qty']) / sum(1/self.asks['qty'])

# Cell

@fcb.patch_to(OrderBook)

def get_avg_qty_weighted_by_price(self, kind='bid'):

    assert kind in ['bid', 'ask']

    if kind=='bid':
        return sum(self.bids['price']*self.bids['qty']) / sum(self.bids['price'])
    elif kind=='ask':
        return sum(self.asks['price']*self.asks['qty']) / sum(self.asks['price'])

# Cell

@fcb.patch_to(OrderBook)

def get_avg_qty_weighted_by_reversed_price(self, kind='bid'):

    assert kind in ['bid', 'ask']

    if kind=='bid':
        return sum(self.bids['qty']/self.bids['price']) / sum(1/self.bids['price'])
    elif kind=='ask':
        return sum(self.asks['qty']/self.asks['price']) / sum(1/self.asks['price'])

# Cell

@fcb.patch_to(OrderBook)

def get_total_value(self, kind='bid'):

    assert kind in ['bid', 'ask']

    if kind=='bid':
        return sum(self.bids['price']*self.bids['qty'])
    elif kind=='ask':
        return sum(self.asks['price']*self.asks['qty'])

# Cell

@fcb.patch_to(OrderBook)

def get_price_spread(self):
    highest_bid_price = self.bids['price'].max()
    lowest_ask_price = self.asks['price'].min()
    return lowest_ask_price / highest_bid_price