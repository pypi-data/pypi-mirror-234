[tool.poetry]
name = "di"
version = "0.79.1"
description = "Dependency injection toolkit"
authors = ["Adrian Garcia Badaracco <adrian@adriangb.com>"]
readme = "README.md"
repository = "https://github.com/adriangb/di"
documentation = "https://www.adriangb.com/di"
keywords = [
    "dependency-injection",
    "inversion-of-control",
    "SOLID",
    "IoC",
    "DI",
]
license = "MIT"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Framework :: AsyncIO",
    "Framework :: Trio",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = ">=3.8,<4"
anyio = { version = ">=3.5.0", optional = true }
typing-extensions = { version = ">=3", python = "<3.9" }
graphlib2 = "^0.4.1"

[tool.poetry.extras]
anyio = ["anyio"]

[tool.poetry.group.dev.dependencies]
# linting
black = "~23"
mypy = "~1"
ruff = "^0.0.286"
pre-commit = "~2"
# testing
pytest = "~7"
pytest-cov = { version = "~3" }
pytest-sugar = "~0"
trio = "~0"
coverage = { extras = ["toml"], version = "~6" }
# docs
mkdocs = "~1"
mkdocs-material = "~9"
mkdocstrings = {version = ">=0.23.0", extras = ["python"]}
mike = "~1"
# benchmarking
pyinstrument = "~4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.coverage.run]
branch = true
source = ["di", "tests", "docs_src"]
dynamic_context = "test_function"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    '\.\.\.',
    "raise NotImplementedError",
    "TYPE_CHECKING",
    "__repr__",
]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.mypy]
files = "di/**/*.py,tests/**/*.py,docs_src/**/*.py"
show_error_codes = true
pretty = true
warn_unreachable = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "di.*"
strict_equality = true
warn_return_any = true
no_implicit_optional = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_subclassing_any = true
warn_unused_ignores = false

[tool.ruff]
extend-select = ['Q', 'RUF', 'C', 'UP', 'I', 'T']
extend-ignore = [
    # E501 is handled by black
    'E501',
]
isort = { known-first-party = ['di', 'tests'] }

[tool.ruff.per-file-ignores]
"docs_src/*" = ['T201']  # `print` found
