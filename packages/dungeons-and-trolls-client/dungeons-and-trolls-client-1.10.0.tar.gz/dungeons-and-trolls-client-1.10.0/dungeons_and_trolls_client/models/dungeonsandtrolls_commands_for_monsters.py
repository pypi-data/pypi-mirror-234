# coding: utf-8

"""
    Dungeons and Trolls

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field
from dungeons_and_trolls_client.models.dungeonsandtrolls_commands_batch import DungeonsandtrollsCommandsBatch

class DungeonsandtrollsCommandsForMonsters(BaseModel):
    """
    DungeonsandtrollsCommandsForMonsters
    """
    commands: Optional[Dict[str, DungeonsandtrollsCommandsBatch]] = Field(None, description="Monster ID with corresponding batch of commands.")
    __properties = ["commands"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DungeonsandtrollsCommandsForMonsters:
        """Create an instance of DungeonsandtrollsCommandsForMonsters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in commands (dict)
        _field_dict = {}
        if self.commands:
            for _key in self.commands:
                if self.commands[_key]:
                    _field_dict[_key] = self.commands[_key].to_dict()
            _dict['commands'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DungeonsandtrollsCommandsForMonsters:
        """Create an instance of DungeonsandtrollsCommandsForMonsters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DungeonsandtrollsCommandsForMonsters.parse_obj(obj)

        _obj = DungeonsandtrollsCommandsForMonsters.parse_obj({
            "commands": dict(
                (_k, DungeonsandtrollsCommandsBatch.from_dict(_v))
                for _k, _v in obj.get("commands").items()
            )
            if obj.get("commands") is not None
            else None
        })
        return _obj


