# coding: utf-8

"""
    Dungeons and Trolls

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from dungeons_and_trolls_client.models.dungeonsandtrolls_coordinates import DungeonsandtrollsCoordinates
from dungeons_and_trolls_client.models.dungeonsandtrolls_event_type import DungeonsandtrollsEventType
from dungeons_and_trolls_client.models.dungeonsandtrolls_skill import DungeonsandtrollsSkill

class DungeonsandtrollsEvent(BaseModel):
    """
    DungeonsandtrollsEvent
    """
    message: Optional[StrictStr] = None
    type: Optional[DungeonsandtrollsEventType] = None
    coordinates: Optional[DungeonsandtrollsCoordinates] = None
    damage: Optional[Union[StrictFloat, StrictInt]] = None
    player_id: Optional[StrictStr] = Field(None, alias="playerId")
    skill_name: Optional[StrictStr] = Field(None, alias="skillName")
    radius: Optional[Union[StrictFloat, StrictInt]] = None
    target: Optional[DungeonsandtrollsCoordinates] = None
    skill: Optional[DungeonsandtrollsSkill] = None
    __properties = ["message", "type", "coordinates", "damage", "playerId", "skillName", "radius", "target", "skill"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DungeonsandtrollsEvent:
        """Create an instance of DungeonsandtrollsEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skill
        if self.skill:
            _dict['skill'] = self.skill.to_dict()
        # set to None if damage (nullable) is None
        # and __fields_set__ contains the field
        if self.damage is None and "damage" in self.__fields_set__:
            _dict['damage'] = None

        # set to None if player_id (nullable) is None
        # and __fields_set__ contains the field
        if self.player_id is None and "player_id" in self.__fields_set__:
            _dict['playerId'] = None

        # set to None if skill_name (nullable) is None
        # and __fields_set__ contains the field
        if self.skill_name is None and "skill_name" in self.__fields_set__:
            _dict['skillName'] = None

        # set to None if radius (nullable) is None
        # and __fields_set__ contains the field
        if self.radius is None and "radius" in self.__fields_set__:
            _dict['radius'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DungeonsandtrollsEvent:
        """Create an instance of DungeonsandtrollsEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DungeonsandtrollsEvent.parse_obj(obj)

        _obj = DungeonsandtrollsEvent.parse_obj({
            "message": obj.get("message"),
            "type": obj.get("type"),
            "coordinates": DungeonsandtrollsCoordinates.from_dict(obj.get("coordinates")) if obj.get("coordinates") is not None else None,
            "damage": obj.get("damage"),
            "player_id": obj.get("playerId"),
            "skill_name": obj.get("skillName"),
            "radius": obj.get("radius"),
            "target": DungeonsandtrollsCoordinates.from_dict(obj.get("target")) if obj.get("target") is not None else None,
            "skill": DungeonsandtrollsSkill.from_dict(obj.get("skill")) if obj.get("skill") is not None else None
        })
        return _obj


