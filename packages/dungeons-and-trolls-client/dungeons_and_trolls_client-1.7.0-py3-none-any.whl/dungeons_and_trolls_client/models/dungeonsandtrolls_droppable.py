# coding: utf-8

"""
    Dungeons and Trolls

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from dungeons_and_trolls_client.models.dungeonsandtrolls_decoration import DungeonsandtrollsDecoration
from dungeons_and_trolls_client.models.dungeonsandtrolls_key import DungeonsandtrollsKey
from dungeons_and_trolls_client.models.dungeonsandtrolls_waypoint import DungeonsandtrollsWaypoint

class DungeonsandtrollsDroppable(BaseModel):
    """
    DungeonsandtrollsDroppable
    """
    skill: Optional[DungeonsandtrollsSkill] = None
    item: Optional[DungeonsandtrollsItem] = None
    monster: Optional[DungeonsandtrollsMonster] = None
    decoration: Optional[DungeonsandtrollsDecoration] = None
    waypoint: Optional[DungeonsandtrollsWaypoint] = None
    key: Optional[DungeonsandtrollsKey] = None
    __properties = ["skill", "item", "monster", "decoration", "waypoint", "key"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DungeonsandtrollsDroppable:
        """Create an instance of DungeonsandtrollsDroppable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of skill
        if self.skill:
            _dict['skill'] = self.skill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item
        if self.item:
            _dict['item'] = self.item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monster
        if self.monster:
            _dict['monster'] = self.monster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decoration
        if self.decoration:
            _dict['decoration'] = self.decoration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of waypoint
        if self.waypoint:
            _dict['waypoint'] = self.waypoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key
        if self.key:
            _dict['key'] = self.key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DungeonsandtrollsDroppable:
        """Create an instance of DungeonsandtrollsDroppable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DungeonsandtrollsDroppable.parse_obj(obj)

        _obj = DungeonsandtrollsDroppable.parse_obj({
            "skill": DungeonsandtrollsSkill.from_dict(obj.get("skill")) if obj.get("skill") is not None else None,
            "item": DungeonsandtrollsItem.from_dict(obj.get("item")) if obj.get("item") is not None else None,
            "monster": DungeonsandtrollsMonster.from_dict(obj.get("monster")) if obj.get("monster") is not None else None,
            "decoration": DungeonsandtrollsDecoration.from_dict(obj.get("decoration")) if obj.get("decoration") is not None else None,
            "waypoint": DungeonsandtrollsWaypoint.from_dict(obj.get("waypoint")) if obj.get("waypoint") is not None else None,
            "key": DungeonsandtrollsKey.from_dict(obj.get("key")) if obj.get("key") is not None else None
        })
        return _obj

from dungeons_and_trolls_client.models.dungeonsandtrolls_item import DungeonsandtrollsItem
from dungeons_and_trolls_client.models.dungeonsandtrolls_monster import DungeonsandtrollsMonster
from dungeons_and_trolls_client.models.dungeonsandtrolls_skill import DungeonsandtrollsSkill
DungeonsandtrollsDroppable.update_forward_refs()

