# coding: utf-8

"""
    Dungeons and Trolls

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from dungeons_and_trolls_client.models.dungeonsandtrolls_attributes import DungeonsandtrollsAttributes
from dungeons_and_trolls_client.models.dungeonsandtrolls_damage_type import DungeonsandtrollsDamageType
from dungeons_and_trolls_client.models.dungeonsandtrolls_skill_generic_flags import DungeonsandtrollsSkillGenericFlags
from dungeons_and_trolls_client.models.skill_target import SkillTarget

class DungeonsandtrollsSkill(BaseModel):
    """
    DungeonsandtrollsSkill
    """
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    target: Optional[SkillTarget] = None
    cost: Optional[DungeonsandtrollsAttributes] = None
    range: Optional[DungeonsandtrollsAttributes] = None
    radius: Optional[DungeonsandtrollsAttributes] = None
    duration: Optional[DungeonsandtrollsAttributes] = None
    damage_amount: Optional[DungeonsandtrollsAttributes] = Field(None, alias="damageAmount")
    damage_type: Optional[DungeonsandtrollsDamageType] = Field(None, alias="damageType")
    caster_effects: Optional[DungeonsandtrollsSkillEffect] = Field(None, alias="casterEffects")
    target_effects: Optional[DungeonsandtrollsSkillEffect] = Field(None, alias="targetEffects")
    flags: Optional[DungeonsandtrollsSkillGenericFlags] = None
    __properties = ["id", "name", "target", "cost", "range", "radius", "duration", "damageAmount", "damageType", "casterEffects", "targetEffects", "flags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DungeonsandtrollsSkill:
        """Create an instance of DungeonsandtrollsSkill from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cost
        if self.cost:
            _dict['cost'] = self.cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of radius
        if self.radius:
            _dict['radius'] = self.radius.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duration
        if self.duration:
            _dict['duration'] = self.duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of damage_amount
        if self.damage_amount:
            _dict['damageAmount'] = self.damage_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of caster_effects
        if self.caster_effects:
            _dict['casterEffects'] = self.caster_effects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_effects
        if self.target_effects:
            _dict['targetEffects'] = self.target_effects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flags
        if self.flags:
            _dict['flags'] = self.flags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DungeonsandtrollsSkill:
        """Create an instance of DungeonsandtrollsSkill from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DungeonsandtrollsSkill.parse_obj(obj)

        _obj = DungeonsandtrollsSkill.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "target": obj.get("target"),
            "cost": DungeonsandtrollsAttributes.from_dict(obj.get("cost")) if obj.get("cost") is not None else None,
            "range": DungeonsandtrollsAttributes.from_dict(obj.get("range")) if obj.get("range") is not None else None,
            "radius": DungeonsandtrollsAttributes.from_dict(obj.get("radius")) if obj.get("radius") is not None else None,
            "duration": DungeonsandtrollsAttributes.from_dict(obj.get("duration")) if obj.get("duration") is not None else None,
            "damage_amount": DungeonsandtrollsAttributes.from_dict(obj.get("damageAmount")) if obj.get("damageAmount") is not None else None,
            "damage_type": obj.get("damageType"),
            "caster_effects": DungeonsandtrollsSkillEffect.from_dict(obj.get("casterEffects")) if obj.get("casterEffects") is not None else None,
            "target_effects": DungeonsandtrollsSkillEffect.from_dict(obj.get("targetEffects")) if obj.get("targetEffects") is not None else None,
            "flags": DungeonsandtrollsSkillGenericFlags.from_dict(obj.get("flags")) if obj.get("flags") is not None else None
        })
        return _obj

from dungeons_and_trolls_client.models.dungeonsandtrolls_skill_effect import DungeonsandtrollsSkillEffect
DungeonsandtrollsSkill.update_forward_refs()

