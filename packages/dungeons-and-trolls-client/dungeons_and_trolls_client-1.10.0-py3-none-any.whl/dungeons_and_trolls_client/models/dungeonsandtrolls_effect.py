# coding: utf-8

"""
    Dungeons and Trolls

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from dungeons_and_trolls_client.models.dungeonsandtrolls_attributes import DungeonsandtrollsAttributes
from dungeons_and_trolls_client.models.dungeonsandtrolls_damage_type import DungeonsandtrollsDamageType

class DungeonsandtrollsEffect(BaseModel):
    """
    DungeonsandtrollsEffect
    """
    damage_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="damageAmount")
    damage_type: Optional[DungeonsandtrollsDamageType] = Field(None, alias="damageType")
    effects: Optional[DungeonsandtrollsAttributes] = None
    duration: Optional[StrictInt] = None
    caster_id: Optional[StrictStr] = Field(None, alias="CasterId")
    __properties = ["damageAmount", "damageType", "effects", "duration", "CasterId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DungeonsandtrollsEffect:
        """Create an instance of DungeonsandtrollsEffect from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of effects
        if self.effects:
            _dict['effects'] = self.effects.to_dict()
        # set to None if caster_id (nullable) is None
        # and __fields_set__ contains the field
        if self.caster_id is None and "caster_id" in self.__fields_set__:
            _dict['CasterId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DungeonsandtrollsEffect:
        """Create an instance of DungeonsandtrollsEffect from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DungeonsandtrollsEffect.parse_obj(obj)

        _obj = DungeonsandtrollsEffect.parse_obj({
            "damage_amount": obj.get("damageAmount"),
            "damage_type": obj.get("damageType"),
            "effects": DungeonsandtrollsAttributes.from_dict(obj.get("effects")) if obj.get("effects") is not None else None,
            "duration": obj.get("duration"),
            "caster_id": obj.get("CasterId")
        })
        return _obj


