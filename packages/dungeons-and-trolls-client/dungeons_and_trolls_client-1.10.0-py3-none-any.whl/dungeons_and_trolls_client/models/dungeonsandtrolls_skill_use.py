# coding: utf-8

"""
    Dungeons and Trolls

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from dungeons_and_trolls_client.models.dungeonsandtrolls_position import DungeonsandtrollsPosition

class DungeonsandtrollsSkillUse(BaseModel):
    """
    DungeonsandtrollsSkillUse
    """
    skill_id: Optional[StrictStr] = Field(None, alias="skillId")
    target_id: Optional[StrictStr] = Field(None, alias="targetId")
    position: Optional[DungeonsandtrollsPosition] = None
    __properties = ["skillId", "targetId", "position"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DungeonsandtrollsSkillUse:
        """Create an instance of DungeonsandtrollsSkillUse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # set to None if target_id (nullable) is None
        # and __fields_set__ contains the field
        if self.target_id is None and "target_id" in self.__fields_set__:
            _dict['targetId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DungeonsandtrollsSkillUse:
        """Create an instance of DungeonsandtrollsSkillUse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DungeonsandtrollsSkillUse.parse_obj(obj)

        _obj = DungeonsandtrollsSkillUse.parse_obj({
            "skill_id": obj.get("skillId"),
            "target_id": obj.get("targetId"),
            "position": DungeonsandtrollsPosition.from_dict(obj.get("position")) if obj.get("position") is not None else None
        })
        return _obj


