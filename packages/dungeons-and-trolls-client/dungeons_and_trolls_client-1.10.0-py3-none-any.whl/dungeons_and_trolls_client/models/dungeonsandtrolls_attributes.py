# coding: utf-8

"""
    Dungeons and Trolls

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class DungeonsandtrollsAttributes(BaseModel):
    """
    DungeonsandtrollsAttributes
    """
    strength: Optional[Union[StrictFloat, StrictInt]] = None
    dexterity: Optional[Union[StrictFloat, StrictInt]] = None
    intelligence: Optional[Union[StrictFloat, StrictInt]] = None
    willpower: Optional[Union[StrictFloat, StrictInt]] = None
    constitution: Optional[Union[StrictFloat, StrictInt]] = None
    slash_resist: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="slashResist")
    pierce_resist: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="pierceResist")
    fire_resist: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fireResist")
    poison_resist: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="poisonResist")
    electric_resist: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="electricResist")
    life: Optional[Union[StrictFloat, StrictInt]] = None
    stamina: Optional[Union[StrictFloat, StrictInt]] = None
    mana: Optional[Union[StrictFloat, StrictInt]] = None
    constant: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["strength", "dexterity", "intelligence", "willpower", "constitution", "slashResist", "pierceResist", "fireResist", "poisonResist", "electricResist", "life", "stamina", "mana", "constant"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DungeonsandtrollsAttributes:
        """Create an instance of DungeonsandtrollsAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if strength (nullable) is None
        # and __fields_set__ contains the field
        if self.strength is None and "strength" in self.__fields_set__:
            _dict['strength'] = None

        # set to None if dexterity (nullable) is None
        # and __fields_set__ contains the field
        if self.dexterity is None and "dexterity" in self.__fields_set__:
            _dict['dexterity'] = None

        # set to None if intelligence (nullable) is None
        # and __fields_set__ contains the field
        if self.intelligence is None and "intelligence" in self.__fields_set__:
            _dict['intelligence'] = None

        # set to None if willpower (nullable) is None
        # and __fields_set__ contains the field
        if self.willpower is None and "willpower" in self.__fields_set__:
            _dict['willpower'] = None

        # set to None if constitution (nullable) is None
        # and __fields_set__ contains the field
        if self.constitution is None and "constitution" in self.__fields_set__:
            _dict['constitution'] = None

        # set to None if slash_resist (nullable) is None
        # and __fields_set__ contains the field
        if self.slash_resist is None and "slash_resist" in self.__fields_set__:
            _dict['slashResist'] = None

        # set to None if pierce_resist (nullable) is None
        # and __fields_set__ contains the field
        if self.pierce_resist is None and "pierce_resist" in self.__fields_set__:
            _dict['pierceResist'] = None

        # set to None if fire_resist (nullable) is None
        # and __fields_set__ contains the field
        if self.fire_resist is None and "fire_resist" in self.__fields_set__:
            _dict['fireResist'] = None

        # set to None if poison_resist (nullable) is None
        # and __fields_set__ contains the field
        if self.poison_resist is None and "poison_resist" in self.__fields_set__:
            _dict['poisonResist'] = None

        # set to None if electric_resist (nullable) is None
        # and __fields_set__ contains the field
        if self.electric_resist is None and "electric_resist" in self.__fields_set__:
            _dict['electricResist'] = None

        # set to None if life (nullable) is None
        # and __fields_set__ contains the field
        if self.life is None and "life" in self.__fields_set__:
            _dict['life'] = None

        # set to None if stamina (nullable) is None
        # and __fields_set__ contains the field
        if self.stamina is None and "stamina" in self.__fields_set__:
            _dict['stamina'] = None

        # set to None if mana (nullable) is None
        # and __fields_set__ contains the field
        if self.mana is None and "mana" in self.__fields_set__:
            _dict['mana'] = None

        # set to None if constant (nullable) is None
        # and __fields_set__ contains the field
        if self.constant is None and "constant" in self.__fields_set__:
            _dict['constant'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DungeonsandtrollsAttributes:
        """Create an instance of DungeonsandtrollsAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DungeonsandtrollsAttributes.parse_obj(obj)

        _obj = DungeonsandtrollsAttributes.parse_obj({
            "strength": obj.get("strength"),
            "dexterity": obj.get("dexterity"),
            "intelligence": obj.get("intelligence"),
            "willpower": obj.get("willpower"),
            "constitution": obj.get("constitution"),
            "slash_resist": obj.get("slashResist"),
            "pierce_resist": obj.get("pierceResist"),
            "fire_resist": obj.get("fireResist"),
            "poison_resist": obj.get("poisonResist"),
            "electric_resist": obj.get("electricResist"),
            "life": obj.get("life"),
            "stamina": obj.get("stamina"),
            "mana": obj.get("mana"),
            "constant": obj.get("constant")
        })
        return _obj


