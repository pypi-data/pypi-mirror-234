# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.15.2142
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, confloat, conint

class Geopoint(BaseModel):
    """
    Geographical point.  # noqa: E501
    """
    latitude: Union[confloat(le=90, ge=-90, strict=True), conint(le=90, ge=-90, strict=True)] = Field(..., description="Latitude in degrees.")
    longitude: Union[confloat(le=180, ge=-180, strict=True), conint(le=180, ge=-180, strict=True)] = Field(..., description="Longitude in degrees.")
    __properties = ["latitude", "longitude"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Geopoint:
        """Create an instance of Geopoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Geopoint:
        """Create an instance of Geopoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Geopoint.parse_obj(obj)

        _obj = Geopoint.parse_obj({
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude")
        })
        return _obj


