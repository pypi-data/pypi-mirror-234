
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIMPLIESleftORleftANDrightDIAMONDBOXAND BOX DIAMOND IMPLIES LPAREN OR RPAREN VALUE VAR\n    expression : expression AND expression\n                | expression OR expression\n                | expression IMPLIES expression\n                | BOX expression\n                | DIAMOND expression\n                | VAR\n                | VALUE\n    \n    expression : LPAREN expression RPAREN\n    '
    
_lr_action_items = {'BOX':([0,2,3,6,7,8,9,],[2,2,2,2,2,2,2,]),'DIAMOND':([0,2,3,6,7,8,9,],[3,3,3,3,3,3,3,]),'VAR':([0,2,3,6,7,8,9,],[4,4,4,4,4,4,4,]),'VALUE':([0,2,3,6,7,8,9,],[5,5,5,5,5,5,5,]),'LPAREN':([0,2,3,6,7,8,9,],[6,6,6,6,6,6,6,]),'$end':([1,4,5,10,11,13,14,15,16,],[0,-6,-7,-4,-5,-1,-2,-3,-8,]),'AND':([1,4,5,10,11,12,13,14,15,16,],[7,-6,-7,-4,-5,7,-1,7,7,-8,]),'OR':([1,4,5,10,11,12,13,14,15,16,],[8,-6,-7,-4,-5,8,-1,-2,8,-8,]),'IMPLIES':([1,4,5,10,11,12,13,14,15,16,],[9,-6,-7,-4,-5,9,-1,-2,-3,-8,]),'RPAREN':([4,5,10,11,12,13,14,15,16,],[-6,-7,-4,-5,16,-1,-2,-3,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,6,7,8,9,],[1,10,11,12,13,14,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression AND expression','expression',3,'p_expression','syntax.py',52),
  ('expression -> expression OR expression','expression',3,'p_expression','syntax.py',53),
  ('expression -> expression IMPLIES expression','expression',3,'p_expression','syntax.py',54),
  ('expression -> BOX expression','expression',2,'p_expression','syntax.py',55),
  ('expression -> DIAMOND expression','expression',2,'p_expression','syntax.py',56),
  ('expression -> VAR','expression',1,'p_expression','syntax.py',57),
  ('expression -> VALUE','expression',1,'p_expression','syntax.py',58),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','syntax.py',77),
]
