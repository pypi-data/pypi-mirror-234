# coding: utf-8

"""
    Standard Bots RO1 Robotics API

    Standard Bots RO1 Robotics API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@standardbots.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from standardbots.auto_generated.openapi_client import schemas  # noqa: F401


class GripperCommandRequest(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Control the gripper (end effector) of the robot

    """


    class MetaOapg:
        required = {
            "kind",
        }
        
        class properties:
            
            
            class kind(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "onrobot_2fg7": "FG7",
                        "onrobot_3fg15": "FG15",
                    }
                
                @schemas.classproperty
                def FG7(cls):
                    return cls("onrobot_2fg7")
                
                @schemas.classproperty
                def FG15(cls):
                    return cls("onrobot_3fg15")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'kind':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def onrobot_2fg7() -> typing.Type['OnRobot2FG7GripperCommandRequest']:
                return OnRobot2FG7GripperCommandRequest
        
            @staticmethod
            def onrobot_3fg15() -> typing.Type['OnRobot3FG15GripperCommandRequest']:
                return OnRobot3FG15GripperCommandRequest
            __annotations__ = {
                "kind": kind,
                "onrobot_2fg7": onrobot_2fg7,
                "onrobot_3fg15": onrobot_3fg15,
            }

    
    kind: MetaOapg.properties.kind
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onrobot_2fg7"]) -> 'OnRobot2FG7GripperCommandRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onrobot_3fg15"]) -> 'OnRobot3FG15GripperCommandRequest': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kind", "onrobot_2fg7", "onrobot_3fg15", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onrobot_2fg7"]) -> typing.Union['OnRobot2FG7GripperCommandRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onrobot_3fg15"]) -> typing.Union['OnRobot3FG15GripperCommandRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kind", "onrobot_2fg7", "onrobot_3fg15", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        kind: typing.Union[MetaOapg.properties.kind, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        onrobot_2fg7: typing.Union['OnRobot2FG7GripperCommandRequest', schemas.Unset] = schemas.unset,
        onrobot_3fg15: typing.Union['OnRobot3FG15GripperCommandRequest', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GripperCommandRequest':
        return super().__new__(
            cls,
            *_args,
            kind=kind,
            onrobot_2fg7=onrobot_2fg7,
            onrobot_3fg15=onrobot_3fg15,
            _configuration=_configuration,
            **kwargs,
        )

from standardbots.auto_generated.openapi_client.model.on_robot2_fg7_gripper_command_request import OnRobot2FG7GripperCommandRequest
from standardbots.auto_generated.openapi_client.model.on_robot3_fg15_gripper_command_request import OnRobot3FG15GripperCommandRequest
