name: Test

on:
  push:
   branches:
     - main
  pull_request:
    types: [opened, synchronize]
  merge_group:

jobs:
  static_analysis:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install Dependencies and library
        shell: bash
        run: |
          set -ux
          python -m pip install --upgrade pip
          pip install -e ".[docs,rabbit,kafka,nats,lint]"
      - name: Run mypy
        shell: bash
        run: mypy faststream tests/mypy

      - name: Run bandit
        shell: bash
        run: bandit -c pyproject.toml -r faststream

      - name: Run Semgrep
        shell: bash
        run: semgrep scan --config auto --error

  test:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        pydantic-version: ["pydantic-v1", "pydantic-v2"]
      fail-fast: false

    services:
      kafka:
        image: bitnami/kafka:3.5.0
        ports:
          - 9092:9092
        env:
          KAFKA_ENABLE_KRAFT: "true"
          KAFKA_CFG_NODE_ID: "1"
          KAFKA_CFG_PROCESS_ROLES: "broker,controller"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
          KAFKA_BROKER_ID: "1"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
          ALLOW_PLAINTEXT_LISTENER: "true"

      rabbitmq:
        image: rabbitmq:alpine
        ports:
          - 5672:5672

      # using own container with already included JetStream
      # https://github.com/nats-io/nats-docker/issues/110
      nats:
        image: diementros/nats:js
        ports:
          - 4222:4222

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-test-v03
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[rabbit,kafka,nats,docs,testing]
      - name: Install Pydantic v1
        if: matrix.pydantic-version == 'pydantic-v1'
        run: pip install "pydantic>=1.10.0,<2.0.0"
      - name: Install Pydantic v2
        if: matrix.pydantic-version == 'pydantic-v2'
        run: pip install --pre "pydantic>=2.0.0b2,<3.0.0"
      - run: mkdir coverage
      - name: Test
        run: bash scripts/test.sh -m "all"
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage

  test-macos-latest:
    if: github.event.pull_request.draft == false
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[rabbit,kafka,nats,docs,testing]
      - name: Test
        run: bash scripts/test.sh -m "not kafka and not rabbit and not nats"

  test-windows-latest:
    if: github.event.pull_request.draft == false
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[rabbit,kafka,nats,docs,testing]
      - name: Test
        run: bash scripts/test.sh -vv -m "not kafka and not rabbit and not nats"

  test-kafka-smoke:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    services:
      kafka:
        image: bitnami/kafka:3.5.0
        ports:
          - 9092:9092
        env:
          KAFKA_ENABLE_KRAFT: "true"
          KAFKA_CFG_NODE_ID: "1"
          KAFKA_CFG_PROCESS_ROLES: "broker,controller"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
          KAFKA_BROKER_ID: "1"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
          ALLOW_PLAINTEXT_LISTENER: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[kafka,test-core]
      - name: Test
        run: bash scripts/test.sh tests/brokers/kafka/test_publish.py

  test-rabbit-smoke:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:alpine
        ports:
          - 5672:5672
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[rabbit,test-core]
      - name: Test
        run: bash scripts/test.sh tests/brokers/rabbit/test_publish.py

  test-nats-smoke:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    services:
      nats:
        image: diementros/nats:js
        ports:
          - 4222:4222
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[nats,test-core]
      - name: Test
        run: bash scripts/test.sh tests/brokers/nats/test_publish.py

  coverage-combine:
    if: github.event.pull_request.draft == false
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"
          cache-dependency-path: pyproject.toml

      - name: Get coverage files
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage

      - run: pip install coverage[toml]

      - run: ls -la coverage
      - run: coverage combine coverage
      - run: coverage report
      - run: coverage html --show-contexts --title "FastStream coverage for ${{ github.sha }}"

      - name: Store coverage html
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html
          path: htmlcov

  # https://github.com/marketplace/actions/alls-green#why
  check: # This job does nothing and is only used for the branch protection
    if: github.event.pull_request.draft == false

    needs:
      - coverage-combine
      - static_analysis
      - test-macos-latest
      - test-windows-latest
      - test-kafka-smoke
      - test-rabbit-smoke
      - test-nats-smoke

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1 # nosemgrep
        with:
          jobs: ${{ toJSON(needs) }}
