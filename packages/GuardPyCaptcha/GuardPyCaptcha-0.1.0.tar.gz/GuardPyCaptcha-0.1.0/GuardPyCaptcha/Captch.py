import cv2
import keyring
import socket
from cryptography.fernet import Fernet
import numpy as np
import string
import random
import base64


class GuardPyCaptcha:
    def __init__(self):
        self.service_name = "GuardPyCaptchaConfig"
        self.username = "my"+socket.gethostname()
        self.key = keyring.get_password(self.service_name, self.username)
        if self.key == None:
            self.key = Fernet.generate_key().decode()
            keyring.set_password(self.service_name, self.username, self.key)
        self.fernet = Fernet(self.key)

    def Captcha_generation(self, num_char = 4, only_num = False):
        """
        This function generates a Captcha image.

        Parameters:

        num_char (int): The number of characters in the Captcha. Default: 4.
        only_num (bool): If True, only digits are used for characters.
                        If False, both English letters and digits are used.
                        Default: False.

        Returns:
        dict: A dictionary with two keys:
            - 'image': An image in string format encoded as bytes.
                    It needs to be converted to binary format for reuse.
            - 'encrypted_response': The encrypted response of the Captcha,
                                sent along with the user's response for verification.
                                This value is in string format.

        Example:
        >>> result = Captcha_generation()
        >>> image_data = result['image']
        >>> response = result['encrypted_response']
        """
        font = cv2.FONT_HERSHEY_SIMPLEX
        captcha = np.zeros((50,250,3), np.uint8)
        captcha[:] = (255, 255, 255)
        texcode = ''
        if only_num: list_Charector =  string.digits
        else: list_Charector = string.digits + string.ascii_lowercase + string.digits
        for i in range(1, num_char+1):
            bottom_left_distance = (random.randint(35,45)*i,35+(random.randint(-8,8)))
            font_scale = random.randint(8,16)/10
            font_color = (random.randint(0,180),random.randint(0,180),random.randint(0,180))
            thickness = random.randint(1,2)
            lineType = 1
            charector = str(list_Charector[random.randint(0, len(list_Charector) - 1)])
            texcode += charector
            cv2.putText(captcha, charector, bottom_left_distance, font, font_scale, font_color, thickness, lineType)
            if random.randint(0,2)>0:
                start_point = (random.randint(0, 250),random.randint(0, 50))
                end_point = (random.randint(0, 250),random.randint(0, 50))
                line_color = (random.randint(0, 150),random.randint(0, 150),random.randint(0, 150))
                cv2.line(captcha, start_point, end_point, line_color, 1)
        image = base64.b64encode(cv2.imencode('.jpg', captcha)[1]).decode("utf-8")
        encrypted_response = str(texcode).encode()
        encrypted_response = self.fernet.encrypt(encrypted_response).decode()
        return {'image':image, 'encrypted_response':encrypted_response}
    
    def check_response(self, encrypted_response, user_response):
        """
        This function verifies the user's response to a Captcha.

        Parameters:
        encrypted_response (str): The correct and encrypted response generated by the Captcha_generation function.
                                It is of type str.

        user_response (str): The user's response to the Captcha. It is of type str.

        Returns:
        bool: True if the user's response is correct; False otherwise.
        """
        encrypted_response = self.fernet.decrypt(encrypted_response)
        encrypted_response = encrypted_response.decode()
        return encrypted_response == user_response








