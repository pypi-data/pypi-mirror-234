
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _comb_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "comb"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AddOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.add"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AndOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.and"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConcatOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.concat"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DivSOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.divs"

  _ODS_REGIONS = (0, True)

  def __init__(self, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DivUOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.divu"

  _ODS_REGIONS = (0, True)

  def __init__(self, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExtractOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.extract"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, lowBit, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["lowBit"] = (lowBit if (
    issubclass(type(lowBit), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(lowBit, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def lowBit(self):
    return self.operation.attributes["lowBit"]

  @lowBit.setter
  def lowBit(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["lowBit"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ICmpOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.icmp"

  _ODS_REGIONS = (0, True)

  def __init__(self, predicate, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["predicate"] = (predicate if (
    issubclass(type(predicate), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ICmpPredicate')) else
      _ods_ir.AttrBuilder.get('ICmpPredicate')(predicate, context=_ods_context))
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def predicate(self):
    return self.operation.attributes["predicate"]

  @predicate.setter
  def predicate(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["predicate"] = value

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ModSOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.mods"

  _ODS_REGIONS = (0, True)

  def __init__(self, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ModUOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.modu"

  _ODS_REGIONS = (0, True)

  def __init__(self, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MulOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.mul"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MuxOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.mux"

  _ODS_REGIONS = (0, True)

  def __init__(self, cond, trueValue, falseValue, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(cond))
    operands.append(_get_op_result_or_value(trueValue))
    operands.append(_get_op_result_or_value(falseValue))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def cond(self):
    return self.operation.operands[0]

  @builtins.property
  def trueValue(self):
    return self.operation.operands[1]

  @builtins.property
  def falseValue(self):
    return self.operation.operands[2]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class OrOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.or"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ParityOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.parity"

  _ODS_REGIONS = (0, True)

  def __init__(self, input, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ReplicateOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.replicate"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ShlOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.shl"

  _ODS_REGIONS = (0, True)

  def __init__(self, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ShrSOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.shrs"

  _ODS_REGIONS = (0, True)

  def __init__(self, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ShrUOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.shru"

  _ODS_REGIONS = (0, True)

  def __init__(self, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SubOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.sub"

  _ODS_REGIONS = (0, True)

  def __init__(self, lhs, rhs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TruthTableOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.truth_table"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, lookupTable, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["lookupTable"] = (lookupTable if (
    issubclass(type(lookupTable), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('BoolArrayAttr')) else
      _ods_ir.AttrBuilder.get('BoolArrayAttr')(lookupTable, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def lookupTable(self):
    return self.operation.attributes["lookupTable"]

  @lookupTable.setter
  def lookupTable(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["lookupTable"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class XorOp(_ods_ir.OpView):
  OPERATION_NAME = "comb.xor"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, twoState=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(twoState): attributes["twoState"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def twoState(self):
    return "twoState" in self.operation.attributes

  @twoState.setter
  def twoState(self, value):
    if bool(value):
      self.operation.attributes["twoState"] = _ods_ir.UnitAttr.get()
    elif "twoState" in self.operation.attributes:
      del self.operation.attributes["twoState"]

  @twoState.deleter
  def twoState(self):
    del self.operation.attributes["twoState"]

  @builtins.property
  def result(self):
    return self.operation.results[0]
