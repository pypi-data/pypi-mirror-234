import requests
import urllib3

# Disabling SSL/TLS warnings â€“ use with caution
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def get_file_details(domain):
    file_details_list = []
    count_check_dict = {}  # Dictionary to store word and char counts
    
    domain_offline = False  # Flag to indicate if the domain is offline
    domain_without_tld = remove_tld(domain)
    
    # First pass: Fetch and record details of all files
    for filepath in ["robots.txt", ".git", "sitemap.xml", "wp-admin", "admin", "login", "account", "/payments/config", "phpinfo.php", "/clientaccesspolicy.xml", "/crossdomain.xml", "old", "backup", "backup.sh", f"{domain}.zip", f"{domain}.tar.gz", f"{domain_without_tld}.zip", f"{domain_without_tld}.tar.gz", "web.config", "downloader.php?name=web.config", "/logs/error.log", "php.ini", "info.php"]:
        """Get details of a specific file for the given domain."""
        url = f"http://{domain}/{filepath}"
        details = {
            "filepath": filepath,
            "exists": False,
            "word_count": 0,
            "char_count": 0,
            "size": "0B",
            "response_code": None,
            "message": ""
        }

        if domain_offline:
            details["message"] = "The domain appears to be offline."
            file_details_list.append(details)
            continue

        try:
            response = requests.get(url, timeout=10, allow_redirects=True, verify=False)
        except requests.exceptions.SSLError as e:
            # SSL error caught - trying again with http instead of https
            url = f"https://{domain}/{filepath}"
            try:
                response = requests.get(url, timeout=10, allow_redirects=True)
            except requests.RequestException as e:
                details["message"] = f"The domain appears to be offline. Error: {str(e)}"
                domain_offline = True  # Set the flag to True
                file_details_list.append(details)
                continue
        except requests.RequestException as e:
            details["message"] = f"The domain appears to be offline. Error: {str(e)}"
            domain_offline = True  # Set the flag to True
            file_details_list.append(details)
            continue
        
        # Process the response
        content = response.text
        details["response_code"] = response.status_code
        details["char_count"] = len(content)
        details["word_count"] = len(content.split())

        byte_size = len(response.content)
        details["size"] = f"{byte_size}B"
        if byte_size > 1024:
            kb_size = byte_size / 1024
            details["size"] = f"{kb_size:.2f}KB"

        if response.status_code == 200:
            details["exists"] = True
        elif response.status_code == 403 and ("/cdn-cgi/" in content or "challenge" in content):
            details["message"] = "The file might exist, but Cloudflare is preventing access."

        count_key = (details["word_count"], details["char_count"])
        if count_key in count_check_dict:
            count_check_dict[count_key].append(details)
        else:
            count_check_dict[count_key] = [details]

        file_details_list.append(details)

    # Second pass: Check for duplicates and mark files as non-existent if needed
    for file_group in count_check_dict.values():
        if len(file_group) > 1:  # Duplicate content found
            for details in file_group:
                details["exists"] = False
                details["message"] = "Marked as non-existent due to matching content counts with another file."

    return file_details_list

def remove_tld(domain):
    parts = domain.split(".")
    return ".".join(parts[:-1])

if __name__ == "__main__":
    domain_to_check = "google.com"
    details = get_file_details(domain_to_check)
    
    # Example usage
    for detail in details:
        print(detail)
