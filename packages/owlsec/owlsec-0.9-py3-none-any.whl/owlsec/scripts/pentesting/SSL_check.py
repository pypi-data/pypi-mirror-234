import socket
from datetime import datetime
from OpenSSL import SSL

class SSLChecker:
    total_valid = 0
    total_expired = 0
    total_failed = 0
    total_warning = 0

    def filter_hostname(self, host):
        """Remove unused characters and split by address and port."""
        host = host.replace('http://', '').replace('https://', '').replace('/', '')
        port = 443
        if ':' in host:
            host, port = host.split(':')
    
        return host, port


    def get_cert(self, host, port):
        """Connection to the host."""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        osobj = SSL.Context(SSL.TLSv1_2_METHOD)
        sock.connect((host, int(port)))
        oscon = SSL.Connection(osobj, sock)
        oscon.set_tlsext_host_name(host.encode())
        oscon.set_connect_state()
        oscon.do_handshake()
        cert = oscon.get_peer_certificate()
        sock.close()
        return cert

    def border_msg(self, message):
        """Print the message in the box."""
        row = len(message)
        h = ''.join(['+'] + ['-' * row] + ['+'])
        result = h + '\n' "|" + message + "|"'\n' + h
        print(result)

    def get_cert_sans(self, x509cert):
        """
        Get Subject Alt Names from Certificate.
        """
        san = ''
        ext_count = x509cert.get_extension_count()
        for i in range(0, ext_count):
            ext = x509cert.get_extension(i)
            if 'subjectAltName' in str(ext.get_short_name()):
                san = ext.__str__()
        # replace commas to not break csv output
        san = san.replace(',', ';')
        return san

    def get_cert_info(self, host, cert):
        """Get all the information about cert and create a JSON file."""
        context = {}

        cert_subject = cert.get_subject()

        context['host'] = host
        context['issued_to'] = cert_subject.CN
        context['issued_o'] = cert_subject.O
        context['issuer_c'] = cert.get_issuer().countryName
        context['issuer_o'] = cert.get_issuer().organizationName
        context['issuer_ou'] = cert.get_issuer().organizationalUnitName
        context['issuer_cn'] = cert.get_issuer().commonName
        context['cert_sn'] = str(cert.get_serial_number())
        context['cert_sha1'] = cert.digest('sha1').decode()
        context['cert_alg'] = cert.get_signature_algorithm().decode()
        context['cert_ver'] = cert.get_version()
        context['cert_sans'] = self.get_cert_sans(cert)
        context['cert_exp'] = cert.has_expired()
        context['cert_valid'] = False if cert.has_expired() else True

        # Valid from
        valid_from = datetime.strptime(cert.get_notBefore().decode('ascii'),
                                       '%Y%m%d%H%M%SZ')
        context['valid_from'] = valid_from.strftime('%Y-%m-%d')

        # Valid till
        valid_till = datetime.strptime(cert.get_notAfter().decode('ascii'),
                                       '%Y%m%d%H%M%SZ')
        context['valid_till'] = valid_till.strftime('%Y-%m-%d')

        # Validity days
        context['validity_days'] = (valid_till - valid_from).days

        # Validity in days from now
        now = datetime.now()
        context['days_left'] = (valid_till - now).days

        # Valid days left
        context['valid_days_to_expire'] = (datetime.strptime(context['valid_till'],
                                           '%Y-%m-%d') - datetime.now()).days

        if cert.has_expired():
            self.total_expired += 1
        else:
            self.total_valid += 1

        # If the certificate has less than 15 days validity
        if context['valid_days_to_expire'] <= 15:
            self.total_warning += 1

        return context

    def show_result(self, host):  # Modified to accept a single host
        context = {}
        start_time = datetime.now()
        results = []

        host, port = self.filter_hostname(host)
        if host not in context.keys():
            try:
                cert = self.get_cert(host, port)
                context[host] = self.get_cert_info(host, cert)
                context[host]['tcp_port'] = int(port)
                results.append((host, context))
            except (SSL.SysCallError, Exception) as e:
                results.append((host, str(e)))
                self.total_failed += 1
            except KeyboardInterrupt:
                raise KeyboardInterrupt("Script was interrupted.")
        
        duration = datetime.now() - start_time
        summary = {
            'successful': 1 - self.total_failed,
            'failed': self.total_failed,
            'valid': self.total_valid,
            'warning': self.total_warning,
            'expired': self.total_expired,
            'duration': duration
        }

        return results, summary
    
def input_hosts():
    print("Enter/Paste the hosts. Ctrl-D or Ctrl-Z (Windows) to save it.")
    hosts = []
    while True:
        try:
            line = input()
        except EOFError:
            break
        hosts.append(line)
    return hosts

def print_results(results, summary):
    print("\nSSL Certificate Details:")
    print("~~~~~~~~~~~~~~~~~~~~~~~~~\n")
    
    for host, context in results:
        print(f"Details for: {host}")
        print("-" * (len(host) + 14))  # Dynamic underlining based on host length

        if isinstance(context, dict):
            for key, value in context[host].items():

                # Highlight expired certificates with "!!!"
                if key == 'cert_exp' and value:
                    print("  !!! CERTIFICATE EXPIRED !!!")

                # Highlight warning for certificates near expiry
                if key == 'valid_days_to_expire' and value <= 15:
                    print("  !!! CERTIFICATE EXPIRING SOON !!!")

                # Pretty printing for long lists like cert_sans
                if key == 'cert_sans' and len(str(value)) > 100:
                    print(f"  {key.capitalize().replace('_', ' ')}:")
                    for item in value.split(';'):
                        print(f"    - {item.strip()}")
                else:
                    print(f"  {key.capitalize().replace('_', ' ')}: {value}")
        else:
            pass
            print(f"  Error: {context}")

        print("\n")  # Add a newline between different host results
    
    print("Summary:")
    print("~~~~~~~~")
    for key, value in summary.items():
        # Convert duration to a more human-readable format
        if key == 'duration':
            value = str(value).split('.')[0]  # Removing microseconds
        print(f"{key.capitalize()}: {value}")


if __name__ == "__main__":
    checker = SSLChecker()
    
    # Hardcoded host value as google.com
    host = "google.com"  # Single host as a string
    
    results, summary = checker.show_result(host)  # Pass single host instead of a list
    
    print_results(results, summary)