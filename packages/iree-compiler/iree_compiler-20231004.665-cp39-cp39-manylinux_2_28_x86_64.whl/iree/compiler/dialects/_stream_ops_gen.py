
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _stream_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "stream"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncAllocaOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.alloca"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, storage_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(storage_size))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def storage_size(self):
    return self.operation.operands[0]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncCallOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.call"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, callee, resource_operands, resource_operand_sizes, resource_operand_offsets, resource_operand_ends, resource_operand_lengths, result_sizes, *, tied_operands=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(resource_operands))
    operands.append(_get_op_results_or_values(resource_operand_sizes))
    operands.append(_get_op_results_or_values(resource_operand_offsets))
    operands.append(_get_op_results_or_values(resource_operand_ends))
    operands.append(_get_op_results_or_values(resource_operand_lengths))
    operands.append(_get_op_results_or_values(result_sizes))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["callee"] = (callee if (
    issubclass(type(callee), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(callee, context=_ods_context))
    if tied_operands is not None: attributes["tied_operands"] = (tied_operands if (
        issubclass(type(tied_operands), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Util_TiedOpStorageAttr')) else
          _ods_ir.AttrBuilder.get('Util_TiedOpStorageAttr')(tied_operands, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def resource_operands(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range

  @builtins.property
  def resource_operand_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def resource_operand_offsets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range

  @builtins.property
  def resource_operand_ends(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def resource_operand_lengths(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range

  @builtins.property
  def result_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 5)
    return operand_range

  @builtins.property
  def callee(self):
    return self.operation.attributes["callee"]

  @callee.setter
  def callee(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["callee"] = value

  @builtins.property
  def tied_operands(self):
    if "tied_operands" not in self.operation.attributes:
      return None
    return self.operation.attributes["tied_operands"]

  @tied_operands.setter
  def tied_operands(self, value):
    if value is not None:
      self.operation.attributes["tied_operands"] = value
    elif "tied_operands" in self.operation.attributes:
      del self.operation.attributes["tied_operands"]

  @tied_operands.deleter
  def tied_operands(self):
    del self.operation.attributes["tied_operands"]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncCloneOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.clone"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, source_size, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def result_size(self):
    return self.operation.operands[2]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncCollectiveOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.collective"

  _ODS_REGIONS = (0, True)

  def __init__(self, op, target, target_size, target_offset, target_end, target_length, source, source_size, source_offset, source_end, source_length, element_count, channel, *, param=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(target_end))
    operands.append(_get_op_result_or_value(target_length))
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(source_end))
    operands.append(_get_op_result_or_value(source_length))
    operands.append(_get_op_result_or_value(element_count))
    operands.append(_get_op_result_or_value(channel))
    if param is not None: operands.append(_get_op_result_or_value(param))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["op"] = (op if (
    issubclass(type(op), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('Stream_CollectiveAttr')) else
      _ods_ir.AttrBuilder.get('Stream_CollectiveAttr')(op, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_end(self):
    return self.operation.operands[3]

  @builtins.property
  def target_length(self):
    return self.operation.operands[4]

  @builtins.property
  def source(self):
    return self.operation.operands[5]

  @builtins.property
  def source_size(self):
    return self.operation.operands[6]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[7]

  @builtins.property
  def source_end(self):
    return self.operation.operands[8]

  @builtins.property
  def source_length(self):
    return self.operation.operands[9]

  @builtins.property
  def element_count(self):
    return self.operation.operands[10]

  @builtins.property
  def channel(self):
    return self.operation.operands[11]

  @builtins.property
  def param(self):
    return None if len(self.operation.operands) < 13 else self.operation.operands[12]

  @builtins.property
  def op(self):
    return self.operation.attributes["op"]

  @op.setter
  def op(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["op"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncConcurrentOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.concurrent"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (1, True)

  @builtins.property
  def resource_operands(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range

  @builtins.property
  def resource_operand_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def result_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range

  @builtins.property
  def tied_operands(self):
    if "tied_operands" not in self.operation.attributes:
      return None
    return self.operation.attributes["tied_operands"]

  @tied_operands.setter
  def tied_operands(self, value):
    if value is not None:
      self.operation.attributes["tied_operands"] = value
    elif "tied_operands" in self.operation.attributes:
      del self.operation.attributes["tied_operands"]

  @tied_operands.deleter
  def tied_operands(self):
    del self.operation.attributes["tied_operands"]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncConstantOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.constant"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, value, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('AnyAttr')) else
      _ods_ir.AttrBuilder.get('AnyAttr')(value, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result_size(self):
    return self.operation.operands[0]

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, target_end, source, source_size, source_offset, source_end, length, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(target_end))
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(source_end))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_end(self):
    return self.operation.operands[3]

  @builtins.property
  def source(self):
    return self.operation.operands[4]

  @builtins.property
  def source_size(self):
    return self.operation.operands[5]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[6]

  @builtins.property
  def source_end(self):
    return self.operation.operands[7]

  @builtins.property
  def length(self):
    return self.operation.operands[8]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncDispatchOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.dispatch"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,-1,-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, workload, entry_point, resource_operands, resource_operand_sizes, resource_operand_offsets, resource_operand_ends, resource_operand_lengths, result_sizes, *, tied_operands=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(workload))
    operands.append(_get_op_results_or_values(resource_operands))
    operands.append(_get_op_results_or_values(resource_operand_sizes))
    operands.append(_get_op_results_or_values(resource_operand_offsets))
    operands.append(_get_op_results_or_values(resource_operand_ends))
    operands.append(_get_op_results_or_values(resource_operand_lengths))
    operands.append(_get_op_results_or_values(result_sizes))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["entry_point"] = (entry_point if (
    issubclass(type(entry_point), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(entry_point, context=_ods_context))
    if tied_operands is not None: attributes["tied_operands"] = (tied_operands if (
        issubclass(type(tied_operands), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Util_TiedOpStorageAttr')) else
          _ods_ir.AttrBuilder.get('Util_TiedOpStorageAttr')(tied_operands, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def workload(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range

  @builtins.property
  def resource_operands(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def resource_operand_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range

  @builtins.property
  def resource_operand_offsets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def resource_operand_ends(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range

  @builtins.property
  def resource_operand_lengths(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 5)
    return operand_range

  @builtins.property
  def result_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 6)
    return operand_range

  @builtins.property
  def entry_point(self):
    return self.operation.attributes["entry_point"]

  @entry_point.setter
  def entry_point(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["entry_point"] = value

  @builtins.property
  def tied_operands(self):
    if "tied_operands" not in self.operation.attributes:
      return None
    return self.operation.attributes["tied_operands"]

  @tied_operands.setter
  def tied_operands(self, value):
    if value is not None:
      self.operation.attributes["tied_operands"] = value
    elif "tied_operands" in self.operation.attributes:
      del self.operation.attributes["tied_operands"]

  @tied_operands.deleter
  def tied_operands(self):
    del self.operation.attributes["tied_operands"]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncExecuteOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.execute"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,0,]

  _ODS_REGIONS = (1, True)

  @builtins.property
  def resource_operands(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range

  @builtins.property
  def resource_operand_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def result_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range

  @builtins.property
  def await_timepoint(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def tied_operands(self):
    if "tied_operands" not in self.operation.attributes:
      return None
    return self.operation.attributes["tied_operands"]

  @tied_operands.setter
  def tied_operands(self, value):
    if value is not None:
      self.operation.attributes["tied_operands"] = value
    elif "tied_operands" in self.operation.attributes:
      del self.operation.attributes["tied_operands"]

  @tied_operands.deleter
  def tied_operands(self):
    del self.operation.attributes["tied_operands"]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result_timepoint(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[1 + _ods_variadic_group_length - 1]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncFillOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.fill"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, target_end, target_length, value, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(target_end))
    operands.append(_get_op_result_or_value(target_length))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_end(self):
    return self.operation.operands[3]

  @builtins.property
  def target_length(self):
    return self.operation.operands[4]

  @builtins.property
  def value(self):
    return self.operation.operands[5]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncFuncOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.func"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def function_type(self):
    return self.operation.attributes["function_type"]

  @function_type.setter
  def function_type(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["function_type"] = value

  @builtins.property
  def tied_operands(self):
    if "tied_operands" not in self.operation.attributes:
      return None
    return self.operation.attributes["tied_operands"]

  @tied_operands.setter
  def tied_operands(self, value):
    if value is not None:
      self.operation.attributes["tied_operands"] = value
    elif "tied_operands" in self.operation.attributes:
      del self.operation.attributes["tied_operands"]

  @tied_operands.deleter
  def tied_operands(self):
    del self.operation.attributes["tied_operands"]

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def arg_attrs(self):
    if "arg_attrs" not in self.operation.attributes:
      return None
    return self.operation.attributes["arg_attrs"]

  @arg_attrs.setter
  def arg_attrs(self, value):
    if value is not None:
      self.operation.attributes["arg_attrs"] = value
    elif "arg_attrs" in self.operation.attributes:
      del self.operation.attributes["arg_attrs"]

  @arg_attrs.deleter
  def arg_attrs(self):
    del self.operation.attributes["arg_attrs"]

  @builtins.property
  def res_attrs(self):
    if "res_attrs" not in self.operation.attributes:
      return None
    return self.operation.attributes["res_attrs"]

  @res_attrs.setter
  def res_attrs(self, value):
    if value is not None:
      self.operation.attributes["res_attrs"] = value
    elif "res_attrs" in self.operation.attributes:
      del self.operation.attributes["res_attrs"]

  @res_attrs.deleter
  def res_attrs(self):
    del self.operation.attributes["res_attrs"]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, source_size, source_offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncSliceOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.slice"

  _ODS_REGIONS = (0, True)

  def __init__(self, source, source_size, source_offset, source_end, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(source_end))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def source_end(self):
    return self.operation.operands[3]

  @builtins.property
  def result_size(self):
    return self.operation.operands[4]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncSplatOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.splat"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, value, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(value))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def result_size(self):
    return self.operation.operands[1]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncTransferOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.transfer"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, source_size, result_size, *, source_affinity=None, result_affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    if source_affinity is not None: attributes["source_affinity"] = (source_affinity if (
        issubclass(type(source_affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(source_affinity, context=_ods_context))
    if result_affinity is not None: attributes["result_affinity"] = (result_affinity if (
        issubclass(type(result_affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(result_affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def result_size(self):
    return self.operation.operands[2]

  @builtins.property
  def source_affinity(self):
    if "source_affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["source_affinity"]

  @source_affinity.setter
  def source_affinity(self, value):
    if value is not None:
      self.operation.attributes["source_affinity"] = value
    elif "source_affinity" in self.operation.attributes:
      del self.operation.attributes["source_affinity"]

  @source_affinity.deleter
  def source_affinity(self):
    del self.operation.attributes["source_affinity"]

  @builtins.property
  def result_affinity(self):
    if "result_affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["result_affinity"]

  @result_affinity.setter
  def result_affinity(self, value):
    if value is not None:
      self.operation.attributes["result_affinity"] = value
    elif "result_affinity" in self.operation.attributes:
      del self.operation.attributes["result_affinity"]

  @result_affinity.deleter
  def result_affinity(self):
    del self.operation.attributes["result_affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AsyncUpdateOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.async.update"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, target_end, update, update_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(target_end))
    operands.append(_get_op_result_or_value(update))
    operands.append(_get_op_result_or_value(update_size))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_end(self):
    return self.operation.operands[3]

  @builtins.property
  def update(self):
    return self.operation.operands[4]

  @builtins.property
  def update_size(self):
    return self.operation.operands[5]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BindingSubspanOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.binding.subspan"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, binding, byte_offset, dynamic_dims, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(binding))
    operands.append(_get_op_result_or_value(byte_offset))
    operands.extend(_get_op_results_or_values(dynamic_dims))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def binding(self):
    return self.operation.operands[0]

  @builtins.property
  def byte_offset(self):
    return self.operation.operands[1]

  @builtins.property
  def dynamic_dims(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2:2 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ChannelCountOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.channel.count"

  _ODS_REGIONS = (0, True)

  def __init__(self, channel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(channel))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def channel(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ChannelCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.channel.create"

  _ODS_OPERAND_SEGMENTS = [0,0,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, *, id=None, group=None, rank=None, count=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(id) if id is not None else None)
    operands.append(_get_op_result_or_value(rank) if rank is not None else None)
    operands.append(_get_op_result_or_value(count) if count is not None else None)
    _ods_context = _ods_get_default_loc_context(loc)
    if group is not None: attributes["group"] = (group if (
        issubclass(type(group), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(group, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def id(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def rank(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def count(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def group(self):
    if "group" not in self.operation.attributes:
      return None
    return self.operation.attributes["group"]

  @group.setter
  def group(self, value):
    if value is not None:
      self.operation.attributes["group"] = value
    elif "group" in self.operation.attributes:
      del self.operation.attributes["group"]

  @group.deleter
  def group(self):
    del self.operation.attributes["group"]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ChannelRankOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.channel.rank"

  _ODS_REGIONS = (0, True)

  def __init__(self, channel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(channel))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def channel(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ChannelSplitOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.channel.split"

  _ODS_REGIONS = (0, True)

  def __init__(self, channel, color, key, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(channel))
    operands.append(_get_op_result_or_value(color))
    operands.append(_get_op_result_or_value(key))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def channel(self):
    return self.operation.operands[0]

  @builtins.property
  def color(self):
    return self.operation.operands[1]

  @builtins.property
  def key(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdCallOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.call"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, callee, resource_operands, resource_operand_sizes, resource_operand_offsets, resource_operand_lengths, result_sizes, resource_operand_accesses, *, tied_operands=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(resource_operands))
    operands.append(_get_op_results_or_values(resource_operand_sizes))
    operands.append(_get_op_results_or_values(resource_operand_offsets))
    operands.append(_get_op_results_or_values(resource_operand_lengths))
    operands.append(_get_op_results_or_values(result_sizes))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["callee"] = (callee if (
    issubclass(type(callee), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(callee, context=_ods_context))
    if tied_operands is not None: attributes["tied_operands"] = (tied_operands if (
        issubclass(type(tied_operands), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Util_TiedOpStorageAttr')) else
          _ods_ir.AttrBuilder.get('Util_TiedOpStorageAttr')(tied_operands, context=_ods_context))
    attributes["resource_operand_accesses"] = (resource_operand_accesses if (
    issubclass(type(resource_operand_accesses), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('Stream_ResourceAccessArrayAttr')) else
      _ods_ir.AttrBuilder.get('Stream_ResourceAccessArrayAttr')(resource_operand_accesses, context=_ods_context))
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def resource_operands(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range

  @builtins.property
  def resource_operand_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def resource_operand_offsets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range

  @builtins.property
  def resource_operand_lengths(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def result_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range

  @builtins.property
  def callee(self):
    return self.operation.attributes["callee"]

  @callee.setter
  def callee(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["callee"] = value

  @builtins.property
  def tied_operands(self):
    if "tied_operands" not in self.operation.attributes:
      return None
    return self.operation.attributes["tied_operands"]

  @tied_operands.setter
  def tied_operands(self, value):
    if value is not None:
      self.operation.attributes["tied_operands"] = value
    elif "tied_operands" in self.operation.attributes:
      del self.operation.attributes["tied_operands"]

  @tied_operands.deleter
  def tied_operands(self):
    del self.operation.attributes["tied_operands"]

  @builtins.property
  def resource_operand_accesses(self):
    return self.operation.attributes["resource_operand_accesses"]

  @resource_operand_accesses.setter
  def resource_operand_accesses(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["resource_operand_accesses"] = value

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdCollectiveOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.collective"

  _ODS_OPERAND_SEGMENTS = [1,1,0,-1,-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, op, channel, element_count, resources, resource_sizes, resource_offsets, resource_lengths, resource_accesses, *, param=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(channel))
    operands.append(_get_op_result_or_value(element_count))
    operands.append(_get_op_result_or_value(param) if param is not None else None)
    operands.append(_get_op_results_or_values(resources))
    operands.append(_get_op_results_or_values(resource_sizes))
    operands.append(_get_op_results_or_values(resource_offsets))
    operands.append(_get_op_results_or_values(resource_lengths))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["op"] = (op if (
    issubclass(type(op), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('Stream_CollectiveAttr')) else
      _ods_ir.AttrBuilder.get('Stream_CollectiveAttr')(op, context=_ods_context))
    attributes["resource_accesses"] = (resource_accesses if (
    issubclass(type(resource_accesses), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('Stream_ResourceAccessArrayAttr')) else
      _ods_ir.AttrBuilder.get('Stream_ResourceAccessArrayAttr')(resource_accesses, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def channel(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def element_count(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range[0]

  @builtins.property
  def param(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def resources(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def resource_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range

  @builtins.property
  def resource_offsets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 5)
    return operand_range

  @builtins.property
  def resource_lengths(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 6)
    return operand_range

  @builtins.property
  def op(self):
    return self.operation.attributes["op"]

  @op.setter
  def op(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["op"] = value

  @builtins.property
  def resource_accesses(self):
    return self.operation.attributes["resource_accesses"]

  @resource_accesses.setter
  def resource_accesses(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["resource_accesses"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdConcurrentOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.concurrent"

  _ODS_REGIONS = (1, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdCopyOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.copy"

  _ODS_REGIONS = (0, True)

  def __init__(self, source, source_size, source_offset, target, target_size, target_offset, length, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target(self):
    return self.operation.operands[3]

  @builtins.property
  def target_size(self):
    return self.operation.operands[4]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[5]

  @builtins.property
  def length(self):
    return self.operation.operands[6]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdDiscardOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.discard"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, target_length, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(target_length))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_length(self):
    return self.operation.operands[3]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdDispatchOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.dispatch"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, workload, entry_points, uniform_operands, resources, resource_sizes, resource_offsets, resource_lengths, resource_accesses, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(workload))
    operands.append(_get_op_results_or_values(uniform_operands))
    operands.append(_get_op_results_or_values(resources))
    operands.append(_get_op_results_or_values(resource_sizes))
    operands.append(_get_op_results_or_values(resource_offsets))
    operands.append(_get_op_results_or_values(resource_lengths))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["entry_points"] = (entry_points if (
    issubclass(type(entry_points), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefArrayAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefArrayAttr')(entry_points, context=_ods_context))
    attributes["resource_accesses"] = (resource_accesses if (
    issubclass(type(resource_accesses), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('Stream_ResourceAccessArrayAttr')) else
      _ods_ir.AttrBuilder.get('Stream_ResourceAccessArrayAttr')(resource_accesses, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def workload(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range

  @builtins.property
  def uniform_operands(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def resources(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range

  @builtins.property
  def resource_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def resource_offsets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range

  @builtins.property
  def resource_lengths(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 5)
    return operand_range

  @builtins.property
  def entry_points(self):
    return self.operation.attributes["entry_points"]

  @entry_points.setter
  def entry_points(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["entry_points"] = value

  @builtins.property
  def resource_accesses(self):
    return self.operation.attributes["resource_accesses"]

  @resource_accesses.setter
  def resource_accesses(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["resource_accesses"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdExecuteOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.execute"

  _ODS_OPERAND_SEGMENTS = [-1,-1,0,]

  _ODS_REGIONS = (1, True)

  @builtins.property
  def resource_operands(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range

  @builtins.property
  def resource_operand_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def await_timepoint(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdFillOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.fill"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, target_length, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(target_length))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_length(self):
    return self.operation.operands[3]

  @builtins.property
  def value(self):
    return self.operation.operands[4]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdFlushOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.flush"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, target_length, *, source_affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(target_length))
    _ods_context = _ods_get_default_loc_context(loc)
    if source_affinity is not None: attributes["source_affinity"] = (source_affinity if (
        issubclass(type(source_affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(source_affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_length(self):
    return self.operation.operands[3]

  @builtins.property
  def source_affinity(self):
    if "source_affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["source_affinity"]

  @source_affinity.setter
  def source_affinity(self, value):
    if value is not None:
      self.operation.attributes["source_affinity"] = value
    elif "source_affinity" in self.operation.attributes:
      del self.operation.attributes["source_affinity"]

  @source_affinity.deleter
  def source_affinity(self):
    del self.operation.attributes["source_affinity"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdFuncOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.func"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def function_type(self):
    return self.operation.attributes["function_type"]

  @function_type.setter
  def function_type(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["function_type"] = value

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def arg_attrs(self):
    if "arg_attrs" not in self.operation.attributes:
      return None
    return self.operation.attributes["arg_attrs"]

  @arg_attrs.setter
  def arg_attrs(self, value):
    if value is not None:
      self.operation.attributes["arg_attrs"] = value
    elif "arg_attrs" in self.operation.attributes:
      del self.operation.attributes["arg_attrs"]

  @arg_attrs.deleter
  def arg_attrs(self):
    del self.operation.attributes["arg_attrs"]

  @builtins.property
  def res_attrs(self):
    if "res_attrs" not in self.operation.attributes:
      return None
    return self.operation.attributes["res_attrs"]

  @res_attrs.setter
  def res_attrs(self, value):
    if value is not None:
      self.operation.attributes["res_attrs"] = value
    elif "res_attrs" in self.operation.attributes:
      del self.operation.attributes["res_attrs"]

  @res_attrs.deleter
  def res_attrs(self):
    del self.operation.attributes["res_attrs"]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdInvalidateOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.invalidate"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, target_length, *, source_affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(target_length))
    _ods_context = _ods_get_default_loc_context(loc)
    if source_affinity is not None: attributes["source_affinity"] = (source_affinity if (
        issubclass(type(source_affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(source_affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_length(self):
    return self.operation.operands[3]

  @builtins.property
  def source_affinity(self):
    if "source_affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["source_affinity"]

  @source_affinity.setter
  def source_affinity(self, value):
    if value is not None:
      self.operation.attributes["source_affinity"] = value
    elif "source_affinity" in self.operation.attributes:
      del self.operation.attributes["source_affinity"]

  @source_affinity.deleter
  def source_affinity(self):
    del self.operation.attributes["source_affinity"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CmdSerialOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.cmd.serial"

  _ODS_REGIONS = (1, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableEndOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.executable.end"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableExportOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.executable.export"

  _ODS_REGIONS = (1, True)

  def __init__(self, sym_name, function_ref, *, sym_visibility=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if sym_visibility is not None: attributes["sym_visibility"] = (sym_visibility if (
        issubclass(type(sym_visibility), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(sym_visibility, context=_ods_context))
    attributes["sym_name"] = (sym_name if (
    issubclass(type(sym_name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolNameAttr')) else
      _ods_ir.AttrBuilder.get('SymbolNameAttr')(sym_name, context=_ods_context))
    attributes["function_ref"] = (function_ref if (
    issubclass(type(function_ref), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(function_ref, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def function_ref(self):
    return self.operation.attributes["function_ref"]

  @function_ref.setter
  def function_ref(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["function_ref"] = value

  @builtins.property
  def workgroup_count(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.executable"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FileConstantOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.file.constant"

  _ODS_REGIONS = (0, True)

  def __init__(self, source, source_size, source_offset, source_length, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(source_length))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def source_length(self):
    return self.operation.operands[3]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FileReadOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.file.read"

  _ODS_REGIONS = (0, True)

  def __init__(self, source, source_offset, target, target_size, target_offset, length, *, await_timepoint=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(length))
    if await_timepoint is not None: operands.append(_get_op_result_or_value(await_timepoint))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[1]

  @builtins.property
  def target(self):
    return self.operation.operands[2]

  @builtins.property
  def target_size(self):
    return self.operation.operands[3]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[4]

  @builtins.property
  def length(self):
    return self.operation.operands[5]

  @builtins.property
  def await_timepoint(self):
    return None if len(self.operation.operands) < 7 else self.operation.operands[6]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FileWriteOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.file.write"

  _ODS_REGIONS = (0, True)

  def __init__(self, source, source_size, source_offset, target, target_offset, length, *, await_timepoint=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(length))
    if await_timepoint is not None: operands.append(_get_op_result_or_value(await_timepoint))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target(self):
    return self.operation.operands[3]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[4]

  @builtins.property
  def length(self):
    return self.operation.operands[5]

  @builtins.property
  def await_timepoint(self):
    return None if len(self.operation.operands) < 7 else self.operation.operands[6]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceAllocOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.alloc"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, storage_sizes, *, uninitialized=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(storage_sizes))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(uninitialized): attributes["uninitialized"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def storage_sizes(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def uninitialized(self):
    return "uninitialized" in self.operation.attributes

  @uninitialized.setter
  def uninitialized(self, value):
    if bool(value):
      self.operation.attributes["uninitialized"] = _ods_ir.UnitAttr.get()
    elif "uninitialized" in self.operation.attributes:
      del self.operation.attributes["uninitialized"]

  @uninitialized.deleter
  def uninitialized(self):
    del self.operation.attributes["uninitialized"]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceAllocaOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.alloca"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, result_timepoint, storage_size, *, await_timepoint=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(storage_size))
    if await_timepoint is not None: operands.append(_get_op_result_or_value(await_timepoint))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    results.append(result_timepoint)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def storage_size(self):
    return self.operation.operands[0]

  @builtins.property
  def await_timepoint(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceConstantsOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.constants"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, result_timepoint, values, result_sizes, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(result_sizes))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["values"] = (values if (
    issubclass(type(values), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('anonymous_629')) else
      _ods_ir.AttrBuilder.get('anonymous_629')(values, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.extend(results_)
    results.append(result_timepoint)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result_sizes(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def values(self):
    return self.operation.attributes["values"]

  @values.setter
  def values(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["values"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result_timepoint(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[1 + _ods_variadic_group_length - 1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceDeallocaOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.dealloca"

  _ODS_REGIONS = (0, True)

  def __init__(self, operand, operand_size, *, await_timepoint=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(operand))
    operands.append(_get_op_result_or_value(operand_size))
    if await_timepoint is not None: operands.append(_get_op_result_or_value(await_timepoint))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operand(self):
    return self.operation.operands[0]

  @builtins.property
  def operand_size(self):
    return self.operation.operands[1]

  @builtins.property
  def await_timepoint(self):
    return None if len(self.operation.operands) < 3 else self.operation.operands[2]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, source_size, source_offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourcePackOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.pack"

  _ODS_OPERAND_SEGMENTS = [0,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, total_length, packed_offsets, lifetime_intervals, dynamic_slice_sizes, *, offset=None, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(offset) if offset is not None else None)
    operands.append(_get_op_results_or_values(dynamic_slice_sizes))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["lifetime_intervals"] = (lifetime_intervals if (
    issubclass(type(lifetime_intervals), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('Stream_IndexArrayAttr')) else
      _ods_ir.AttrBuilder.get('Stream_IndexArrayAttr')(lifetime_intervals, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(total_length)
    results.extend(packed_offsets)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def offset(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def dynamic_slice_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def lifetime_intervals(self):
    return self.operation.attributes["lifetime_intervals"]

  @lifetime_intervals.setter
  def lifetime_intervals(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["lifetime_intervals"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def total_length(self):
    return self.operation.results[0]

  @builtins.property
  def packed_offsets(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[1:1 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceSizeOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.size"

  _ODS_REGIONS = (0, True)

  def __init__(self, operand, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(operand))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operand(self):
    return self.operation.operands[0]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_size, target_offset, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def target_size(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def value(self):
    return self.operation.operands[3]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceSubviewOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.subview"

  _ODS_REGIONS = (0, True)

  def __init__(self, source, source_size, source_offset, result_size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_size(self):
    return self.operation.operands[1]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def result_size(self):
    return self.operation.operands[3]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResourceTryMapOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.resource.try_map"

  _ODS_REGIONS = (0, True)

  def __init__(self, did_map, result, source, source_offset, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(did_map)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[1]

  @builtins.property
  def result_size(self):
    return self.operation.operands[2]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def did_map(self):
    return self.operation.results[0]

  @builtins.property
  def result(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ReturnOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.return"

  _ODS_REGIONS = (0, True)

  def __init__(self, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorCloneOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.clone"

  _ODS_OPERAND_SEGMENTS = [1,-1,1,-1,1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, source_encoding, source_encoding_dims, source_size, result_encoding, result_encoding_dims, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_results_or_values(source_encoding_dims))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_results_or_values(result_encoding_dims))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["source_encoding"] = (source_encoding if (
    issubclass(type(source_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(source_encoding, context=_ods_context))
    attributes["result_encoding"] = (result_encoding if (
    issubclass(type(result_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(result_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def source_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def source_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def result_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def result_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range[0]

  @builtins.property
  def source_encoding(self):
    return self.operation.attributes["source_encoding"]

  @source_encoding.setter
  def source_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["source_encoding"] = value

  @builtins.property
  def result_encoding(self):
    return self.operation.attributes["result_encoding"]

  @result_encoding.setter
  def result_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["result_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorConstantOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.constant"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, value, result_encoding, result_encoding_dims, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(result_encoding_dims))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    issubclass(type(value), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('AnyAttr')) else
      _ods_ir.AttrBuilder.get('AnyAttr')(value, context=_ods_context))
    attributes["result_encoding"] = (result_encoding if (
    issubclass(type(result_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(result_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result_encoding_dims(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result_encoding(self):
    return self.operation.attributes["result_encoding"]

  @result_encoding.setter
  def result_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["result_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorEmptyOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.empty"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, result_encoding, result_encoding_dims, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(result_encoding_dims))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["result_encoding"] = (result_encoding if (
    issubclass(type(result_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(result_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result_encoding_dims(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result_size(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1 + _ods_variadic_group_length - 1]

  @builtins.property
  def result_encoding(self):
    return self.operation.attributes["result_encoding"]

  @result_encoding.setter
  def result_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["result_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorExportOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.export"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, source_encoding, source_encoding_dims, source_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.extend(_get_op_results_or_values(source_encoding_dims))
    operands.append(_get_op_result_or_value(source_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["source_encoding"] = (source_encoding if (
    issubclass(type(source_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(source_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def source_encoding_dims(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def source_size(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2 + _ods_variadic_group_length - 1]

  @builtins.property
  def source_encoding(self):
    return self.operation.attributes["source_encoding"]

  @source_encoding.setter
  def source_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["source_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorFillOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.fill"

  _ODS_OPERAND_SEGMENTS = [1,-1,1,-1,-1,1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_encoding, target_encoding_dims, target_size, start_indices, lengths, value, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_results_or_values(target_encoding_dims))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_results_or_values(start_indices))
    operands.append(_get_op_results_or_values(lengths))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["target_encoding"] = (target_encoding if (
    issubclass(type(target_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(target_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def target_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def target_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def start_indices(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def lengths(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range

  @builtins.property
  def value(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 5)
    return operand_range[0]

  @builtins.property
  def target_encoding(self):
    return self.operation.attributes["target_encoding"]

  @target_encoding.setter
  def target_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["target_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorImportOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.import"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, result_encoding, result_encoding_dims, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.extend(_get_op_results_or_values(result_encoding_dims))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["result_encoding"] = (result_encoding if (
    issubclass(type(result_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(result_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def result_encoding_dims(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def result_size(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2 + _ods_variadic_group_length - 1]

  @builtins.property
  def result_encoding(self):
    return self.operation.attributes["result_encoding"]

  @result_encoding.setter
  def result_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["result_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.load"

  _ODS_OPERAND_SEGMENTS = [1,-1,1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, source_encoding, source_encoding_dims, source_size, indices, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_results_or_values(source_encoding_dims))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_results_or_values(indices))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["source_encoding"] = (source_encoding if (
    issubclass(type(source_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(source_encoding, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def source_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def source_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def indices(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def source_encoding(self):
    return self.operation.attributes["source_encoding"]

  @source_encoding.setter
  def source_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["source_encoding"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorSizeOfOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.sizeof"

  _ODS_REGIONS = (0, True)

  def __init__(self, encoding, encoding_dims, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(encoding_dims))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["encoding"] = (encoding if (
    issubclass(type(encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def encoding_dims(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def encoding(self):
    return self.operation.attributes["encoding"]

  @encoding.setter
  def encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def storage_size(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorSliceOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.slice"

  _ODS_OPERAND_SEGMENTS = [1,-1,1,-1,-1,-1,1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source, source_encoding, source_encoding_dims, source_size, start_indices, lengths, result_encoding, result_encoding_dims, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_results_or_values(source_encoding_dims))
    operands.append(_get_op_result_or_value(source_size))
    operands.append(_get_op_results_or_values(start_indices))
    operands.append(_get_op_results_or_values(lengths))
    operands.append(_get_op_results_or_values(result_encoding_dims))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["source_encoding"] = (source_encoding if (
    issubclass(type(source_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(source_encoding, context=_ods_context))
    attributes["result_encoding"] = (result_encoding if (
    issubclass(type(result_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(result_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def source_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def source_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def start_indices(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def lengths(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range

  @builtins.property
  def result_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 5)
    return operand_range

  @builtins.property
  def result_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 6)
    return operand_range[0]

  @builtins.property
  def source_encoding(self):
    return self.operation.attributes["source_encoding"]

  @source_encoding.setter
  def source_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["source_encoding"] = value

  @builtins.property
  def result_encoding(self):
    return self.operation.attributes["result_encoding"]

  @result_encoding.setter
  def result_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["result_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorSplatOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.splat"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, value, result_encoding, result_encoding_dims, result_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(value))
    operands.extend(_get_op_results_or_values(result_encoding_dims))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["result_encoding"] = (result_encoding if (
    issubclass(type(result_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(result_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def result_encoding_dims(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def result_size(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2 + _ods_variadic_group_length - 1]

  @builtins.property
  def result_encoding(self):
    return self.operation.attributes["result_encoding"]

  @result_encoding.setter
  def result_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["result_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.store"

  _ODS_OPERAND_SEGMENTS = [1,-1,1,-1,1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_encoding, target_encoding_dims, target_size, indices, value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_results_or_values(target_encoding_dims))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_results_or_values(indices))
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["target_encoding"] = (target_encoding if (
    issubclass(type(target_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(target_encoding, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def target_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def target_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def indices(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def value(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range[0]

  @builtins.property
  def target_encoding(self):
    return self.operation.attributes["target_encoding"]

  @target_encoding.setter
  def target_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["target_encoding"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorTraceOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.trace"

  _ODS_REGIONS = (0, True)

  def __init__(self, key, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["key"] = (key if (
    issubclass(type(key), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(key, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def key(self):
    return self.operation.attributes["key"]

  @key.setter
  def key(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["key"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorUpdateOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.tensor.update"

  _ODS_OPERAND_SEGMENTS = [1,-1,1,-1,1,-1,1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, target, target_encoding, target_encoding_dims, target_size, start_indices, update, update_encoding, update_encoding_dims, update_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    operands.append(_get_op_results_or_values(target_encoding_dims))
    operands.append(_get_op_result_or_value(target_size))
    operands.append(_get_op_results_or_values(start_indices))
    operands.append(_get_op_result_or_value(update))
    operands.append(_get_op_results_or_values(update_encoding_dims))
    operands.append(_get_op_result_or_value(update_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["target_encoding"] = (target_encoding if (
    issubclass(type(target_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(target_encoding, context=_ods_context))
    attributes["update_encoding"] = (update_encoding if (
    issubclass(type(update_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(update_encoding, context=_ods_context))
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def target_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def target_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def start_indices(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def update(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range[0]

  @builtins.property
  def update_encoding_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 5)
    return operand_range

  @builtins.property
  def update_size(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 6)
    return operand_range[0]

  @builtins.property
  def target_encoding(self):
    return self.operation.attributes["target_encoding"]

  @target_encoding.setter
  def target_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["target_encoding"] = value

  @builtins.property
  def update_encoding(self):
    return self.operation.attributes["update_encoding"]

  @update_encoding.setter
  def update_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["update_encoding"] = value

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TimepointAwaitOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.timepoint.await"

  _ODS_OPERAND_SEGMENTS = [-1,-1,1,]

  _ODS_REGIONS = (0, True)

  @builtins.property
  def resource_operands(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range

  @builtins.property
  def resource_operand_sizes(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def await_timepoint(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TimepointBarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.timepoint.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, resource, resource_size, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(resource))
    operands.append(_get_op_result_or_value(resource_size))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def resource(self):
    return self.operation.operands[0]

  @builtins.property
  def resource_size(self):
    return self.operation.operands[1]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TimepointChainExternalOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.timepoint.chain_external"

  _ODS_REGIONS = (0, True)

  def __init__(self, await_timepoint, external_values, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(await_timepoint))
    operands.extend(_get_op_results_or_values(external_values))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def await_timepoint(self):
    return self.operation.operands[0]

  @builtins.property
  def external_values(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TimepointExportOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.timepoint.export"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, await_timepoint, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(await_timepoint))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def await_timepoint(self):
    return self.operation.operands[0]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TimepointImmediateOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.timepoint.immediate"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TimepointImportOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.timepoint.import"

  _ODS_REGIONS = (0, True)

  def __init__(self, operands_, *, affinity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    if affinity is not None: attributes["affinity"] = (affinity if (
        issubclass(type(affinity), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('Stream_AffinityAttr')) else
          _ods_ir.AttrBuilder.get('Stream_AffinityAttr')(affinity, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def affinity(self):
    if "affinity" not in self.operation.attributes:
      return None
    return self.operation.attributes["affinity"]

  @affinity.setter
  def affinity(self, value):
    if value is not None:
      self.operation.attributes["affinity"] = value
    elif "affinity" in self.operation.attributes:
      del self.operation.attributes["affinity"]

  @affinity.deleter
  def affinity(self):
    del self.operation.attributes["affinity"]

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TimepointJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.timepoint.join"

  _ODS_REGIONS = (0, True)

  def __init__(self, await_timepoints, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(await_timepoints))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def await_timepoints(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result_timepoint(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class YieldOp(_ods_ir.OpView):
  OPERATION_NAME = "stream.yield"

  _ODS_REGIONS = (0, True)

  def __init__(self, resource_operands, resource_operand_sizes, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(resource_operands))
    operands.extend(_get_op_results_or_values(resource_operand_sizes))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def resource_operands(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 2, 0, 0)
    return self.operation.operands[start:start + pg]

  @builtins.property
  def resource_operand_sizes(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 2, 0, 1)
    return self.operation.operands[start:start + pg]
