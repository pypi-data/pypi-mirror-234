
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _hal_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "hal"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AllocatorAllocateOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.allocator.allocate"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, allocator, queue_affinity, memory_types, buffer_usage, result_size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(allocator))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["memory_types"] = (memory_types if (
    issubclass(type(memory_types), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_MemoryTypeBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_MemoryTypeBitfieldAttr')(memory_types, context=_ods_context))
    attributes["buffer_usage"] = (buffer_usage if (
    issubclass(type(buffer_usage), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_BufferUsageBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_BufferUsageBitfieldAttr')(buffer_usage, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def allocator(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def result_size(self):
    return self.operation.operands[2]

  @builtins.property
  def memory_types(self):
    return self.operation.attributes["memory_types"]

  @memory_types.setter
  def memory_types(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["memory_types"] = value

  @builtins.property
  def buffer_usage(self):
    return self.operation.attributes["buffer_usage"]

  @buffer_usage.setter
  def buffer_usage(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["buffer_usage"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AllocatorImportOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.allocator.import"

  _ODS_REGIONS = (0, True)

  def __init__(self, did_import, result, allocator, queue_affinity, memory_types, buffer_usage, source, offset, length, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(allocator))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["memory_types"] = (memory_types if (
    issubclass(type(memory_types), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_MemoryTypeBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_MemoryTypeBitfieldAttr')(memory_types, context=_ods_context))
    attributes["buffer_usage"] = (buffer_usage if (
    issubclass(type(buffer_usage), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_BufferUsageBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_BufferUsageBitfieldAttr')(buffer_usage, context=_ods_context))
    results.append(did_import)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def allocator(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def source(self):
    return self.operation.operands[2]

  @builtins.property
  def offset(self):
    return self.operation.operands[3]

  @builtins.property
  def length(self):
    return self.operation.operands[4]

  @builtins.property
  def memory_types(self):
    return self.operation.attributes["memory_types"]

  @memory_types.setter
  def memory_types(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["memory_types"] = value

  @builtins.property
  def buffer_usage(self):
    return self.operation.attributes["buffer_usage"]

  @buffer_usage.setter
  def buffer_usage(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["buffer_usage"] = value

  @builtins.property
  def did_import(self):
    return self.operation.results[0]

  @builtins.property
  def result(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferAssertOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer.assert"

  _ODS_REGIONS = (0, True)

  def __init__(self, buffer, message, allocator, minimum_length, memory_types, buffer_usage, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer))
    operands.append(_get_op_result_or_value(allocator))
    operands.append(_get_op_result_or_value(minimum_length))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["message"] = (message if (
    issubclass(type(message), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(message, context=_ods_context))
    attributes["memory_types"] = (memory_types if (
    issubclass(type(memory_types), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_MemoryTypeBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_MemoryTypeBitfieldAttr')(memory_types, context=_ods_context))
    attributes["buffer_usage"] = (buffer_usage if (
    issubclass(type(buffer_usage), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_BufferUsageBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_BufferUsageBitfieldAttr')(buffer_usage, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def allocator(self):
    return self.operation.operands[1]

  @builtins.property
  def minimum_length(self):
    return self.operation.operands[2]

  @builtins.property
  def message(self):
    return self.operation.attributes["message"]

  @message.setter
  def message(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["message"] = value

  @builtins.property
  def memory_types(self):
    return self.operation.attributes["memory_types"]

  @memory_types.setter
  def memory_types(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["memory_types"] = value

  @builtins.property
  def buffer_usage(self):
    return self.operation.attributes["buffer_usage"]

  @buffer_usage.setter
  def buffer_usage(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["buffer_usage"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferLengthOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer.length"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source_buffer, source_offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source_buffer))
    operands.append(_get_op_result_or_value(source_offset))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, target_buffer, target_offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(value))
    operands.append(_get_op_result_or_value(target_buffer))
    operands.append(_get_op_result_or_value(target_offset))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def target_buffer(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferSubspanOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer.subspan"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, source_buffer, source_offset, length, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source_buffer))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[1]

  @builtins.property
  def length(self):
    return self.operation.operands[2]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferViewAssertOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer_view.assert"

  _ODS_REGIONS = (0, True)

  def __init__(self, buffer_view, message, element_type, encoding_type, shape, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer_view))
    operands.append(_get_op_result_or_value(element_type))
    operands.append(_get_op_result_or_value(encoding_type))
    operands.extend(_get_op_results_or_values(shape))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["message"] = (message if (
    issubclass(type(message), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(message, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer_view(self):
    return self.operation.operands[0]

  @builtins.property
  def element_type(self):
    return self.operation.operands[1]

  @builtins.property
  def encoding_type(self):
    return self.operation.operands[2]

  @builtins.property
  def shape(self):
    _ods_variadic_group_length = len(self.operation.operands) - 4 + 1
    return self.operation.operands[3:3 + _ods_variadic_group_length]

  @builtins.property
  def message(self):
    return self.operation.attributes["message"]

  @message.setter
  def message(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["message"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferViewBufferOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer_view.buffer"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer_view, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer_view))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer_view(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferViewCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer_view.create"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def source_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[1]

  @builtins.property
  def source_length(self):
    return self.operation.operands[2]

  @builtins.property
  def element_type(self):
    return self.operation.operands[3]

  @builtins.property
  def encoding_type(self):
    return self.operation.operands[4]

  @builtins.property
  def shape(self):
    _ods_variadic_group_length = len(self.operation.operands) - 6 + 1
    return self.operation.operands[5:5 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferViewDimOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer_view.dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer_view, index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer_view))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["index"] = (index if (
    issubclass(type(index), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(index, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer_view(self):
    return self.operation.operands[0]

  @builtins.property
  def index(self):
    return self.operation.attributes["index"]

  @index.setter
  def index(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["index"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferViewElementTypeOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer_view.element_type"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer_view, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer_view))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer_view(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferViewEncodingTypeOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer_view.encoding_type"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer_view, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer_view))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer_view(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferViewRankOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer_view.rank"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer_view, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer_view))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer_view(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferViewTraceOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.buffer_view.trace"

  _ODS_REGIONS = (0, True)

  def __init__(self, key, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["key"] = (key if (
    issubclass(type(key), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(key, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def key(self):
    return self.operation.attributes["key"]

  @key.setter
  def key(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["key"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ChannelCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.channel.create"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, queue_affinity, flags, id, group, rank, count, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(id))
    operands.append(_get_op_result_or_value(group))
    operands.append(_get_op_result_or_value(rank))
    operands.append(_get_op_result_or_value(count))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["flags"] = (flags if (
    issubclass(type(flags), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(flags, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def id(self):
    return self.operation.operands[2]

  @builtins.property
  def group(self):
    return self.operation.operands[3]

  @builtins.property
  def rank(self):
    return self.operation.operands[4]

  @builtins.property
  def count(self):
    return self.operation.operands[5]

  @builtins.property
  def flags(self):
    return self.operation.attributes["flags"]

  @flags.setter
  def flags(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["flags"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ChannelRankAndCountOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.channel.rank_and_count"

  _ODS_REGIONS = (0, True)

  def __init__(self, rank, count, channel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(channel))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(rank)
    results.append(count)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def channel(self):
    return self.operation.operands[0]

  @builtins.property
  def rank(self):
    return self.operation.results[0]

  @builtins.property
  def count(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ChannelSplitOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.channel.split"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, channel, color, key, flags, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(channel))
    operands.append(_get_op_result_or_value(color))
    operands.append(_get_op_result_or_value(key))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["flags"] = (flags if (
    issubclass(type(flags), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(flags, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def channel(self):
    return self.operation.operands[0]

  @builtins.property
  def color(self):
    return self.operation.operands[1]

  @builtins.property
  def key(self):
    return self.operation.operands[2]

  @builtins.property
  def flags(self):
    return self.operation.attributes["flags"]

  @flags.setter
  def flags(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["flags"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferBeginDebugGroupOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.begin_debug_group"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, label, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["label"] = (label if (
    issubclass(type(label), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def label(self):
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["label"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferCollectiveOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.collective"

  _ODS_OPERAND_SEGMENTS = [1,1,1,0,0,0,0,0,0,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, channel, op, element_count, *, param=None, send_buffer=None, send_offset=None, send_length=None, recv_buffer=None, recv_offset=None, recv_length=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    operands.append(_get_op_result_or_value(channel))
    operands.append(_get_op_result_or_value(element_count))
    operands.append(_get_op_result_or_value(param) if param is not None else None)
    operands.append(_get_op_result_or_value(send_buffer) if send_buffer is not None else None)
    operands.append(_get_op_result_or_value(send_offset) if send_offset is not None else None)
    operands.append(_get_op_result_or_value(send_length) if send_length is not None else None)
    operands.append(_get_op_result_or_value(recv_buffer) if recv_buffer is not None else None)
    operands.append(_get_op_result_or_value(recv_offset) if recv_offset is not None else None)
    operands.append(_get_op_result_or_value(recv_length) if recv_length is not None else None)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["op"] = (op if (
    issubclass(type(op), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_CollectiveAttr')) else
      _ods_ir.AttrBuilder.get('HAL_CollectiveAttr')(op, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def channel(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range[0]

  @builtins.property
  def element_count(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def param(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def send_buffer(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def send_offset(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 5)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def send_length(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 6)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def recv_buffer(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 7)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def recv_offset(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 8)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def recv_length(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 9)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def op(self):
    return self.operation.attributes["op"]

  @op.setter
  def op(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["op"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferCopyBufferOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.copy_buffer"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, source_buffer, source_offset, target_buffer, target_offset, length, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    operands.append(_get_op_result_or_value(source_buffer))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(target_buffer))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def source_buffer(self):
    return self.operation.operands[1]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def target_buffer(self):
    return self.operation.operands[3]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[4]

  @builtins.property
  def length(self):
    return self.operation.operands[5]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.create"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, modes, command_categories, *, binding_capacity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    if binding_capacity is not None: operands.append(_get_op_result_or_value(binding_capacity))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["modes"] = (modes if (
    issubclass(type(modes), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_CommandBufferModeBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_CommandBufferModeBitfieldAttr')(modes, context=_ods_context))
    attributes["command_categories"] = (command_categories if (
    issubclass(type(command_categories), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_CommandCategoryBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_CommandCategoryBitfieldAttr')(command_categories, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def binding_capacity(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def modes(self):
    return self.operation.attributes["modes"]

  @modes.setter
  def modes(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["modes"] = value

  @builtins.property
  def command_categories(self):
    return self.operation.attributes["command_categories"]

  @command_categories.setter
  def command_categories(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["command_categories"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferDeviceOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.device"

  _ODS_REGIONS = (0, True)

  def __init__(self, device, command_buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(device)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def device(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferDispatchIndirectOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.dispatch.indirect"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, executable, entry_point, workgroups_buffer, workgroups_offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    operands.append(_get_op_result_or_value(executable))
    operands.append(_get_op_result_or_value(workgroups_buffer))
    operands.append(_get_op_result_or_value(workgroups_offset))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["entry_point"] = (entry_point if (
    issubclass(type(entry_point), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_OrdinalAttr')) else
      _ods_ir.AttrBuilder.get('HAL_OrdinalAttr')(entry_point, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def executable(self):
    return self.operation.operands[1]

  @builtins.property
  def workgroups_buffer(self):
    return self.operation.operands[2]

  @builtins.property
  def workgroups_offset(self):
    return self.operation.operands[3]

  @builtins.property
  def entry_point(self):
    return self.operation.attributes["entry_point"]

  @entry_point.setter
  def entry_point(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["entry_point"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferDispatchIndirectSymbolOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.dispatch.indirect.symbol"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, entry_point, workgroups_buffer, workgroups_offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    operands.append(_get_op_result_or_value(workgroups_buffer))
    operands.append(_get_op_result_or_value(workgroups_offset))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["entry_point"] = (entry_point if (
    issubclass(type(entry_point), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(entry_point, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def workgroups_buffer(self):
    return self.operation.operands[1]

  @builtins.property
  def workgroups_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def entry_point(self):
    return self.operation.attributes["entry_point"]

  @entry_point.setter
  def entry_point(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["entry_point"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferDispatchOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.dispatch"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, executable, entry_point, workgroup_x, workgroup_y, workgroup_z, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    operands.append(_get_op_result_or_value(executable))
    operands.append(_get_op_result_or_value(workgroup_x))
    operands.append(_get_op_result_or_value(workgroup_y))
    operands.append(_get_op_result_or_value(workgroup_z))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["entry_point"] = (entry_point if (
    issubclass(type(entry_point), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_OrdinalAttr')) else
      _ods_ir.AttrBuilder.get('HAL_OrdinalAttr')(entry_point, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def executable(self):
    return self.operation.operands[1]

  @builtins.property
  def workgroup_x(self):
    return self.operation.operands[2]

  @builtins.property
  def workgroup_y(self):
    return self.operation.operands[3]

  @builtins.property
  def workgroup_z(self):
    return self.operation.operands[4]

  @builtins.property
  def entry_point(self):
    return self.operation.attributes["entry_point"]

  @entry_point.setter
  def entry_point(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["entry_point"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferDispatchSymbolOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.dispatch.symbol"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, entry_point, workgroup_x, workgroup_y, workgroup_z, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    operands.append(_get_op_result_or_value(workgroup_x))
    operands.append(_get_op_result_or_value(workgroup_y))
    operands.append(_get_op_result_or_value(workgroup_z))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["entry_point"] = (entry_point if (
    issubclass(type(entry_point), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(entry_point, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def workgroup_x(self):
    return self.operation.operands[1]

  @builtins.property
  def workgroup_y(self):
    return self.operation.operands[2]

  @builtins.property
  def workgroup_z(self):
    return self.operation.operands[3]

  @builtins.property
  def entry_point(self):
    return self.operation.attributes["entry_point"]

  @entry_point.setter
  def entry_point(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["entry_point"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferEndDebugGroupOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.end_debug_group"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferExecutionBarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.execution_barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, source_stage_mask, target_stage_mask, flags, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["source_stage_mask"] = (source_stage_mask if (
    issubclass(type(source_stage_mask), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_ExecutionStageBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_ExecutionStageBitfieldAttr')(source_stage_mask, context=_ods_context))
    attributes["target_stage_mask"] = (target_stage_mask if (
    issubclass(type(target_stage_mask), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_ExecutionStageBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_ExecutionStageBitfieldAttr')(target_stage_mask, context=_ods_context))
    attributes["flags"] = (flags if (
    issubclass(type(flags), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_ExecutionBarrierFlagBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_ExecutionBarrierFlagBitfieldAttr')(flags, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def source_stage_mask(self):
    return self.operation.attributes["source_stage_mask"]

  @source_stage_mask.setter
  def source_stage_mask(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["source_stage_mask"] = value

  @builtins.property
  def target_stage_mask(self):
    return self.operation.attributes["target_stage_mask"]

  @target_stage_mask.setter
  def target_stage_mask(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["target_stage_mask"] = value

  @builtins.property
  def flags(self):
    return self.operation.attributes["flags"]

  @flags.setter
  def flags(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["flags"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferFillBufferOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.fill_buffer"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, target_buffer, target_offset, length, pattern, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    operands.append(_get_op_result_or_value(target_buffer))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(length))
    operands.append(_get_op_result_or_value(pattern))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def target_buffer(self):
    return self.operation.operands[1]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[2]

  @builtins.property
  def length(self):
    return self.operation.operands[3]

  @builtins.property
  def pattern(self):
    return self.operation.operands[4]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferFinalizeOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.finalize"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferPushConstantsOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.push_constants"

  _ODS_REGIONS = (0, True)

  def __init__(self, command_buffer, pipeline_layout, offset, values, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(command_buffer))
    operands.append(_get_op_result_or_value(pipeline_layout))
    operands.extend(_get_op_results_or_values(values))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["offset"] = (offset if (
    issubclass(type(offset), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(offset, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def command_buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def pipeline_layout(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2:2 + _ods_variadic_group_length]

  @builtins.property
  def offset(self):
    return self.operation.attributes["offset"]

  @offset.setter
  def offset(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["offset"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CommandBufferPushDescriptorSetOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.command_buffer.push_descriptor_set"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def command_buffer(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 4, 0, 0)
    return self.operation.operands[start]

  @builtins.property
  def pipeline_layout(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 4, 1, 0)
    return self.operation.operands[start]

  @builtins.property
  def set(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 4, 2, 0)
    return self.operation.operands[start]

  @builtins.property
  def binding_ordinals(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 4, 3, 0)
    return self.operation.operands[start:start + pg]

  @builtins.property
  def binding_buffers(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 4, 3, 1)
    return self.operation.operands[start:start + pg]

  @builtins.property
  def binding_offsets(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 4, 3, 2)
    return self.operation.operands[start:start + pg]

  @builtins.property
  def binding_lengths(self):
    start, pg = _ods_equally_sized_accessor(operation.operands, 4, 3, 3)
    return self.operation.operands[start:start + pg]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DescriptorSetLayoutCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.descriptor_set_layout.create"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, flags, bindings, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["flags"] = (flags if (
    issubclass(type(flags), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_DescriptorSetLayoutFlagsAttr')) else
      _ods_ir.AttrBuilder.get('HAL_DescriptorSetLayoutFlagsAttr')(flags, context=_ods_context))
    attributes["bindings"] = (bindings if (
    issubclass(type(bindings), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_DescriptorSetLayoutBindingArrayAttr')) else
      _ods_ir.AttrBuilder.get('HAL_DescriptorSetLayoutBindingArrayAttr')(bindings, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def flags(self):
    return self.operation.attributes["flags"]

  @flags.setter
  def flags(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["flags"] = value

  @builtins.property
  def bindings(self):
    return self.operation.attributes["bindings"]

  @bindings.setter
  def bindings(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["bindings"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DescriptorSetLayoutLookupOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.descriptor_set_layout.lookup"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, flags, bindings, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["flags"] = (flags if (
    issubclass(type(flags), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_DescriptorSetLayoutFlagsAttr')) else
      _ods_ir.AttrBuilder.get('HAL_DescriptorSetLayoutFlagsAttr')(flags, context=_ods_context))
    attributes["bindings"] = (bindings if (
    issubclass(type(bindings), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_DescriptorSetLayoutBindingArrayAttr')) else
      _ods_ir.AttrBuilder.get('HAL_DescriptorSetLayoutBindingArrayAttr')(bindings, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def flags(self):
    return self.operation.attributes["flags"]

  @flags.setter
  def flags(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["flags"] = value

  @builtins.property
  def bindings(self):
    return self.operation.attributes["bindings"]

  @bindings.setter
  def bindings(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["bindings"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceAllocatorOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.allocator"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceQueryOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.query"

  _ODS_REGIONS = (0, True)

  def __init__(self, ok, value, device, category, key, *, default_value=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["category"] = (category if (
    issubclass(type(category), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(category, context=_ods_context))
    attributes["key"] = (key if (
    issubclass(type(key), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(key, context=_ods_context))
    if default_value is not None: attributes["default_value"] = (default_value if (
        issubclass(type(default_value), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('TypedAttrInterface')) else
          _ods_ir.AttrBuilder.get('TypedAttrInterface')(default_value, context=_ods_context))
    results.append(ok)
    results.append(value)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def category(self):
    return self.operation.attributes["category"]

  @category.setter
  def category(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["category"] = value

  @builtins.property
  def key(self):
    return self.operation.attributes["key"]

  @key.setter
  def key(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["key"] = value

  @builtins.property
  def default_value(self):
    if "default_value" not in self.operation.attributes:
      return None
    return self.operation.attributes["default_value"]

  @default_value.setter
  def default_value(self, value):
    if value is not None:
      self.operation.attributes["default_value"] = value
    elif "default_value" in self.operation.attributes:
      del self.operation.attributes["default_value"]

  @default_value.deleter
  def default_value(self):
    del self.operation.attributes["default_value"]

  @builtins.property
  def ok(self):
    return self.operation.results[0]

  @builtins.property
  def value(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceQueueAllocaOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.queue.alloca"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, queue_affinity, wait_fence, signal_fence, pool, memory_types, buffer_usage, result_size, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(wait_fence))
    operands.append(_get_op_result_or_value(signal_fence))
    operands.append(_get_op_result_or_value(pool))
    operands.append(_get_op_result_or_value(result_size))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["memory_types"] = (memory_types if (
    issubclass(type(memory_types), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_MemoryTypeBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_MemoryTypeBitfieldAttr')(memory_types, context=_ods_context))
    attributes["buffer_usage"] = (buffer_usage if (
    issubclass(type(buffer_usage), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_BufferUsageBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_BufferUsageBitfieldAttr')(buffer_usage, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def wait_fence(self):
    return self.operation.operands[2]

  @builtins.property
  def signal_fence(self):
    return self.operation.operands[3]

  @builtins.property
  def pool(self):
    return self.operation.operands[4]

  @builtins.property
  def result_size(self):
    return self.operation.operands[5]

  @builtins.property
  def memory_types(self):
    return self.operation.attributes["memory_types"]

  @memory_types.setter
  def memory_types(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["memory_types"] = value

  @builtins.property
  def buffer_usage(self):
    return self.operation.attributes["buffer_usage"]

  @buffer_usage.setter
  def buffer_usage(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["buffer_usage"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceQueueDeallocaOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.queue.dealloca"

  _ODS_REGIONS = (0, True)

  def __init__(self, device, queue_affinity, wait_fence, signal_fence, buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(wait_fence))
    operands.append(_get_op_result_or_value(signal_fence))
    operands.append(_get_op_result_or_value(buffer))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def wait_fence(self):
    return self.operation.operands[2]

  @builtins.property
  def signal_fence(self):
    return self.operation.operands[3]

  @builtins.property
  def buffer(self):
    return self.operation.operands[4]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceQueueExecuteOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.queue.execute"

  _ODS_REGIONS = (0, True)

  def __init__(self, device, queue_affinity, wait_fence, signal_fence, command_buffers, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(wait_fence))
    operands.append(_get_op_result_or_value(signal_fence))
    operands.extend(_get_op_results_or_values(command_buffers))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def wait_fence(self):
    return self.operation.operands[2]

  @builtins.property
  def signal_fence(self):
    return self.operation.operands[3]

  @builtins.property
  def command_buffers(self):
    _ods_variadic_group_length = len(self.operation.operands) - 5 + 1
    return self.operation.operands[4:4 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceQueueFlushOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.queue.flush"

  _ODS_REGIONS = (0, True)

  def __init__(self, device, queue_affinity, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(queue_affinity))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceQueueReadOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.queue.read"

  _ODS_REGIONS = (0, True)

  def __init__(self, device, queue_affinity, wait_fence, signal_fence, source_file, source_offset, target_buffer, target_offset, length, flags, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(wait_fence))
    operands.append(_get_op_result_or_value(signal_fence))
    operands.append(_get_op_result_or_value(source_file))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(target_buffer))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["flags"] = (flags if (
    issubclass(type(flags), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(flags, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def wait_fence(self):
    return self.operation.operands[2]

  @builtins.property
  def signal_fence(self):
    return self.operation.operands[3]

  @builtins.property
  def source_file(self):
    return self.operation.operands[4]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[5]

  @builtins.property
  def target_buffer(self):
    return self.operation.operands[6]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[7]

  @builtins.property
  def length(self):
    return self.operation.operands[8]

  @builtins.property
  def flags(self):
    return self.operation.attributes["flags"]

  @flags.setter
  def flags(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["flags"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceQueueWriteOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.queue.write"

  _ODS_REGIONS = (0, True)

  def __init__(self, device, queue_affinity, wait_fence, signal_fence, source_buffer, source_offset, target_file, target_offset, length, flags, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(wait_fence))
    operands.append(_get_op_result_or_value(signal_fence))
    operands.append(_get_op_result_or_value(source_buffer))
    operands.append(_get_op_result_or_value(source_offset))
    operands.append(_get_op_result_or_value(target_file))
    operands.append(_get_op_result_or_value(target_offset))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["flags"] = (flags if (
    issubclass(type(flags), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(flags, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def wait_fence(self):
    return self.operation.operands[2]

  @builtins.property
  def signal_fence(self):
    return self.operation.operands[3]

  @builtins.property
  def source_buffer(self):
    return self.operation.operands[4]

  @builtins.property
  def source_offset(self):
    return self.operation.operands[5]

  @builtins.property
  def target_file(self):
    return self.operation.operands[6]

  @builtins.property
  def target_offset(self):
    return self.operation.operands[7]

  @builtins.property
  def length(self):
    return self.operation.operands[8]

  @builtins.property
  def flags(self):
    return self.operation.attributes["flags"]

  @flags.setter
  def flags(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["flags"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeviceSwitchOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.device.switch"

  _ODS_REGIONS = (0, False)

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def conditions(self):
    return self.operation.attributes["conditions"]

  @conditions.setter
  def conditions(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["conditions"] = value

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def condition_regions(self):
    return self.regions[0:]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExFileFromMemoryOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.ex.file.from_memory"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, queue_affinity, access, buffer, offset, length, flags, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_result_or_value(queue_affinity))
    operands.append(_get_op_result_or_value(buffer))
    operands.append(_get_op_result_or_value(offset))
    operands.append(_get_op_result_or_value(length))
    operands.append(_get_op_result_or_value(flags))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["access"] = (access if (
    issubclass(type(access), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_MemoryAccessBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_MemoryAccessBitfieldAttr')(access, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def queue_affinity(self):
    return self.operation.operands[1]

  @builtins.property
  def buffer(self):
    return self.operation.operands[2]

  @builtins.property
  def offset(self):
    return self.operation.operands[3]

  @builtins.property
  def length(self):
    return self.operation.operands[4]

  @builtins.property
  def flags(self):
    return self.operation.operands[5]

  @builtins.property
  def access(self):
    return self.operation.attributes["access"]

  @access.setter
  def access(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["access"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExSharedDeviceOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.ex.shared_device"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableBinaryOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.binary"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def format(self):
    return self.operation.attributes["format"]

  @format.setter
  def format(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["format"] = value

  @builtins.property
  def data(self):
    return self.operation.attributes["data"]

  @data.setter
  def data(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["data"] = value

  @builtins.property
  def mime_type(self):
    if "mime_type" not in self.operation.attributes:
      return None
    return self.operation.attributes["mime_type"]

  @mime_type.setter
  def mime_type(self, value):
    if value is not None:
      self.operation.attributes["mime_type"] = value
    elif "mime_type" in self.operation.attributes:
      del self.operation.attributes["mime_type"]

  @mime_type.deleter
  def mime_type(self):
    del self.operation.attributes["mime_type"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableCalculateWorkgroupsOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.calculate_workgroups"

  _ODS_REGIONS = (0, True)

  def __init__(self, workgroup_x, workgroup_y, workgroup_z, device, entry_point, workload, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.extend(_get_op_results_or_values(workload))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["entry_point"] = (entry_point if (
    issubclass(type(entry_point), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(entry_point, context=_ods_context))
    results.append(workgroup_x)
    results.append(workgroup_y)
    results.append(workgroup_z)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def workload(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def entry_point(self):
    return self.operation.attributes["entry_point"]

  @entry_point.setter
  def entry_point(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["entry_point"] = value

  @builtins.property
  def workgroup_x(self):
    return self.operation.results[0]

  @builtins.property
  def workgroup_y(self):
    return self.operation.results[1]

  @builtins.property
  def workgroup_z(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableConstantBlockOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.constant.block"

  _ODS_REGIONS = (1, True)

  def __init__(self, function_type, keys, *, arg_attrs=None, res_attrs=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["function_type"] = (function_type if (
    issubclass(type(function_type), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('anonymous_736')) else
      _ods_ir.AttrBuilder.get('anonymous_736')(function_type, context=_ods_context))
    attributes["keys"] = (keys if (
    issubclass(type(keys), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(keys, context=_ods_context))
    if arg_attrs is not None: attributes["arg_attrs"] = (arg_attrs if (
        issubclass(type(arg_attrs), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DictArrayAttr')) else
          _ods_ir.AttrBuilder.get('DictArrayAttr')(arg_attrs, context=_ods_context))
    if res_attrs is not None: attributes["res_attrs"] = (res_attrs if (
        issubclass(type(res_attrs), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DictArrayAttr')) else
          _ods_ir.AttrBuilder.get('DictArrayAttr')(res_attrs, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def function_type(self):
    return self.operation.attributes["function_type"]

  @function_type.setter
  def function_type(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["function_type"] = value

  @builtins.property
  def keys(self):
    return self.operation.attributes["keys"]

  @keys.setter
  def keys(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["keys"] = value

  @builtins.property
  def arg_attrs(self):
    if "arg_attrs" not in self.operation.attributes:
      return None
    return self.operation.attributes["arg_attrs"]

  @arg_attrs.setter
  def arg_attrs(self, value):
    if value is not None:
      self.operation.attributes["arg_attrs"] = value
    elif "arg_attrs" in self.operation.attributes:
      del self.operation.attributes["arg_attrs"]

  @arg_attrs.deleter
  def arg_attrs(self):
    del self.operation.attributes["arg_attrs"]

  @builtins.property
  def res_attrs(self):
    if "res_attrs" not in self.operation.attributes:
      return None
    return self.operation.attributes["res_attrs"]

  @res_attrs.setter
  def res_attrs(self, value):
    if value is not None:
      self.operation.attributes["res_attrs"] = value
    elif "res_attrs" in self.operation.attributes:
      del self.operation.attributes["res_attrs"]

  @res_attrs.deleter
  def res_attrs(self):
    del self.operation.attributes["res_attrs"]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableConstantLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.constant.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, key, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["key"] = (key if (
    issubclass(type(key), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(key, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def key(self):
    return self.operation.attributes["key"]

  @key.setter
  def key(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["key"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.create"

  _ODS_OPERAND_SEGMENTS = [1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, executable_target, layouts, constants, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.append(_get_op_results_or_values(layouts))
    operands.append(_get_op_results_or_values(constants))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["executable_target"] = (executable_target if (
    issubclass(type(executable_target), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(executable_target, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def layouts(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def constants(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range

  @builtins.property
  def executable_target(self):
    return self.operation.attributes["executable_target"]

  @executable_target.setter
  def executable_target(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["executable_target"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableEndOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable_end"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableExportOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.export"

  _ODS_REGIONS = (1, True)

  def __init__(self, sym_name, layout, *, sym_visibility=None, ordinal=None, workgroup_size=None, subgroup_size=None, workgroup_local_memory=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if sym_visibility is not None: attributes["sym_visibility"] = (sym_visibility if (
        issubclass(type(sym_visibility), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(sym_visibility, context=_ods_context))
    attributes["sym_name"] = (sym_name if (
    issubclass(type(sym_name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolNameAttr')) else
      _ods_ir.AttrBuilder.get('SymbolNameAttr')(sym_name, context=_ods_context))
    if ordinal is not None: attributes["ordinal"] = (ordinal if (
        issubclass(type(ordinal), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('HAL_OrdinalAttr')) else
          _ods_ir.AttrBuilder.get('HAL_OrdinalAttr')(ordinal, context=_ods_context))
    attributes["layout"] = (layout if (
    issubclass(type(layout), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_PipelineLayoutAttr')) else
      _ods_ir.AttrBuilder.get('HAL_PipelineLayoutAttr')(layout, context=_ods_context))
    if workgroup_size is not None: attributes["workgroup_size"] = (workgroup_size if (
        issubclass(type(workgroup_size), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('HAL_WorkgroupSizeAttr')) else
          _ods_ir.AttrBuilder.get('HAL_WorkgroupSizeAttr')(workgroup_size, context=_ods_context))
    if subgroup_size is not None: attributes["subgroup_size"] = (subgroup_size if (
        issubclass(type(subgroup_size), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('HAL_SubgroupSizeAttr')) else
          _ods_ir.AttrBuilder.get('HAL_SubgroupSizeAttr')(subgroup_size, context=_ods_context))
    if workgroup_local_memory is not None: attributes["workgroup_local_memory"] = (workgroup_local_memory if (
        issubclass(type(workgroup_local_memory), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('IndexAttr')) else
          _ods_ir.AttrBuilder.get('IndexAttr')(workgroup_local_memory, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def ordinal(self):
    if "ordinal" not in self.operation.attributes:
      return None
    return self.operation.attributes["ordinal"]

  @ordinal.setter
  def ordinal(self, value):
    if value is not None:
      self.operation.attributes["ordinal"] = value
    elif "ordinal" in self.operation.attributes:
      del self.operation.attributes["ordinal"]

  @ordinal.deleter
  def ordinal(self):
    del self.operation.attributes["ordinal"]

  @builtins.property
  def layout(self):
    return self.operation.attributes["layout"]

  @layout.setter
  def layout(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["layout"] = value

  @builtins.property
  def workgroup_size(self):
    if "workgroup_size" not in self.operation.attributes:
      return None
    return self.operation.attributes["workgroup_size"]

  @workgroup_size.setter
  def workgroup_size(self, value):
    if value is not None:
      self.operation.attributes["workgroup_size"] = value
    elif "workgroup_size" in self.operation.attributes:
      del self.operation.attributes["workgroup_size"]

  @workgroup_size.deleter
  def workgroup_size(self):
    del self.operation.attributes["workgroup_size"]

  @builtins.property
  def subgroup_size(self):
    if "subgroup_size" not in self.operation.attributes:
      return None
    return self.operation.attributes["subgroup_size"]

  @subgroup_size.setter
  def subgroup_size(self, value):
    if value is not None:
      self.operation.attributes["subgroup_size"] = value
    elif "subgroup_size" in self.operation.attributes:
      del self.operation.attributes["subgroup_size"]

  @subgroup_size.deleter
  def subgroup_size(self):
    del self.operation.attributes["subgroup_size"]

  @builtins.property
  def workgroup_local_memory(self):
    if "workgroup_local_memory" not in self.operation.attributes:
      return None
    return self.operation.attributes["workgroup_local_memory"]

  @workgroup_local_memory.setter
  def workgroup_local_memory(self, value):
    if value is not None:
      self.operation.attributes["workgroup_local_memory"] = value
    elif "workgroup_local_memory" in self.operation.attributes:
      del self.operation.attributes["workgroup_local_memory"]

  @workgroup_local_memory.deleter
  def workgroup_local_memory(self):
    del self.operation.attributes["workgroup_local_memory"]

  @builtins.property
  def workgroup_count(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableLookupOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.lookup"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def executable(self):
    return self.operation.attributes["executable"]

  @executable.setter
  def executable(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["executable"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableSourceEndOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.source_end"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableSourceOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.source"

  _ODS_REGIONS = (1, True)

  def __init__(self, sym_name, *, sym_visibility=None, objects=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if sym_visibility is not None: attributes["sym_visibility"] = (sym_visibility if (
        issubclass(type(sym_visibility), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(sym_visibility, context=_ods_context))
    attributes["sym_name"] = (sym_name if (
    issubclass(type(sym_name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolNameAttr')) else
      _ods_ir.AttrBuilder.get('SymbolNameAttr')(sym_name, context=_ods_context))
    if objects is not None: attributes["objects"] = (objects if (
        issubclass(type(objects), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('HAL_ExecutableObjectsAttr')) else
          _ods_ir.AttrBuilder.get('HAL_ExecutableObjectsAttr')(objects, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def objects(self):
    if "objects" not in self.operation.attributes:
      return None
    return self.operation.attributes["objects"]

  @objects.setter
  def objects(self, value):
    if value is not None:
      self.operation.attributes["objects"] = value
    elif "objects" in self.operation.attributes:
      del self.operation.attributes["objects"]

  @objects.deleter
  def objects(self):
    del self.operation.attributes["objects"]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableVariantEndOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.variant_end"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExecutableVariantOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.executable.variant"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def sym_visibility(self):
    if "sym_visibility" not in self.operation.attributes:
      return None
    return self.operation.attributes["sym_visibility"]

  @sym_visibility.setter
  def sym_visibility(self, value):
    if value is not None:
      self.operation.attributes["sym_visibility"] = value
    elif "sym_visibility" in self.operation.attributes:
      del self.operation.attributes["sym_visibility"]

  @sym_visibility.deleter
  def sym_visibility(self):
    del self.operation.attributes["sym_visibility"]

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def target(self):
    return self.operation.attributes["target"]

  @target.setter
  def target(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["target"] = value

  @builtins.property
  def objects(self):
    if "objects" not in self.operation.attributes:
      return None
    return self.operation.attributes["objects"]

  @objects.setter
  def objects(self, value):
    if value is not None:
      self.operation.attributes["objects"] = value
    elif "objects" in self.operation.attributes:
      del self.operation.attributes["objects"]

  @objects.deleter
  def objects(self):
    del self.operation.attributes["objects"]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FenceAwaitOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.fence.await"

  _ODS_REGIONS = (0, True)

  def __init__(self, status, timeout_millis, fences, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(timeout_millis))
    operands.extend(_get_op_results_or_values(fences))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(status)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def timeout_millis(self):
    return self.operation.operands[0]

  @builtins.property
  def fences(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def status(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FenceCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.fence.create"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, flags, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["flags"] = (flags if (
    issubclass(type(flags), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_FenceFlagBitfieldAttr')) else
      _ods_ir.AttrBuilder.get('HAL_FenceFlagBitfieldAttr')(flags, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def flags(self):
    return self.operation.attributes["flags"]

  @flags.setter
  def flags(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["flags"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FenceFailOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.fence.fail"

  _ODS_REGIONS = (0, True)

  def __init__(self, fence, status, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(fence))
    operands.append(_get_op_result_or_value(status))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def fence(self):
    return self.operation.operands[0]

  @builtins.property
  def status(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FenceJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.fence.join"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, fences, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(fences))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def fences(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FenceQueryOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.fence.query"

  _ODS_REGIONS = (0, True)

  def __init__(self, status, fence, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(fence))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(status)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def fence(self):
    return self.operation.operands[0]

  @builtins.property
  def status(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FenceSignalOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.fence.signal"

  _ODS_REGIONS = (0, True)

  def __init__(self, fence, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(fence))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def fence(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InstrumentMemoryLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.instrument.memory.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer, workgroupKey, loadValue, base, indices, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer))
    operands.append(_get_op_result_or_value(workgroupKey))
    operands.append(_get_op_result_or_value(loadValue))
    operands.append(_get_op_result_or_value(base))
    operands.extend(_get_op_results_or_values(indices))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def workgroupKey(self):
    return self.operation.operands[1]

  @builtins.property
  def loadValue(self):
    return self.operation.operands[2]

  @builtins.property
  def base(self):
    return self.operation.operands[3]

  @builtins.property
  def indices(self):
    _ods_variadic_group_length = len(self.operation.operands) - 5 + 1
    return self.operation.operands[4:4 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InstrumentMemoryStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.instrument.memory.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer, workgroupKey, storeValue, base, indices, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer))
    operands.append(_get_op_result_or_value(workgroupKey))
    operands.append(_get_op_result_or_value(storeValue))
    operands.append(_get_op_result_or_value(base))
    operands.extend(_get_op_results_or_values(indices))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def workgroupKey(self):
    return self.operation.operands[1]

  @builtins.property
  def storeValue(self):
    return self.operation.operands[2]

  @builtins.property
  def base(self):
    return self.operation.operands[3]

  @builtins.property
  def indices(self):
    _ods_variadic_group_length = len(self.operation.operands) - 5 + 1
    return self.operation.operands[4:4 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InstrumentPrintOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.instrument.print"

  _ODS_REGIONS = (0, True)

  def __init__(self, buffer, workgroupKey, format, values, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer))
    operands.append(_get_op_result_or_value(workgroupKey))
    operands.extend(_get_op_results_or_values(values))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["format"] = (format if (
    issubclass(type(format), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(format, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def workgroupKey(self):
    return self.operation.operands[1]

  @builtins.property
  def values(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2:2 + _ods_variadic_group_length]

  @builtins.property
  def format(self):
    return self.operation.attributes["format"]

  @format.setter
  def format(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["format"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InstrumentValueOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.instrument.value"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, buffer, workgroupKey, ordinal, operand, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer))
    operands.append(_get_op_result_or_value(workgroupKey))
    operands.append(_get_op_result_or_value(operand))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["ordinal"] = (ordinal if (
    issubclass(type(ordinal), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('AnyI8Attr')) else
      _ods_ir.AttrBuilder.get('AnyI8Attr')(ordinal, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def workgroupKey(self):
    return self.operation.operands[1]

  @builtins.property
  def operand(self):
    return self.operation.operands[2]

  @builtins.property
  def ordinal(self):
    return self.operation.attributes["ordinal"]

  @ordinal.setter
  def ordinal(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["ordinal"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InstrumentWorkgroupOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.instrument.workgroup"

  _ODS_REGIONS = (0, True)

  def __init__(self, workgroupKey, buffer, dispatchId, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(buffer))
    operands.append(_get_op_result_or_value(dispatchId))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(workgroupKey)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def dispatchId(self):
    return self.operation.operands[1]

  @builtins.property
  def workgroupKey(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceBindingSubspanOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.interface.binding.subspan"

  _ODS_OPERAND_SEGMENTS = [0,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, result, set, binding, descriptor_type, dynamic_dims, *, byte_offset=None, alignment=None, descriptor_flags=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(byte_offset) if byte_offset is not None else None)
    operands.append(_get_op_results_or_values(dynamic_dims))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["set"] = (set if (
    issubclass(type(set), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(set, context=_ods_context))
    attributes["binding"] = (binding if (
    issubclass(type(binding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(binding, context=_ods_context))
    attributes["descriptor_type"] = (descriptor_type if (
    issubclass(type(descriptor_type), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_DescriptorTypeAttr')) else
      _ods_ir.AttrBuilder.get('HAL_DescriptorTypeAttr')(descriptor_type, context=_ods_context))
    if alignment is not None: attributes["alignment"] = (alignment if (
        issubclass(type(alignment), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('IndexAttr')) else
          _ods_ir.AttrBuilder.get('IndexAttr')(alignment, context=_ods_context))
    if descriptor_flags is not None: attributes["descriptor_flags"] = (descriptor_flags if (
        issubclass(type(descriptor_flags), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('HAL_DescriptorFlagsAttr')) else
          _ods_ir.AttrBuilder.get('HAL_DescriptorFlagsAttr')(descriptor_flags, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def byte_offset(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def dynamic_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def set(self):
    return self.operation.attributes["set"]

  @set.setter
  def set(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["set"] = value

  @builtins.property
  def binding(self):
    return self.operation.attributes["binding"]

  @binding.setter
  def binding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["binding"] = value

  @builtins.property
  def descriptor_type(self):
    return self.operation.attributes["descriptor_type"]

  @descriptor_type.setter
  def descriptor_type(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["descriptor_type"] = value

  @builtins.property
  def alignment(self):
    if "alignment" not in self.operation.attributes:
      return None
    return self.operation.attributes["alignment"]

  @alignment.setter
  def alignment(self, value):
    if value is not None:
      self.operation.attributes["alignment"] = value
    elif "alignment" in self.operation.attributes:
      del self.operation.attributes["alignment"]

  @alignment.deleter
  def alignment(self):
    del self.operation.attributes["alignment"]

  @builtins.property
  def descriptor_flags(self):
    if "descriptor_flags" not in self.operation.attributes:
      return None
    return self.operation.attributes["descriptor_flags"]

  @descriptor_flags.setter
  def descriptor_flags(self, value):
    if value is not None:
      self.operation.attributes["descriptor_flags"] = value
    elif "descriptor_flags" in self.operation.attributes:
      del self.operation.attributes["descriptor_flags"]

  @descriptor_flags.deleter
  def descriptor_flags(self):
    del self.operation.attributes["descriptor_flags"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceConstantLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.interface.constant.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, index, *, alignment=None, values=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["index"] = (index if (
    issubclass(type(index), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_HostSizeAttr')) else
      _ods_ir.AttrBuilder.get('HAL_HostSizeAttr')(index, context=_ods_context))
    if alignment is not None: attributes["alignment"] = (alignment if (
        issubclass(type(alignment), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('IndexAttr')) else
          _ods_ir.AttrBuilder.get('IndexAttr')(alignment, context=_ods_context))
    if values is not None: attributes["values"] = (values if (
        issubclass(type(values), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
          _ods_ir.AttrBuilder.get('ArrayAttr')(values, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def index(self):
    return self.operation.attributes["index"]

  @index.setter
  def index(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["index"] = value

  @builtins.property
  def alignment(self):
    if "alignment" not in self.operation.attributes:
      return None
    return self.operation.attributes["alignment"]

  @alignment.setter
  def alignment(self, value):
    if value is not None:
      self.operation.attributes["alignment"] = value
    elif "alignment" in self.operation.attributes:
      del self.operation.attributes["alignment"]

  @alignment.deleter
  def alignment(self):
    del self.operation.attributes["alignment"]

  @builtins.property
  def values(self):
    if "values" not in self.operation.attributes:
      return None
    return self.operation.attributes["values"]

  @values.setter
  def values(self, value):
    if value is not None:
      self.operation.attributes["values"] = value
    elif "values" in self.operation.attributes:
      del self.operation.attributes["values"]

  @values.deleter
  def values(self):
    del self.operation.attributes["values"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceWorkgroupCountOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.interface.workgroup.count"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, dimension, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["dimension"] = (dimension if (
    issubclass(type(dimension), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(dimension, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dimension(self):
    return self.operation.attributes["dimension"]

  @dimension.setter
  def dimension(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dimension"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceWorkgroupIDOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.interface.workgroup.id"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, dimension, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["dimension"] = (dimension if (
    issubclass(type(dimension), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(dimension, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dimension(self):
    return self.operation.attributes["dimension"]

  @dimension.setter
  def dimension(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dimension"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceWorkgroupSizeOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.interface.workgroup.size"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, dimension, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["dimension"] = (dimension if (
    issubclass(type(dimension), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(dimension, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dimension(self):
    return self.operation.attributes["dimension"]

  @dimension.setter
  def dimension(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dimension"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PipelineLayoutCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.pipeline_layout.create"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, push_constants, set_layouts, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    operands.extend(_get_op_results_or_values(set_layouts))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["push_constants"] = (push_constants if (
    issubclass(type(push_constants), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(push_constants, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def set_layouts(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def push_constants(self):
    return self.operation.attributes["push_constants"]

  @push_constants.setter
  def push_constants(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["push_constants"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PipelineLayoutLookupOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.pipeline_layout.lookup"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, device, layout, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(device))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["layout"] = (layout if (
    issubclass(type(layout), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('HAL_PipelineLayoutAttr')) else
      _ods_ir.AttrBuilder.get('HAL_PipelineLayoutAttr')(layout, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def device(self):
    return self.operation.operands[0]

  @builtins.property
  def layout(self):
    return self.operation.attributes["layout"]

  @layout.setter
  def layout(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["layout"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ReturnOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.return"

  _ODS_REGIONS = (0, True)

  def __init__(self, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(operands_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorBarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.tensor.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, sources, signal_fence, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(sources))
    operands.append(_get_op_result_or_value(signal_fence))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sources(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def signal_fence(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1 + _ods_variadic_group_length - 1]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorExportOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.tensor.export"

  _ODS_OPERAND_SEGMENTS = [1,-1,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, target, source, source_encoding, source_dims, *, target_storage=None, name=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_results_or_values(source_dims))
    operands.append(_get_op_result_or_value(target_storage) if target_storage is not None else None)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["source_encoding"] = (source_encoding if (
    issubclass(type(source_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(source_encoding, context=_ods_context))
    if name is not None: attributes["name"] = (name if (
        issubclass(type(name), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    results.append(target)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def source_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def target_storage(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def source_encoding(self):
    return self.operation.attributes["source_encoding"]

  @source_encoding.setter
  def source_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["source_encoding"] = value

  @builtins.property
  def name(self):
    if "name" not in self.operation.attributes:
      return None
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is not None:
      self.operation.attributes["name"] = value
    elif "name" in self.operation.attributes:
      del self.operation.attributes["name"]

  @name.deleter
  def name(self):
    del self.operation.attributes["name"]

  @builtins.property
  def target(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TensorImportOp(_ods_ir.OpView):
  OPERATION_NAME = "hal.tensor.import"

  _ODS_OPERAND_SEGMENTS = [1,-1,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, target, source, target_encoding, target_dims, *, wait_fence=None, name=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_results_or_values(target_dims))
    operands.append(_get_op_result_or_value(wait_fence) if wait_fence is not None else None)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["target_encoding"] = (target_encoding if (
    issubclass(type(target_encoding), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(target_encoding, context=_ods_context))
    if name is not None: attributes["name"] = (name if (
        issubclass(type(name), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    results.append(target)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def target_dims(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range

  @builtins.property
  def wait_fence(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def target_encoding(self):
    return self.operation.attributes["target_encoding"]

  @target_encoding.setter
  def target_encoding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["target_encoding"] = value

  @builtins.property
  def name(self):
    if "name" not in self.operation.attributes:
      return None
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is not None:
      self.operation.attributes["name"] = value
    elif "name" in self.operation.attributes:
      del self.operation.attributes["name"]

  @name.deleter
  def name(self):
    del self.operation.attributes["name"]

  @builtins.property
  def target(self):
    return self.operation.results[0]
