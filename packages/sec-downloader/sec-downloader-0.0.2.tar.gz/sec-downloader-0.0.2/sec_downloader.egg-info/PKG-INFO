Metadata-Version: 2.1
Name: sec-downloader
Version: 0.0.2
Summary: An enhanced version of sec-edgar-downloader with caching capabilities and in-memory data retrieval. Designed for efficient SEC EDGAR document processing.
Home-page: https://github.com/Elijas/sec-downloader
Author: Elijas
Author-email: 4084885+Elijas@users.noreply.github.com
License: MIT License
Keywords: nbdev jupyter notebook python
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

# sec-downloader

<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->

## Install

``` sh
pip install sec_downloader
```

## Features

- Instead of being saved to disk, files are directly downloaded into
  memory.
- Use “glob” pattern to select which files are read to memory.

## How to use

Downloading multiple documents:

``` python
from sec_edgar_downloader import Downloader
from sec_downloader import DownloadStorage

storage = DownloadStorage()
with storage as path:
    dl = Downloader("MyCompanyName", "email@example.com", path)
    dl.get("10-K", "GOOG", limit=2)

for path, content in storage.get_file_contents():
    print(f"Path: {path}\nContent [len={len(content)}]: {content[:30]}...\n")
```

    Path: sec-edgar-filings/GOOG/10-K/0001652044-22-000019/full-submission.txt
    Content [len=15044932]: <SEC-DOCUMENT>0001652044-22-00...

    Path: sec-edgar-filings/GOOG/10-K/0001652044-23-000016/full-submission.txt
    Content [len=15264470]: <SEC-DOCUMENT>0001652044-23-00...

Let’s demonstrate how to download a single file (latest 10-Q filing
details in HTML format) to memory.

``` python
ONLY_HTML = "**/*.htm*"

storage = DownloadStorage(filter_pattern=ONLY_HTML)
with storage as path:
    dl = Downloader("MyCompanyName", "email@example.com", path)
    dl.get("10-Q", "AAPL", limit=1, download_details=True)

content = storage.get_file_contents()[0].content
print(f"{content[:50]}...")
```

    <?xml version="1.0" ?><!--XBRL Document Created wi...
