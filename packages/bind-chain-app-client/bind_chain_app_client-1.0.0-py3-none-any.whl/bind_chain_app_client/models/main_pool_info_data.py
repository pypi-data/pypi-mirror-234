# coding: utf-8

"""
    Chain App BIND client SDK

    Description for BIND. 

    The version of the OpenAPI document: 2.0
    Contact: support@bind.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class MainPoolInfoData(BaseModel):
    """
    MainPoolInfoData
    """
    main_pool_id: StrictStr = Field(...)
    main_pool_pubkey: StrictStr = Field(...)
    main_pool_owner: StrictStr = Field(...)
    user_count: Union[StrictFloat, StrictInt] = Field(...)
    reward_vault_balance: Union[StrictFloat, StrictInt] = Field(...)
    staking_vault_balance: Union[StrictFloat, StrictInt] = Field(...)
    total_staked_by_bind: Union[StrictFloat, StrictInt] = Field(...)
    total_staked_by_users: Union[StrictFloat, StrictInt] = Field(...)
    locking_period_of_behalf_staking: Union[StrictFloat, StrictInt] = Field(...)
    main_pool_status: Union[StrictFloat, StrictInt] = Field(...)
    created_at: StrictStr = Field(...)
    updated_at: StrictStr = Field(...)
    __properties = ["main_pool_id", "main_pool_pubkey", "main_pool_owner", "user_count", "reward_vault_balance", "staking_vault_balance", "total_staked_by_bind", "total_staked_by_users", "locking_period_of_behalf_staking", "main_pool_status", "created_at", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MainPoolInfoData:
        """Create an instance of MainPoolInfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MainPoolInfoData:
        """Create an instance of MainPoolInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MainPoolInfoData.parse_obj(obj)

        _obj = MainPoolInfoData.parse_obj({
            "main_pool_id": obj.get("main_pool_id"),
            "main_pool_pubkey": obj.get("main_pool_pubkey"),
            "main_pool_owner": obj.get("main_pool_owner"),
            "user_count": obj.get("user_count"),
            "reward_vault_balance": obj.get("reward_vault_balance"),
            "staking_vault_balance": obj.get("staking_vault_balance"),
            "total_staked_by_bind": obj.get("total_staked_by_bind"),
            "total_staked_by_users": obj.get("total_staked_by_users"),
            "locking_period_of_behalf_staking": obj.get("locking_period_of_behalf_staking"),
            "main_pool_status": obj.get("main_pool_status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


