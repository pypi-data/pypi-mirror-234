# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/api/radiometry_io.ipynb.

# %% auto 0
__all__ = ['mirror_filename', 'lenses_filename', 'filter_filename', 'window_filename', 'qe_filename', 'load_detector_QE',
           'load_detector_window_transmittance', 'load_filter_transmittance']

# %% ../../notebooks/api/radiometry_io.ipynb 1
import json
import os
from dataclasses import dataclass
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
from importlib_resources import files

import hvplot.pandas
import pandas as pd

# %% ../../notebooks/api/radiometry_io.ipynb 7
mirror_filename = "Flight mirror reflectivity.xlsx"
lenses_filename = "Report JANUS lenses.xlsx"
filter_filename = "JANUS_spektral Daten_selection_Leonardo.xlsx"
window_filename = "PFM FPM Windows Transmission v1.xlsx"
qe_filename = "detector_QE.xlsx"

# %% ../../notebooks/api/radiometry_io.ipynb 9
def load_detector_QE(wavelength_user: np.array = None, plot: bool = False):
    "This function loads the detector QE (quantum efficiency) of JANUS instrument"

    fullname = files("janusexp.hardware_data").joinpath(qe_filename)

    WS = pd.read_excel(fullname, sheet_name="data")  # read the excel file

    wavelength_of_file = WS.values[:, 0].astype("float")  # nm
    QE_of_file = WS.values[:, 7].astype("float")

    if wavelength_user is not None:
        detector_QE = np.interp(wavelength_user, wavelength_of_file, QE_of_file)
    else:
        detector_QE = QE_of_file
        wavelength_user = wavelength_of_file

    if plot:
        plt.figure(1)
        plt.plot(wavelength_of_file, QE_of_file, label="QE")
        plt.plot(wavelength_user, detector_QE, label="QE-interp")
        plt.title("Quantum efficiency")
        plt.grid()
        plt.xlabel(r"$\lambda$, [nm]")
        plt.ylim([0, 1])
        plt.legend()
        plt.show()

    return detector_QE, wavelength_user

# %% ../../notebooks/api/radiometry_io.ipynb 11
def load_detector_window_transmittance(
    wavelength_user: np.array = None, plot: bool = False
):
    "This function loads the transmittance of the dector window of JANUS instrument"

    fullname = files("janusexp.hardware_data").joinpath(window_filename)

    WS = pd.read_excel(fullname, sheet_name="data", header=None)  # read the excel file

    wavelength_of_file = WS.values[:, 0].astype("float")  # nm
    transmittance_of_file = WS.values[:, 1].astype("float") / 100

    # wlen = (np.arange(350,1101,1))
    if wavelength_user is not None:
        detector_window_transmittance = np.interp(
            wavelength_user, wavelength_of_file, transmittance_of_file
        )
    else:
        detector_window_transmittance = transmittance_of_file
        waves = wavelength_of_file

    if plot:
        plt.figure(1)
        plt.plot(wavelength_of_file, transmittance_of_file, label=r"$\tau (\lambda)$")
        if wavelength_user is not None:
            plt.plot(wavelength_user, detector_window_transmittance, label="interp")
        plt.title("Detector window transmittance")
        plt.grid()
        plt.xlabel(r"$\lambda$, [nm]")
        plt.ylim([0, 1])
        plt.legend()
        plt.show()

    return detector_window_transmittance, waves

# %% ../../notebooks/api/radiometry_io.ipynb 15
def load_filter_transmittance(
    wavelength_user: np.array = None,
    filter: int = 1,
    angle_of_incidence: float = 0,
    plot: bool = False,
):
    "This function loads the filter transmittance of JANUS instrument"

    fullname = files("janusexp.hardware_data").joinpath(filter_filename)

    WS = pd.read_excel(fullname, sheet_name="Transmission")  # read the excel file

    if not angle_of_incidence in [3, 6.5, 10]:  # check on the input angle_of_incidence
        angle_of_incidence = 3
        print("Attention! options for angle_of_incidence are 3,6.5,10")
        print("Automatic selection of angle_of_incidence = 3")

    if not 1 <= filter <= 13:  # check on the input filter number
        filter = 100
        print("Attention! options for filters are 1,2,3,4,5,6,7,8,9,10,11,12,13")
        print("Closing program")

    if filter == 1:  # selection of the column [start]
        column_index_wavelength = 1
        if angle_of_incidence == 3:
            column_index_transmittance = column_index_wavelength + 1
        elif angle_of_incidence == 6.5:
            column_index_transmittance = column_index_wavelength + 2
        else:
            column_index_transmittance = column_index_wavelength + 3
    elif filter == 2:
        column_index_wavelength = 1
        if angle_of_incidence == 3:
            column_index_transmittance = 6
        elif angle_of_incidence == 6.5:
            column_index_transmittance = 7
        else:
            column_index_transmittance = 8

    elif (filter < 14) and (filter > 0):
        column_index_wavelength = 10 + 5 * (filter - 3)
        if angle_of_incidence == 3:
            column_index_transmittance = column_index_wavelength + 1
        elif angle_of_incidence == 6.5:
            column_index_transmittance = column_index_wavelength + 2
        else:
            column_index_transmittance = column_index_wavelength + 3

        if filter == 11:
            column_index_wavelength = 55

    else:
        return  # selection of the columns [end]

    wavelength_in_excel = WS.values[2:None, column_index_wavelength].astype(
        "float"
    )  # extract value [wavelenght]
    transmittance_in_excel = WS.values[2:None, column_index_transmittance].astype(
        "float"
    )  # extract value [transmittance]
    nan_index = np.isnan(wavelength_in_excel)  # index of nan values
    wavelength_in_excel = wavelength_in_excel[
        ~nan_index
    ]  # removal of nan values [wavelength]
    transmittance_in_excel = (
        transmittance_in_excel[~nan_index]
    ) / 100  # removal of nan values [transmittance]

    wavelength_in_excel_start = wavelength_in_excel[
        0
    ]  # first wavelength of filter in excel
    wavelength_in_excel_end = wavelength_in_excel[
        -1
    ]  # last wavelength of filter in excel

    # create the complete vector, all range [320 nm 1120 nm]
    # left side
    if wavelength_in_excel_start > 320:
        wavelength_left = np.arange(320, wavelength_in_excel_start, 1)
        wavelength = np.concatenate((wavelength_left, wavelength_in_excel))

        transmittance_left = np.zeros(wavelength_left.shape)
        transmittance = np.concatenate((transmittance_left, transmittance_in_excel))
    else:
        wavelength = wavelength_in_excel
        transmittance = transmittance_in_excel
        # right side
    if wavelength_in_excel_end < 1120:
        wavelength_right = np.arange(wavelength_in_excel_end + 1, 1121, 1)
        wavelength = np.concatenate((wavelength, wavelength_right))

        transmittance_right = np.zeros(wavelength_right.shape)
        transmittance = np.concatenate((transmittance, transmittance_right))

        # if requested by user, interpolation
    if wavelength_user is not None:
        filter_transmittance = np.interp(wavelength_user, wavelength, transmittance)
    else:
        filter_transmittance = transmittance
        wavelength_user = wavelength

    if plot:
        plt.figure(1)
        plt.plot(wavelength, transmittance, label=r"$\tau (\lambda)$")
        plt.plot(wavelength_user, filter_transmittance, label="interp")
        plt.title("Filter transmittance")
        plt.grid()
        plt.xlabel(r"$\lambda$, [nm]")
        plt.ylim([0, 1])
        plt.legend()
        plt.show()

    return filter_transmittance, wavelength_user
