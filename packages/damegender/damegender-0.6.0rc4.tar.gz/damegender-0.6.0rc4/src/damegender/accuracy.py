#!/usr/bin/python3
# -*- coding: utf-8 -*-

#  Copyright (C) 2020  David Arroyo Menéndez (davidam@gmail.com)
#  This file is part of Damegender.

#  Author: David Arroyo Menéndez <davidam@gmail.com>
#  Maintainer: David Arroyo Menéndez <davidam@gmail.com>

# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.

# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with DameGender; see the file GPL.txt.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA,

# DESCRIPTION: This script allows to measure accuracies from a json
# file downloaded from an api system with downloadjson.py

from app.dame_gender import Gender
from app.dame_namsor import DameNamsor
from app.dame_genderize import DameGenderize
from app.dame_genderguesser import DameGenderGuesser
from app.dame_genderapi import DameGenderApi
from app.dame_nameapi import DameNameapi
from app.dame_utils import DameUtils

import argparse
import os
parser = argparse.ArgumentParser()
# dataset_guess is a dataset such as files/names/names_de/defemales.csv
# or files/names/min.csv.json
# guess is NOT a base of truth
# guess must be verified with a base of truth
parser.add_argument('--dataset_guess', type=str, required=True,
                    default="files/names/min.csv",
                    help='csv guess file with names, surnames and gender')
parser.add_argument('--dataset_guess_position_gender', type=int,
                    required=True, default=2)
parser.add_argument('--dataset_guess_delimiter', type=str,
                    required=False, default=",")
parser.add_argument('--dataset_guess_gender_chars', type=str,
                    required=True, default="f,m")
# dataset_test is a dataset such as files/names/names_tests/fifa.csv
# or files/names/allnoundefined.csv.mlp.json
# test is a base of truth
parser.add_argument('--dataset_test', required=True,
                    help='generated by downloadjson.py or damegender2json.py')
parser.add_argument('--dataset_test_position_gender', type=int,
                    required=True, default=2)
parser.add_argument('--dataset_test_gender_chars', type=str,
                    required=True, default="f,m")
parser.add_argument('--dataset_test_delimiter', type=str,
                    required=False, default=",")
parser.add_argument('--measure', default="accuracy",
                    choices=['accuracy', 'precision', 'recall', 'f1score'])
parser.add_argument('--api', required=True,
                    choices=['namsor', 'genderize',
                             'genderguesser', 'damegender',
                             'genderapi', 'nameapi', 'all'])

args = parser.parse_args()
du = DameUtils()

# set gender_values array
test_gender_values = args.dataset_test_gender_chars.split(",")
test_f_chars = test_gender_values[0]
test_m_chars = test_gender_values[1]
guess_gender_values = args.dataset_guess_gender_chars.split(",")
guess_f_chars = guess_gender_values[0]
guess_m_chars = guess_gender_values[1]

if (args.api == "all"):

    if (dg.config['DEFAULT']['namsor'] == 'yes'):
        dn = DameNamsor()
        dn.pretty_gg_list(guessf=args.dataset_guess,
                          testf=args.dataset_test,
                          measure=args.measure,
                          api='Namsor',
                          guess_f_chars=guess_f_chars,
                          guess_m_chars=guess_m_chars,
                          test_f_chars=test_f_chars,
                          test_m_chars=test_m_chars)

    if (dg.config['DEFAULT']['genderize'] == 'yes'):
        dg = DameGenderize()
        dg.pretty_gg_list(guessf=args.dataset_guess,
                          testf=args.dataset_test,
                          measure=args.measure,
                          api='Genderize',
                          guess_f_chars=guess_f_chars,
                          guess_m_chars=guess_m_chars,
                          test_f_chars=test_f_chars,
                          test_m_chars=test_m_chars)

    dgg = DameGenderGuesser()
    dgg.pretty_gg_list(guessf=args.dataset_guess,
                       testf=args.dataset_test,
                       measure=args.measure,
                       api='Genderguesser',
                       guess_f_chars=guess_f_chars,
                       guess_m_chars=guess_m_chars,
                       test_f_chars=test_f_chars,
                       test_m_chars=test_m_chars)

    s = Gender()
    s.pretty_gg_list(guessf=args.dataset_guess, testf=args.dataset_test,
                      measure=args.measure, api='Damegender',
                      guess_f_chars=guess_f_chars, guess_m_chars=guess_m_chars,
                      test_f_chars=test_f_chars, test_m_chars=test_m_chars)

    if (dg.config['DEFAULT']['genderapi'] == 'yes'):
        dga = DameGenderApi()
        dga.pretty_gg_list(guessf=args.dataset_guess,
                           testf=args.dataset_test,
                           measure=args.measure,
                           api='Genderapi',
                           guess_f_chars=guess_f_chars,
                           guess_m_chars=guess_m_chars,
                           test_f_chars=test_f_chars,
                           test_m_chars=test_m_chars)

    if (dg.config['DEFAULT']['nameapi'] == 'yes'):
        dna = DameNameapi()
        dna.pretty_gg_list(guessf=args.dataset_guess,
                           testf=args.dataset_test,
                           measure=args.measure,
                           api='Nameapi',
                           guess_f_chars=guess_f_chars,
                           guess_m_chars=guess_m_chars,
                           test_f_chars=test_f_chars,
                           test_m_chars=test_m_chars)

elif (args.api == "namsor"):
    dn = DameNamsor()
    dn.pretty_gg_list(guessf=args.dataset_guess,
                      testf=args.dataset_test,
                      measure=args.measure,
                      api='Namsor',
                      guess_f_chars=guess_f_chars,
                      guess_m_chars=guess_m_chars,
                      test_f_chars=test_f_chars,
                      test_m_chars=test_m_chars)

elif (args.api == "genderize"):
    dg = DameGenderize()
    dg.pretty_gg_list(guessf=args.dataset_guess,
                      testf=args.dataset_test,
                      measure=args.measure,
                      api='Genderize',
                      guess_f_chars=guess_f_chars,
                      guess_m_chars=guess_m_chars,
                      test_f_chars=test_f_chars,
                      test_m_chars=test_m_chars)

elif (args.api == "genderguesser"):
    dgg = DameGenderGuesser()
    dgg.pretty_gg_list(guessf=args.dataset_guess,
                       testf=args.dataset_test,
                       measure=args.measure,
                       api='Genderguesser',
                       guess_f_chars=guess_f_chars,
                       guess_m_chars=guess_m_chars,
                       test_f_chars=test_f_chars,
                       test_m_chars=test_m_chars)

elif (args.api == "damegender"):
    s = Gender()
    s.pretty_gg_list(guessf=args.dataset_guess,
                     testf=args.dataset_test,
                     measure=args.measure,
                     api='Damegender',
                     gender_test_row=args.dataset_test_position_gender,
                     gender_guess_row=args.dataset_guess_position_gender,
                     delimiter_guessf=args.dataset_guess_delimiter,
                     delimiter_testf=args.dataset_test_delimiter,
                     guess_f_chars=guess_f_chars,
                     guess_m_chars=guess_m_chars,
                     test_f_chars=test_f_chars,
                     test_m_chars=test_m_chars)

elif (args.api == "genderapi"):
    dga = DameGenderApi()
    dga.pretty_gg_list(guessf=args.dataset_guess,
                       testf=args.dataset_test,
                       measure=args.measure,
                       api='Genderapi',
                       guess_f_chars=guess_f_chars,
                       guess_m_chars=guess_m_chars,
                       test_f_chars=test_f_chars,
                       test_m_chars=test_m_chars)

elif (args.api == "nameapi"):
    dna = DameNameapi()
    dna.pretty_gg_list(guessf=args.dataset_guess,
                       testf=args.dataset_test,
                       measure=args.measure, api='Nameapi',
                       guess_f_chars=guess_f_chars,
                       guess_m_chars=guess_m_chars,
                       test_f_chars=test_f_chars,
                       test_m_chars=test_m_chars)
