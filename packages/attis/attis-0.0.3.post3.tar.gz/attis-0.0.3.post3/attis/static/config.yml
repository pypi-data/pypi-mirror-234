_import:
  - ..

_inherit:
  - help.yml

config:
  preset_sources: # local path or remote path (url)
    # - /etc/attis/preset/
    - ${oc.env:HOME}/attis/preset/
  attis:
    mode: prod # prod, debug
    # run_line_split: ========= Attis Output =========
    exe_action:
      line_char: "+"
      center_char: "Attis"

main_entry:
  - ""
  - "v"
  - "--version"
  - "help"
  - "set disk/du du -sh *"
  - "ls"
  - "ls disk"
  - "ls disk/du"
  - "ls disk du"
  - "ls disk no_exist"
  - "run disk no_exist"
  - "run xxx"
  - "run disk du"
  - "" # equivalent to `attis` or `a`
  - "disk du" # equivalent to `attis disk du`, as well as `attis run disk du`
  # - "set disk/df df -h"

# 1. load preset sources
preset_manager:
  $libcore.preset_manager.PresetManager:
    sources: /config/preset_sources
    local_preset_name: local.yml

# 2. Run action manager based on user's params
action_manager:
  $libcore.action_manager.ActionManager:
    actions: /actions
    preset_manager: /preset_manager
  run():
    run_commands:
      multiple_commands: /main_entry

actions:
  help:
    $libcore.action.help_action.HelpAction:
      action_manifest: /action_manifest
  version:
    $libcore.action.version_action.VersionAction: {}
  set:
    $libcore.action.set_action.SetAction:
      preset_manager: /preset_manager
  ls:
    $libcore.action.list_action.ListAction:
      preset_manager: /preset_manager
  rm:
    $libcore.action.remove_action.RemoveAction:
      preset_manager: /preset_manager
  run:
    $libcore.action.exe_action.ExeAction:
      preset_manager: /preset_manager
      list_action: /actions/ls
      # run_line_split: /config/attis/run_line_split
      line_char: /config/attis/exe_action/line_char
      center_char: /config/attis/exe_action/center_char

# shortcut key params
  h: /actions/help
  v:
    $libcore.action.version_action.VersionAction: {}
  # s: /actions/set
  l: /actions/ls
  # r: /actions/run
