include:
  - template: "Workflows/Branch-Pipelines.gitlab-ci.yml"

stages:
  - prepare
  - test
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.12"
  PDM_USE_VENV: "False"

.default_cache: &default_cache
  key:
    files:
      - pdm.lock
    prefix: $PYTHON_VERSION
  paths:
    - __pypackages__

.push_cache: &push_cache
  cache:
    <<: *default_cache
    policy: pull-push

.pull_cache: &pull_cache
  cache:
    <<: *default_cache
    policy: pull

.job_template: &job_definition
  image: ${CI_REGISTRY_IMAGE}/builder:$PYTHON_VERSION
  before_script:
    - pdm sync -d

prepare:
  stage: prepare
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.12"]
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script: >-
    /kaniko/executor
    --context "${CI_PROJECT_DIR}"
    --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
    --build-arg PYTHON_VERSION=${PYTHON_VERSION}
    --destination "${CI_REGISTRY_IMAGE}/builder:${PYTHON_VERSION}"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile
        - .gitlab-ci.yml
    - when: manual
      allow_failure: true

lint:
  image: ${CI_REGISTRY_IMAGE}/builder:$PYTHON_VERSION
  stage: test
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
    PRE_COMMIT_COLOR: always
  script: pre-commit run --all-files
  cache:
    key:
      prefix: pre-commit-${PYTHON_VERSION}
      files:
        - .pre-commit-config.yaml
    paths:
      - ${PRE_COMMIT_HOME}

test:
  <<: [*job_definition, *push_cache]
  stage: test
  script: pdm run -v py.test --cov=unpoly --cov-report=xml:report.xml --cov-report=term
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    reports:
      junit: report.xml
    expire_in: 1 day

test-py38:
  <<: [*job_definition, *push_cache]
  variables:
    PYTHON_VERSION: "3.8"
  stage: test
  script: pdm run -v py.test --cov=unpoly --cov-report=xml:report.xml --cov-report=term

build:
  <<: [*job_definition, *pull_cache]
  stage: build
  script: pdm build
  artifacts:
    paths:
      - dist/
    expire_in: 1 day

deploy:
  <<: [*job_definition, *pull_cache]
  stage: deploy
  dependencies: ["build"]
  script: python3 -m twine upload dist/*
  only:
    - tags
