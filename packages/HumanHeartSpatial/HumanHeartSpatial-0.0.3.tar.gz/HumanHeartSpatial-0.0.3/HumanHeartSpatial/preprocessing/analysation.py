import matplotlib.pyplot as plt

from .MakeAnndata import MakeAnndata
from .remove_mt_ribo import remove_mt_ribo
from matplotlib_venn import venn3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scanpy as sc
import scanpy.external as sce
from matplotlib_venn import venn3


class analysation:
    def __init__(self, h5ad_path, barcodes_path, cell_cycle_gene_path, barcode_num, figure_folder, resolution):
        # h5ad_path: path to h5ad file generated by CURIO pipeline
        # barcodes_path: path to bead barcode whitelist for specific slide
        # cell_cycle_path: path to file with cell cycle genes
        # barcode_num: barcode number for specific whitelist (e.g. A0026_009)
        # figure_folder: folder where figures should be saved
        # (OBS! In /figures you will have to make subfolders:
        # dendrogramfigures
        # highest_expr_genesfigures
        # rank_genes_groups_leiden_0.3
        # umapfigures
        # dotplot_figures
        # histogramfigures
        # scatterfigures
        # vennfigures
        # filter_genes_dispersionfigures
        # matrixplot_figures
        # showfigures
        # violinfigures
        # heatmapfigures
        # pca_variance_ratiofigures
        # stacked_violin_figures
        # )
        # Resolution: desired leiden resolution (default 1.0)

        print('Starting Analysis')
        self.barcodes_path = barcodes_path
        self.h5ad_path = h5ad_path

        self.barcode_num = barcode_num
        self.figure_folder = figure_folder
        # cell cycle genes
        self.cell_cycle_gene_path = cell_cycle_gene_path

        self.s_genes, self.g2m_genes = self.cell_cycle()

        self.resolution = resolution

        # The mitocondrial statisitcs:
        self.mito_obs, self.mito_data = self.mito_stats()

        self.normalised_data = self.preprocessing_anndata()

        print("To access final preprocessed, clustered and scaled anndata: .final_anndata")
        print("To get ranked genes (wilcoxon): .ranked_genes")
        self.final_anndata, self.ranked_genes = self.clustering()

    def mito_stats(self):
        # Function which gives statistics of mitocondrial and ribosomal genes
        print('Quality Measures')
        tmp = MakeAnndata(self.h5ad_path, self.barcodes_path)

        data = tmp.data

        tmp = remove_mt_ribo(data)

        mito_obs = tmp.mito_obs
        mito_data = tmp.mito_data

        sc.settings.set_figure_params(dpi_save=400, fontsize=30, figsize=(10, 10), facecolor='white', frameon=False,
                                      transparent=True, format="pdf")

        sc.pl.violin(mito_data,
                     ['n_genes_by_counts', 'total_counts', 'pct_counts_mt', 'pct_counts_ribo', 'pct_counts_hb'],
                     jitter=0.4, rotation=45,
                     save=self.figure_folder + f'Quality_Measures_Violin_{self.barcode_num}.pdf')
        # plt.savefig(self.figure_folder + f'Quality_Measures_Violin_{self.barcode_num}.png')
        # plt.savefig(self.figure_folder + f'Quality_Measures_Violin_{self.barcode_num}.pdf')

        sc.pl.violin(mito_data, ['pct_counts_mt'],
                     jitter=0.4, rotation=45,
                     save=self.figure_folder + f'Quality_Measures_Mitochondria_Violin_{self.barcode_num}.pdf')

        sc.pl.scatter(mito_data, x='total_counts', y='pct_counts_mt', title="Scatter Plot of pct_counts_mt",
                      save=self.figure_folder + f'Quality_Measures_Mitochondria_Scatter_{self.barcode_num}.pdf')

        sc.pl.scatter(mito_data, x='total_counts', y='n_genes_by_counts', title="Scatter Plot of n_genes_by_counts",
                      save=self.figure_folder + f'Quality_Measures_n_Genes_by_Counts_Scatter_{self.barcode_num}.pdf')

        sc.settings.set_figure_params(dpi_save=400, fontsize=20, figsize=(10, 10), facecolor='white', frameon=False,
                                      transparent=True, format="pdf")

        sc.pl.spatial(
            mito_data,
            color=["total_counts", "n_genes_by_counts", "pct_counts_mt"],
            spot_size=30, vmin=0, vmax='p99.2',
            save=self.figure_folder + f'Quality_Measures_Spatial_{self.barcode_num}.pdf')

        sc.pl.spatial(
            mito_data,
            color=["pct_counts_mt"],
            spot_size=30, vmin=0, vmax='p99.2',
            save=self.figure_folder + f'Quality_Measures_Mitochondria_Spatial_{self.barcode_num}.pdf')

        data.obs.pct_counts_mt.hist(bins=100)
        plt.title("Histogram of Percentage Counts Mito")
        # plt.savefig(self.figure_folder + f'Quality_Measures_Violin_{self.barcode_num}.png')
        plt.savefig(self.figure_folder + f'histogramfigures/Histogram_Pct_Counts_Mitochondria_{self.barcode_num}.pdf')
        plt.clf()

        data.obs.pct_counts_ribo.hist(bins=100)
        plt.title("Histogram of Percentage Counts Ribo")
        plt.savefig(self.figure_folder + f'histogramfigures/Histogram_Pct_Counts_Ribosomal_{self.barcode_num}.pdf')
        plt.clf()

        return mito_obs, mito_data

    def cell_cycle(self):

        tmp = MakeAnndata(self.h5ad_path, self.barcodes_path)
        data = tmp.data
        tmp = remove_mt_ribo(data)

        data = tmp.data

        cell_cycle_genes = [x.strip() for x in open(self.cell_cycle_gene_path)]
        # Split into 2 lists
        s_genes = cell_cycle_genes[:43]
        g2m_genes = cell_cycle_genes[43:]

        cell_cycle_genes = [x for x in cell_cycle_genes if x in data.var_names]
        # print(len(cell_cycle_genes))

        return s_genes, g2m_genes

    def preprocessing_anndata(self):
        print('Preprocessing and Normalisation')
        tmp = MakeAnndata(self.h5ad_path, self.barcodes_path)
        data = tmp.data
        tmp = remove_mt_ribo(data)

        data = tmp.data

        sc.pl.highest_expr_genes(data, n_top=20,
                                 save=self.figure_folder + f'Highest_Expressed_Genes_{self.barcode_num}.pdf')

        # Normalise - cpm = target_sum = 1e6
        sc.pp.normalize_total(data, inplace=True, target_sum=1e6)

        # Log - OBS! Bug in write_h5ad - see lower down.
        sc.pp.log1p(data)

        sc.settings.set_figure_params(dpi_save=400, fontsize=20, figsize=(10, 10), facecolor='white', frameon=False,
                                      transparent=True, format="pdf")
        # Note that you do want to exclude junk - high expression probably common genes expressed in all cells
        sc.pp.highly_variable_genes(data, max_mean=10, min_mean=0, min_disp=0.25)
        sc.pl.highly_variable_genes(data, save=self.figure_folder + f'Highly_Variable_Genes_{self.barcode_num}.pdf')

        sc.tl.score_genes_cell_cycle(data, s_genes=self.s_genes, g2m_genes=self.g2m_genes)

        # Select only high var genes
        data.raw = data
        data = data[:, data.var.highly_variable]

        sc.pl.violin(data, ['S_score', 'G2M_score'],
                     jitter=0.4, rotation=45, save=self.figure_folder + f'Cellcycle_Violin_{self.barcode_num}.pdf')

        # Scale before pca with exclusion of given sd
        sc.pp.scale(data, max_value=10, zero_center=False)

        # regress out unnecessary sources of variation
        # sc.pp.regress_out(data, ['total_counts', 'pct_counts_mt'])
        # data.raw = data
        sc.pp.pca(data, random_state=0)

        # captured variance
        sc.pl.pca_variance_ratio(data, n_pcs=50, log=True, save=self.figure_folder + f'PCA_{self.barcode_num}.pdf')
        # Calculate neighbour hood graph using pc
        sc.pp.neighbors(data, n_pcs=5)
        # Embedd neighbourhood graph through umap
        sc.tl.umap(data)
        # confirm scaling

        data.to_df().mean(axis=0).hist(bins=100)
        plt.savefig(self.figure_folder + f'histogramfigures/Histogram_Mean_after_Normalisation_{self.barcode_num}.pdf')
        plt.clf()
        data.to_df().iloc[:, 1000:2000].var(axis=0).hist()
        plt.savefig(
            self.figure_folder + f'histogramfigures/Histogram_Variance_after_Normalisation_{self.barcode_num}.pdf')
        plt.clf()
        return data

    def clustering(self):
        print('Clustering')
        data = self.normalised_data
        data.uns['log1p'] = {'base': None}  # Bug in scanpy! OBS!
        # Leiden clustering
        sc.tl.leiden(data, key_added="leiden_0.3", resolution=0.3)
        sc.tl.leiden(data, key_added="leiden_0.5", resolution=0.5)
        sc.tl.leiden(data, key_added="leiden_0.8", resolution=0.8)
        sc.tl.leiden(data, key_added="leiden_1.0", resolution=1.0)

        sc.settings.set_figure_params(dpi_save=400, fontsize=20, figsize=(10, 10), facecolor='white', frameon=False,
                                      transparent=True, format="pdf")
        sc.pl.spatial(data, color=["leiden_0.3", "leiden_0.5", "leiden_0.8", "leiden_1.0"], spot_size=30, wspace=0.5,
                      save=self.figure_folder + f'Leiden_Spatial_{self.barcode_num}.pdf')

        if self.resolution == None:
            sc.pl.spatial(data, color=["leiden_1.0"], spot_size=30, wspace=0.5,
                          save=self.figure_folder + f'Leiden_0.1_Spatial_{self.barcode_num}.pdf')
            sc.tl.dendrogram(data, groupby="leiden_1.0")
            sc.pl.dendrogram(data, groupby="leiden_1.0",
                             save=self.figure_folder + f'Leiden_0.1_Dendrogram_{self.barcode_num}.pdf')
            sc.pl.umap(data, color=["leiden_1.0"], palette="tab20",
                       save=self.figure_folder + f'Leiden_0.1_Umap_{self.barcode_num}.pdf')

            sc.tl.rank_genes_groups(data, 'leiden_1.0', method='wilcoxon', key_added='wilcoxon')
            sc.pl.rank_genes_groups(data, n_genes=25, sharey=False, key="wilcoxon",
                                    save=self.figure_folder + f'Leiden_0.1_Wilcoxon_Ranked_Genes_{self.barcode_num}.pdf')

            sc.tl.rank_genes_groups(data, 'leiden_1.0', method='t-test', key_added='t-test')
            sc.pl.rank_genes_groups(data, n_genes=25, sharey=False, key="t-test",
                                    save=self.figure_folder + f'Leiden_0.1_t-test_Ranked_Genes_{self.barcode_num}.pdf')

            sc.tl.rank_genes_groups(data, 'leiden_1.0', method='logreg', key_added="logreg")
            sc.pl.rank_genes_groups(data, n_genes=25, sharey=False, key="logreg",
                                    save=self.figure_folder + f'Leiden_0.1_Logreg_Ranked_Genes_{self.barcode_num}.pdf')

            sc.tl.rank_genes_groups(data, 'leiden_1.0', method='t-test_overestim_var', key_added="t-test_ov")
            sc.pl.rank_genes_groups(data, n_genes=25, sharey=False, key="t-test_ov",
                                    save=self.figure_folder + f'Leiden_0.1_t-test_Ov_Ranked_Genes_{self.barcode_num}.pdf')

            ranked_genes = pd.DataFrame(data.uns['wilcoxon']['names'])

            sc.pl.rank_genes_groups_heatmap(data, n_genes=5, key="wilcoxon", groupby="leiden_1.0",
                                            show_gene_labels=True,
                                            save=self.figure_folder + f'Leiden_0.1_Wilcoxon_Heatmap_{self.barcode_num}.pdf')

            sc.pl.rank_genes_groups_dotplot(data, n_genes=5, key="wilcoxon", groupby="leiden_1.0",
                                            save=self.figure_folder + f'Leiden_0.1_Wilcoxon_Dotplot_{self.barcode_num}.pdf')

            sc.pl.rank_genes_groups_stacked_violin(data, n_genes=5, key="wilcoxon", groupby="leiden_1.0",
                                                   save=self.figure_folder + f'Leiden_0.1_Wilcoxon_Stacked_Violin_{self.barcode_num}.pdf')

            sc.pl.rank_genes_groups_matrixplot(data, n_genes=5, key="wilcoxon", groupby="leiden_1.0",
                                               save=self.figure_folder + f'Leiden_0.1_Wilcoxon_Matrixplot_{self.barcode_num}.pdf')


        else:
            sc.pl.spatial(data, color=[f"leiden_{self.resolution}"], spot_size=30, wspace=0.5,
                          save=self.figure_folder + f'Leiden_{self.resolution}_Spatial_{self.barcode_num}.pdf')
            sc.tl.dendrogram(data, groupby=f"leiden_{self.resolution}")
            sc.pl.dendrogram(data, groupby=f"leiden_{self.resolution}",
                             save=self.figure_folder + f'Leiden_{self.resolution}_Dendrogram_{self.barcode_num}.pdf')
            sc.pl.umap(data, color=[f"leiden_{self.resolution}"], palette="tab20",
                       save=self.figure_folder + f'Leiden_{self.resolution}_Umap_{self.barcode_num}.pdf')

            sc.tl.rank_genes_groups(data, f"leiden_{self.resolution}", method='wilcoxon', key_added='wilcoxon')
            sc.pl.rank_genes_groups(data, n_genes=25, sharey=False, key="wilcoxon",
                                    save=self.figure_folder + f'Leiden_{self.resolution}_Wilcoxon_Ranked_Genes_{self.barcode_num}.pdf')

            sc.tl.rank_genes_groups(data, f"leiden_{self.resolution}", method='t-test', key_added='t-test')
            sc.pl.rank_genes_groups(data, n_genes=25, sharey=False, key="t-test",
                                    save=self.figure_folder + f'Leiden_{self.resolution}_t-test_Ranked_Genes_{self.barcode_num}.pdf')

            sc.tl.rank_genes_groups(data, f"leiden_{self.resolution}", method='logreg', key_added="logreg")
            sc.pl.rank_genes_groups(data, n_genes=25, sharey=False, key="logreg",
                                    save=self.figure_folder + f'Leiden_{self.resolution}_Logreg_Ranked_Genes_{self.barcode_num}.pdf')

            sc.tl.rank_genes_groups(data, f"leiden_{self.resolution}", method='t-test_overestim_var',
                                    key_added="t-test_ov")
            sc.pl.rank_genes_groups(data, n_genes=25, sharey=False, key="t-test_ov",
                                    save=self.figure_folder + f'Leiden_{self.resolution}_t-test_Ov_Ranked_Genes_{self.barcode_num}.pdf')

            ranked_genes = pd.DataFrame(data.uns['wilcoxon']['names'])
            sc.pl.rank_genes_groups_heatmap(data, n_genes=5, key="wilcoxon", groupby=f"leiden_{self.resolution}",
                                            show_gene_labels=True,
                                            save=self.figure_folder + f'Leiden_{self.resolution}_Wilcoxon_Heatmap_{self.barcode_num}.pdf')

            sc.pl.rank_genes_groups_dotplot(data, n_genes=5, key="wilcoxon", groupby=f"leiden_{self.resolution}",
                                            save=self.figure_folder + f'Leiden_{self.resolution}_Wilcoxon_Dotplot_{self.barcode_num}.pdf')

            sc.pl.rank_genes_groups_stacked_violin(data, n_genes=5, key="wilcoxon", groupby=f"leiden_{self.resolution}",
                                                   save=self.figure_folder + f'Leiden_{self.resolution}_Wilcoxon_Stacked_Violin_{self.barcode_num}.pdf')

            sc.pl.rank_genes_groups_matrixplot(data, n_genes=5, key="wilcoxon", groupby=f"leiden_{self.resolution}",
                                               save=self.figure_folder + f'Leiden_{self.resolution}_Wilcoxon_Matrixplot_{self.barcode_num}.pdf')
        try:
            wc = sc.get.rank_genes_groups_df(data, group='0', key='wilcoxon', pval_cutoff=0.01, log2fc_min=0)['names']
            tt = sc.get.rank_genes_groups_df(data, group='0', key='t-test', pval_cutoff=0.01, log2fc_min=0)['names']
            tt_ov = sc.get.rank_genes_groups_df(data, group='0', key='t-test_ov', pval_cutoff=0.01, log2fc_min=0)[
                'names']

            # compare cluster1 genes, only stores top 100 by default
            venn3([set(wc), set(tt), set(tt_ov)], ('Wilcox', 'T-test', 'T-test_ov'))
            plt.savefig(self.figure_folder + f'vennfigures/Venn_Diagram_Comparison_Ranked_Genes_{self.barcode_num}.pdf')
            plt.show()
        except:
            print('Failed to converge')

        print('Finished Analysis')
        return data, ranked_genes









