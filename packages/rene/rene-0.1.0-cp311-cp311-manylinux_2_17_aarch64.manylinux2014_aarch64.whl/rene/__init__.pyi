from __future__ import annotations

import typing as _t

import typing_extensions as _te

__version__: str

MIN_CONTOUR_VERTICES_COUNT: int = ...
MIN_MULTIPOLYGON_POLYGONS_COUNT: int = ...
MIN_MULTISEGMENT_SEGMENTS_COUNT: int = ...


@_te.final
class Location:
    BOUNDARY: _t.ClassVar[_te.Self] = ...
    EXTERIOR: _t.ClassVar[_te.Self] = ...
    INTERIOR: _t.ClassVar[_te.Self] = ...

    @_t.overload
    def __eq__(self, other: _te.Self, /) -> bool:
        ...

    @_t.overload
    def __eq__(self, other: _t.Any, /) -> _t.Any:
        ...

    def __repr__(self) -> str:
        ...

    def __str__(self) -> str:
        ...


@_te.final
class Orientation:
    CLOCKWISE: _te.Self = ...
    COLLINEAR: _te.Self = ...
    COUNTERCLOCKWISE: _te.Self = ...

    @_t.overload
    def __eq__(self, other: _te.Self, /) -> bool:
        ...

    @_t.overload
    def __eq__(self, other: _t.Any, /) -> _t.Any:
        ...

    def __repr__(self) -> str:
        ...

    def __str__(self) -> str:
        ...


@_te.final
class Relation:
    COMPONENT: _te.ClassVar[_te.Self] = ...
    COMPOSITE: _te.ClassVar[_te.Self] = ...
    COVER: _te.ClassVar[_te.Self] = ...
    CROSS: _te.ClassVar[_te.Self] = ...
    DISJOINT: _te.ClassVar[_te.Self] = ...
    ENCLOSED: _te.ClassVar[_te.Self] = ...
    ENCLOSES: _te.ClassVar[_te.Self] = ...
    EQUAL: _te.ClassVar[_te.Self] = ...
    OVERLAP: _te.ClassVar[_te.Self] = ...
    TOUCH: _te.ClassVar[_te.Self] = ...
    WITHIN: _te.ClassVar[_te.Self] = ...

    @property
    def complement(self) -> _te.Self:
        ...

    @_t.overload
    def __eq__(self, other: _te.Self, /) -> bool:
        ...

    @_t.overload
    def __eq__(self, other: _t.Any, /) -> _t.Any:
        ...

    def __repr__(self) -> str:
        ...

    def __str__(self) -> str:
        ...
