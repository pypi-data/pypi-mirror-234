[tox]
envlist =
    lint,
    pkg,
    py,
    devel,
    coverage
skip_missing_interpreters = true

[testenv]
description =
  Run tests
  devel: with ansible-core devel branch and without dependencies constraints
commands_pre =
  sh -c "rm -f .tox/.coverage.* 2>/dev/null || true"
commands =
  coverage run --parallel --source pytest_ansible -m pytest -v --doctest-glob='*.md' {posargs}
  sh -c "coverage combine -a -q --data-file=.coverage .tox/.coverage.*"

passenv =
  HOME
  PYTEST_REQPASS  # needed for CI
  SETUPTOOLS_SCM_DEBUG
  SSL_CERT_FILE  # https proxies
  SSH_AUTH_SOCK # may be needed by git
  ANSIBLE_DEBUG
setenv =
  COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
  COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
  ANSIBLE_REMOTE_TEMP = {envdir}/.ansible-remote
  ANSIBLE_LOCAL_TEMP = {envdir}/.ansible-local
  PIP_CONSTRAINT = {toxinidir}/.config/requirements.txt
  devel: PIP_CONSTRAINT = /dev/null
  py37: PIP_CONSTRAINT = /dev/null
  py38: PIP_CONSTRAINT = /dev/null
extras =
  test
allowlist_externals =
  cat
  git
  rm
  sh
  tox
  coverage
deps =
  devel: ansible-core @ git+https://github.com/ansible/ansible.git  # GPLv3+
# https://tox.wiki/en/latest/upgrading.html#editable-mode
package = editable
usedevelop = true


[testenv:lint]
deps =
  pre-commit
commands =
  pre-commit --version

[testenv:clean]
description = Erase coverage data
deps = coverage[toml]
skip_install = true
commands =
  coverage erase

[testenv:deps]
description = Bump all test dependencies
# we reuse the lint environment
envdir = {toxworkdir}/lint
skip_install = true
basepython = python3.9
deps =
  {[testenv:lint]deps}
setenv =
  # without his upgrade would likely not do anything
  PIP_CONSTRAINT = /dev/null
commands =
  -pre-commit run --all-files --show-diff-on-failure --hook-stage manual lock
  -pre-commit run --all-files --show-diff-on-failure --hook-stage manual up
  # Update pre-commit hooks
  -pre-commit autoupdate
  # We fail if files are modified at the end
  git diff --exit-code

[testenv:pkg]
description =
    Do packaging/distribution
usedevelop = false
# don't install molecule itself in this env
skip_install = true
deps =
    build >= 0.9.0
    twine >= 4.0.2  # pyup: ignore
setenv =
commands =
    rm -rfv {toxinidir}/dist/
    python -m build \
      --outdir {toxinidir}/dist/ \
      {toxinidir}
    # metadata validation
    sh -c "python -m twine check --strict {toxinidir}/dist/*"

[testenv:coverage]
description = Combines and displays coverage results
skip_install = true
usedevelop = false
setenv =
  COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
  COVERAGE_FILE = {toxinidir}/.coverage
commands_pre =
commands =
  python3 -m coverage --version
  # needed by codecov github actions, also ignored result to reach report one.
  python3 -m coverage xml --fail-under=0
  # just for humans running it:
  python3 -m coverage report
deps =
  coverage[toml]>=7.0.5
