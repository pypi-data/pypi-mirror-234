"use strict";(self.webpackChunklightrail_jupyterlab=self.webpackChunklightrail_jupyterlab||[]).push([[384],{384:(t,e,s)=>{s.r(e),s.d(e,{LightrailClient:()=>o,Prompt:()=>i});var n=Object.defineProperty,r=(t,e,s)=>(((t,e,s)=>{e in t?n(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s})(t,"symbol"!=typeof e?e+"":e,s),s);class o{constructor(t,e){r(this,"_socket"),r(this,"_name"),r(this,"_handlers",{}),this._name=t,this._socket=e,this._socket.on("connect",(()=>{console.log("Connected to socket.io server"),this._socket.emit("register-client",t)})),this._socket.on("connect_error",(t=>{console.log("Connection error",t)})),this._socket.on("lightrail-message",((t,e,s)=>{this._processMessage(t,e,s)}))}_processMessage(t,e,s){const n=this._handlers[t];n&&n(e).then((t=>{s&&s(t)}))}sendMessageToMain(t,e,s,n){return new Promise((r=>{this._socket.emit("lightrail-message",t,e,s,n,(t=>{r(t)}))}))}registerHandler(t,e){this._handlers[t]=e}}class i{constructor(t,e){r(this,"_body",""),r(this,"_context",[]),r(this,"_json"),r(this,"_hydrated",!1),r(this,"_tracksManager"),this._json=t,this._tracksManager=e}appendContextItem(t){this._context.push(t)}appendText(t){this._body+=t}async hydrate(t,e){var s;const n=this._json.content;for(const r of n)if("text"===r.type)this.appendText(r.text);else if("token"===r.type){const n=this._tracksManager.getTokenHandle(r.attrs.track,r.attrs.name);if(!n)throw t.logger.error("Couldn't find token.",r.attrs),new Error(`Unknown token ${r.attrs.name}`);null!=(s=null==e?void 0:e[r.attrs.track])&&s[r.attrs.name]?await e[r.attrs.track][r.attrs.name](t,r.attrs.args,this,n.hydrate.bind(n)):await n.hydrate(t,r.attrs.args,this)}this._hydrated=!0}toString(){if(!this._hydrated)throw new Error("Prompt must be hydrated before converting to string; call `await prompt.hydrate(handle)` first.");let t=this._context.length>0?"Use the following context to help you respond. Each context item is delimited by the string '======' and starts with the item's title or identifier (i.e a filename, url, etc) as the first line (in backticks):\n\n":"";for(const e of this._context){switch(t+="======\n",e.type){case"code":t+="`"+e.title+"`\n\n",t+="```\n"+e.content+"\n```";break;case"text":t+="`"+e.title+"`\n\n",t+=e.content}t+="\n======\n\n"}return this._context.length>0&&(t+="Use the above context to respond to the following prompt:\n\n"),t+=this._body,t}}}}]);