"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import coupons as shared_coupons
from ..shared import duplicateconstraintviolationerror as shared_duplicateconstraintviolationerror
from ..shared import duplicateresourcecreationerror as shared_duplicateresourcecreationerror
from ..shared import featurenotavailableerror as shared_featurenotavailableerror
from ..shared import five_hundrederror as shared_five_hundrederror
from ..shared import four_hundred_and_oneerror as shared_four_hundred_and_oneerror
from ..shared import four_hundred_and_twenty_nineerror as shared_four_hundred_and_twenty_nineerror
from ..shared import idempotencyconflict as shared_idempotencyconflict
from ..shared import idempotencykeyvalidationerror as shared_idempotencykeyvalidationerror
from ..shared import idempotencyrequestmismatch as shared_idempotencyrequestmismatch
from ..shared import requesttoolargeerror as shared_requesttoolargeerror
from ..shared import requestvalidationerror as shared_requestvalidationerror
from ..shared import resourcenotfounderror as shared_resourcenotfounderror
from ..shared import resourcetoolargeerror as shared_resourcetoolargeerror
from ..shared import urlnotfound as shared_urlnotfound
from typing import Optional, Union



@dataclasses.dataclass
class ListCouponsRequest:
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    limit: Optional[int] = dataclasses.field(default=20, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    redemption_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'redemption_code', 'style': 'form', 'explode': True }})
    show_archived: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'show_archived', 'style': 'form', 'explode': True }})
    




@dataclasses.dataclass
class ListCouponsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    four_hundred_error: Optional[Union[shared_duplicateconstraintviolationerror.DuplicateConstraintViolationError, shared_duplicateresourcecreationerror.DuplicateResourceCreationError, shared_requestvalidationerror.RequestValidationError]] = dataclasses.field(default=None)
    r"""Bad Request"""
    four_hundred_and_one_error: Optional[shared_four_hundred_and_oneerror.FourHundredAndOneError] = dataclasses.field(default=None)
    r"""Unauthorized"""
    four_hundred_and_four_error: Optional[Union[shared_featurenotavailableerror.FeatureNotAvailableError, shared_resourcenotfounderror.ResourceNotFoundError, shared_urlnotfound.URLNotFound]] = dataclasses.field(default=None)
    r"""Not Found"""
    four_hundred_and_nine_error: Optional[Union[shared_idempotencyconflict.IdempotencyConflict, shared_idempotencykeyvalidationerror.IdempotencyKeyValidationError, shared_idempotencyrequestmismatch.IdempotencyRequestMismatch]] = dataclasses.field(default=None)
    r"""Conflict"""
    four_hundred_and_thirteen_error: Optional[Union[shared_requesttoolargeerror.RequestTooLargeError, shared_resourcetoolargeerror.ResourceTooLargeError]] = dataclasses.field(default=None)
    r"""Request Entity Too Large"""
    four_hundred_and_twenty_nine_error: Optional[shared_four_hundred_and_twenty_nineerror.FourHundredAndTwentyNineError] = dataclasses.field(default=None)
    r"""Too Many Requests"""
    five_hundred_error: Optional[shared_five_hundrederror.FiveHundredError] = dataclasses.field(default=None)
    r"""Internal Server Error"""
    coupons: Optional[shared_coupons.Coupons] = dataclasses.field(default=None)
    r"""OK"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

