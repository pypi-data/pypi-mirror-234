"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import bpsprice as shared_bpsprice
from ..shared import bulkbpsprice as shared_bulkbpsprice
from ..shared import bulkprice as shared_bulkprice
from ..shared import duplicateconstraintviolationerror as shared_duplicateconstraintviolationerror
from ..shared import duplicateresourcecreationerror as shared_duplicateresourcecreationerror
from ..shared import featurenotavailableerror as shared_featurenotavailableerror
from ..shared import five_hundrederror as shared_five_hundrederror
from ..shared import fivetranexampleprice as shared_fivetranexampleprice
from ..shared import four_hundred_and_oneerror as shared_four_hundred_and_oneerror
from ..shared import four_hundred_and_twenty_nineerror as shared_four_hundred_and_twenty_nineerror
from ..shared import idempotencyconflict as shared_idempotencyconflict
from ..shared import idempotencykeyvalidationerror as shared_idempotencykeyvalidationerror
from ..shared import idempotencyrequestmismatch as shared_idempotencyrequestmismatch
from ..shared import matrixprice as shared_matrixprice
from ..shared import packageprice as shared_packageprice
from ..shared import packagewithallocationprice as shared_packagewithallocationprice
from ..shared import requesttoolargeerror as shared_requesttoolargeerror
from ..shared import requestvalidationerror as shared_requestvalidationerror
from ..shared import resourcenotfounderror as shared_resourcenotfounderror
from ..shared import resourcetoolargeerror as shared_resourcetoolargeerror
from ..shared import testratingfunctionprice as shared_testratingfunctionprice
from ..shared import thresholdtotalamountprice as shared_thresholdtotalamountprice
from ..shared import tieredbpsprice as shared_tieredbpsprice
from ..shared import tieredpackageprice as shared_tieredpackageprice
from ..shared import tieredprice as shared_tieredprice
from ..shared import tieredwithminimumprice as shared_tieredwithminimumprice
from ..shared import unitprice as shared_unitprice
from ..shared import urlnotfound as shared_urlnotfound
from typing import Optional, Union



@dataclasses.dataclass
class FetchPriceExternalIDRequest:
    external_price_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'external_price_id', 'style': 'simple', 'explode': False }})
    




@dataclasses.dataclass
class FetchPriceExternalIDResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    four_hundred_error: Optional[Union[shared_duplicateconstraintviolationerror.DuplicateConstraintViolationError, shared_duplicateresourcecreationerror.DuplicateResourceCreationError, shared_requestvalidationerror.RequestValidationError]] = dataclasses.field(default=None)
    r"""Bad Request"""
    four_hundred_and_one_error: Optional[shared_four_hundred_and_oneerror.FourHundredAndOneError] = dataclasses.field(default=None)
    r"""Unauthorized"""
    four_hundred_and_four_error: Optional[Union[shared_featurenotavailableerror.FeatureNotAvailableError, shared_resourcenotfounderror.ResourceNotFoundError, shared_urlnotfound.URLNotFound]] = dataclasses.field(default=None)
    r"""Not Found"""
    four_hundred_and_nine_error: Optional[Union[shared_idempotencyconflict.IdempotencyConflict, shared_idempotencykeyvalidationerror.IdempotencyKeyValidationError, shared_idempotencyrequestmismatch.IdempotencyRequestMismatch]] = dataclasses.field(default=None)
    r"""Conflict"""
    four_hundred_and_thirteen_error: Optional[Union[shared_requesttoolargeerror.RequestTooLargeError, shared_resourcetoolargeerror.ResourceTooLargeError]] = dataclasses.field(default=None)
    r"""Request Entity Too Large"""
    four_hundred_and_twenty_nine_error: Optional[shared_four_hundred_and_twenty_nineerror.FourHundredAndTwentyNineError] = dataclasses.field(default=None)
    r"""Too Many Requests"""
    five_hundred_error: Optional[shared_five_hundrederror.FiveHundredError] = dataclasses.field(default=None)
    r"""Internal Server Error"""
    price: Optional[Union[shared_unitprice.UnitPrice, shared_packageprice.PackagePrice, shared_matrixprice.MatrixPrice, shared_tieredprice.TieredPrice, shared_tieredbpsprice.TieredBpsPrice, shared_bpsprice.BpsPrice, shared_bulkbpsprice.BulkBpsPrice, shared_bulkprice.BulkPrice, shared_testratingfunctionprice.TestRatingFunctionPrice, shared_fivetranexampleprice.FivetranExamplePrice, shared_thresholdtotalamountprice.ThresholdTotalAmountPrice, shared_tieredpackageprice.TieredPackagePrice, shared_tieredwithminimumprice.TieredWithMinimumPrice, shared_packagewithallocationprice.PackageWithAllocationPrice]] = dataclasses.field(default=None)
    r"""OK"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

