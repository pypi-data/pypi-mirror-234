# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PhysicsSwig
else:
    import _PhysicsSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _PhysicsSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PhysicsSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _PhysicsSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _PhysicsSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _PhysicsSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PhysicsSwig:
_PhysicsSwig.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Math
class Body(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Body class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Body self) -> Body"""
        _PhysicsSwig.Body_swiginit(self, _PhysicsSwig.new_Body())

    def inertia(self):
        r"""inertia(Body self) -> std::shared_ptr< Physics::Inertia >"""
        return _PhysicsSwig.Body_inertia(self)

    def kinematics(self):
        r"""kinematics(Body self) -> std::shared_ptr< Physics::Kinematics >"""
        return _PhysicsSwig.Body_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Body self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Body_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Body self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Body_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Body self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Body_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Body self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Body_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Body self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Body_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Body self)"""
        return _PhysicsSwig.Body_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Body

# Register Body in _PhysicsSwig:
_PhysicsSwig.Body_swigregister(Body)

class Charge(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Charge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charge self) -> Charge"""
        _PhysicsSwig.Charge_swiginit(self, _PhysicsSwig.new_Charge())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charge self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Charge_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charge self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Charge_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charge self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Charge_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charge self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Charge_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charge self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Charge_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charge self)"""
        return _PhysicsSwig.Charge_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Charge

# Register Charge in _PhysicsSwig:
_PhysicsSwig.Charge_swigregister(Charge)

class Geometry(Charge):
    r"""Proxy of C++ Physics::Geometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Geometry self) -> Geometry"""
        _PhysicsSwig.Geometry_swiginit(self, _PhysicsSwig.new_Geometry())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Geometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Geometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Geometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Geometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Geometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Geometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Geometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Geometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Geometry self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Geometry_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Geometry self)"""
        return _PhysicsSwig.Geometry_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Geometry

# Register Geometry in _PhysicsSwig:
_PhysicsSwig.Geometry_swigregister(Geometry)

class Inertia(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Inertia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Inertia self) -> Inertia"""
        _PhysicsSwig.Inertia_swiginit(self, _PhysicsSwig.new_Inertia())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Inertia self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Inertia_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Inertia self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Inertia_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Inertia self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Inertia_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Inertia self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Inertia_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Inertia self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Inertia_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Inertia self)"""
        return _PhysicsSwig.Inertia_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Inertia

# Register Inertia in _PhysicsSwig:
_PhysicsSwig.Inertia_swigregister(Inertia)

class Interaction(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Interaction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interaction self) -> Interaction"""
        _PhysicsSwig.Interaction_swiginit(self, _PhysicsSwig.new_Interaction())

    def enabled(self):
        r"""enabled(Interaction self) -> bool"""
        return _PhysicsSwig.Interaction_enabled(self)

    def charges(self):
        r"""charges(Interaction self) -> Physics_Charge_Vector"""
        return _PhysicsSwig.Interaction_charges(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interaction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interaction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interaction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interaction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interaction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interaction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interaction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interaction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interaction self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interaction_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interaction self)"""
        return _PhysicsSwig.Interaction_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interaction

# Register Interaction in _PhysicsSwig:
_PhysicsSwig.Interaction_swigregister(Interaction)

class Kinematics(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Kinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Kinematics self) -> Kinematics"""
        _PhysicsSwig.Kinematics_swiginit(self, _PhysicsSwig.new_Kinematics())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Kinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Kinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Kinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Kinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Kinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Kinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Kinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Kinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Kinematics self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Kinematics_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Kinematics self)"""
        return _PhysicsSwig.Kinematics_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Kinematics

# Register Kinematics in _PhysicsSwig:
_PhysicsSwig.Kinematics_swigregister(Kinematics)

class System(rebrick.Core.Object):
    r"""Proxy of C++ Physics::System class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(System self) -> System"""
        _PhysicsSwig.System_swiginit(self, _PhysicsSwig.new_System())

    def setDynamic(self, key, value):
        r"""
        setDynamic(System self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.System_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(System self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.System_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(System self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.System_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(System self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.System_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(System self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.System_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(System self)"""
        return _PhysicsSwig.System_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_System

# Register System in _PhysicsSwig:
_PhysicsSwig.System_swigregister(System)

class Physics_Body_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Body > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Body_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Body_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Body_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Body_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::size_type"""
        return _PhysicsSwig.Physics_Body_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Body > >::difference_type j) -> Physics_Body_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Body_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Body > >::difference_type

        __setslice__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Body > >::difference_type j, Physics_Body_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Body > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Body >,std::allocator< std::shared_ptr< Physics::Body > > > const &

        """
        return _PhysicsSwig.Physics_Body_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Body_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Body > >::difference_type

        __delitem__(Physics_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Body_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Body_Vector self, PySliceObject * slice) -> Physics_Body_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Body_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Body_Vector self, PySliceObject * slice, Physics_Body_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Body >,std::allocator< std::shared_ptr< Physics::Body > > > const &

        __setitem__(Physics_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Body > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Body > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Body_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::value_type"""
        return _PhysicsSwig.Physics_Body_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Body_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Body_Vector_empty(self)

    def size(self):
        r"""size(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::size_type"""
        return _PhysicsSwig.Physics_Body_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Body_Vector self, Physics_Body_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Body > > &

        """
        return _PhysicsSwig.Physics_Body_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::iterator"""
        return _PhysicsSwig.Physics_Body_Vector_begin(self)

    def end(self):
        r"""end(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::iterator"""
        return _PhysicsSwig.Physics_Body_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Body_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Body_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Body_Vector self)"""
        return _PhysicsSwig.Physics_Body_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::allocator_type"""
        return _PhysicsSwig.Physics_Body_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Body_Vector self)"""
        return _PhysicsSwig.Physics_Body_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Body > >::iterator

        erase(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::iterator first, std::vector< std::shared_ptr< Physics::Body > >::iterator last) -> std::vector< std::shared_ptr< Physics::Body > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Body > >::iterator
        last: std::vector< std::shared_ptr< Physics::Body > >::iterator

        """
        return _PhysicsSwig.Physics_Body_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Body_Vector self) -> Physics_Body_Vector
        __init__(Physics_Body_Vector self, Physics_Body_Vector other) -> Physics_Body_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Body > > const &

        __init__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::size_type size) -> Physics_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Body > >::size_type

        __init__(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::size_type size, std::vector< std::shared_ptr< Physics::Body > >::value_type const & value) -> Physics_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Body > >::size_type
        value: std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        """
        _PhysicsSwig.Physics_Body_Vector_swiginit(self, _PhysicsSwig.new_Physics_Body_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Body_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::value_type const &"""
        return _PhysicsSwig.Physics_Body_Vector_front(self)

    def back(self):
        r"""back(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::value_type const &"""
        return _PhysicsSwig.Physics_Body_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::size_type n, std::vector< std::shared_ptr< Physics::Body > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Body_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Body > >::size_type

        resize(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::size_type new_size, std::vector< std::shared_ptr< Physics::Body > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Body_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::iterator pos, std::vector< std::shared_ptr< Physics::Body > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Body > >::iterator
        x: std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        insert(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::iterator pos, std::vector< std::shared_ptr< Physics::Body > >::size_type n, std::vector< std::shared_ptr< Physics::Body > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Body > >::iterator
        n: std::vector< std::shared_ptr< Physics::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Body_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Body_Vector self, std::vector< std::shared_ptr< Physics::Body > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Body > >::size_type

        """
        return _PhysicsSwig.Physics_Body_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Body > >::size_type"""
        return _PhysicsSwig.Physics_Body_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Body_Vector

# Register Physics_Body_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Body_Vector_swigregister(Physics_Body_Vector)

class Physics_Charge_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Charge > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Charge_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Charge_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charge_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charge_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charge_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charge > >::difference_type j) -> Physics_Charge_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charge > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charge_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charge > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charge > >::difference_type

        __setslice__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charge > >::difference_type j, Physics_Charge_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charge > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charge > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Charge >,std::allocator< std::shared_ptr< Physics::Charge > > > const &

        """
        return _PhysicsSwig.Physics_Charge_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charge > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charge_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charge > >::difference_type

        __delitem__(Physics_Charge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Charge_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Charge_Vector self, PySliceObject * slice) -> Physics_Charge_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charge_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Charge_Vector self, PySliceObject * slice, Physics_Charge_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Charge >,std::allocator< std::shared_ptr< Physics::Charge > > > const &

        __setitem__(Physics_Charge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charge > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charge > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charge_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::value_type"""
        return _PhysicsSwig.Physics_Charge_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charge_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charge_Vector_empty(self)

    def size(self):
        r"""size(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charge_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Charge_Vector self, Physics_Charge_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Charge > > &

        """
        return _PhysicsSwig.Physics_Charge_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::iterator"""
        return _PhysicsSwig.Physics_Charge_Vector_begin(self)

    def end(self):
        r"""end(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::iterator"""
        return _PhysicsSwig.Physics_Charge_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charge_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charge_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Charge_Vector self)"""
        return _PhysicsSwig.Physics_Charge_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::allocator_type"""
        return _PhysicsSwig.Physics_Charge_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Charge_Vector self)"""
        return _PhysicsSwig.Physics_Charge_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Charge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charge > >::iterator

        erase(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::iterator first, std::vector< std::shared_ptr< Physics::Charge > >::iterator last) -> std::vector< std::shared_ptr< Physics::Charge > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Charge > >::iterator
        last: std::vector< std::shared_ptr< Physics::Charge > >::iterator

        """
        return _PhysicsSwig.Physics_Charge_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Charge_Vector self) -> Physics_Charge_Vector
        __init__(Physics_Charge_Vector self, Physics_Charge_Vector other) -> Physics_Charge_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Charge > > const &

        __init__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::size_type size) -> Physics_Charge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Charge > >::size_type

        __init__(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::size_type size, std::vector< std::shared_ptr< Physics::Charge > >::value_type const & value) -> Physics_Charge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Charge > >::size_type
        value: std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        """
        _PhysicsSwig.Physics_Charge_Vector_swiginit(self, _PhysicsSwig.new_Physics_Charge_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charge_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::value_type const &"""
        return _PhysicsSwig.Physics_Charge_Vector_front(self)

    def back(self):
        r"""back(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::value_type const &"""
        return _PhysicsSwig.Physics_Charge_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::size_type n, std::vector< std::shared_ptr< Physics::Charge > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Charge > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charge_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Charge > >::size_type

        resize(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::size_type new_size, std::vector< std::shared_ptr< Physics::Charge > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Charge > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charge_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::iterator pos, std::vector< std::shared_ptr< Physics::Charge > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Charge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charge > >::iterator
        x: std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        insert(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::iterator pos, std::vector< std::shared_ptr< Physics::Charge > >::size_type n, std::vector< std::shared_ptr< Physics::Charge > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charge > >::iterator
        n: std::vector< std::shared_ptr< Physics::Charge > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charge_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charge > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Charge > >::size_type

        """
        return _PhysicsSwig.Physics_Charge_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charge_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charge_Vector

# Register Physics_Charge_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Charge_Vector_swigregister(Physics_Charge_Vector)

class Physics_Geometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Geometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Geometry_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Geometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Geometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Geometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Geometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Geometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::size_type"""
        return _PhysicsSwig.Physics_Geometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type j) -> Physics_Geometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Geometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type

        __setslice__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type j, Physics_Geometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Geometry >,std::allocator< std::shared_ptr< Physics::Geometry > > > const &

        """
        return _PhysicsSwig.Physics_Geometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Geometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type

        __delitem__(Physics_Geometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Geometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Geometry_Vector self, PySliceObject * slice) -> Physics_Geometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Geometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Geometry_Vector self, PySliceObject * slice, Physics_Geometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Geometry >,std::allocator< std::shared_ptr< Physics::Geometry > > > const &

        __setitem__(Physics_Geometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Geometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Geometry > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Geometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::value_type"""
        return _PhysicsSwig.Physics_Geometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Geometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Geometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Geometry_Vector_empty(self)

    def size(self):
        r"""size(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::size_type"""
        return _PhysicsSwig.Physics_Geometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Geometry_Vector self, Physics_Geometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Geometry > > &

        """
        return _PhysicsSwig.Physics_Geometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::iterator"""
        return _PhysicsSwig.Physics_Geometry_Vector_begin(self)

    def end(self):
        r"""end(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::iterator"""
        return _PhysicsSwig.Physics_Geometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Geometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Geometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Geometry_Vector self)"""
        return _PhysicsSwig.Physics_Geometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::allocator_type"""
        return _PhysicsSwig.Physics_Geometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Geometry_Vector self)"""
        return _PhysicsSwig.Physics_Geometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Geometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Geometry > >::iterator

        erase(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::iterator first, std::vector< std::shared_ptr< Physics::Geometry > >::iterator last) -> std::vector< std::shared_ptr< Physics::Geometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Geometry > >::iterator
        last: std::vector< std::shared_ptr< Physics::Geometry > >::iterator

        """
        return _PhysicsSwig.Physics_Geometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Geometry_Vector self) -> Physics_Geometry_Vector
        __init__(Physics_Geometry_Vector self, Physics_Geometry_Vector other) -> Physics_Geometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Geometry > > const &

        __init__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::size_type size) -> Physics_Geometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Geometry > >::size_type

        __init__(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::size_type size, std::vector< std::shared_ptr< Physics::Geometry > >::value_type const & value) -> Physics_Geometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Geometry > >::size_type
        value: std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        """
        _PhysicsSwig.Physics_Geometry_Vector_swiginit(self, _PhysicsSwig.new_Physics_Geometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Geometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &"""
        return _PhysicsSwig.Physics_Geometry_Vector_front(self)

    def back(self):
        r"""back(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &"""
        return _PhysicsSwig.Physics_Geometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::size_type n, std::vector< std::shared_ptr< Physics::Geometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Geometry > >::size_type
        x: std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Geometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Geometry > >::size_type

        resize(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::size_type new_size, std::vector< std::shared_ptr< Physics::Geometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Geometry > >::size_type
        x: std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Geometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::iterator pos, std::vector< std::shared_ptr< Physics::Geometry > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Geometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Geometry > >::iterator
        x: std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        insert(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::iterator pos, std::vector< std::shared_ptr< Physics::Geometry > >::size_type n, std::vector< std::shared_ptr< Physics::Geometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Geometry > >::iterator
        n: std::vector< std::shared_ptr< Physics::Geometry > >::size_type
        x: std::vector< std::shared_ptr< Physics::Geometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Geometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Geometry_Vector self, std::vector< std::shared_ptr< Physics::Geometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Geometry > >::size_type

        """
        return _PhysicsSwig.Physics_Geometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics::Geometry > >::size_type"""
        return _PhysicsSwig.Physics_Geometry_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Geometry_Vector

# Register Physics_Geometry_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Geometry_Vector_swigregister(Physics_Geometry_Vector)

class Physics_Inertia_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Inertia > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Inertia_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Inertia_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Inertia_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Inertia_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Inertia_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type j) -> Physics_Inertia_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Inertia_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type

        __setslice__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type j, Physics_Inertia_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Inertia >,std::allocator< std::shared_ptr< Physics::Inertia > > > const &

        """
        return _PhysicsSwig.Physics_Inertia_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Inertia_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type

        __delitem__(Physics_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Inertia_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Inertia_Vector self, PySliceObject * slice) -> Physics_Inertia_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Inertia_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Inertia_Vector self, PySliceObject * slice, Physics_Inertia_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Inertia >,std::allocator< std::shared_ptr< Physics::Inertia > > > const &

        __setitem__(Physics_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Inertia > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Inertia > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Inertia_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::value_type"""
        return _PhysicsSwig.Physics_Inertia_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Inertia_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Inertia_Vector_empty(self)

    def size(self):
        r"""size(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Inertia_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Inertia_Vector self, Physics_Inertia_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Inertia > > &

        """
        return _PhysicsSwig.Physics_Inertia_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::iterator"""
        return _PhysicsSwig.Physics_Inertia_Vector_begin(self)

    def end(self):
        r"""end(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::iterator"""
        return _PhysicsSwig.Physics_Inertia_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Inertia_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Inertia_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Inertia_Vector self)"""
        return _PhysicsSwig.Physics_Inertia_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::allocator_type"""
        return _PhysicsSwig.Physics_Inertia_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Inertia_Vector self)"""
        return _PhysicsSwig.Physics_Inertia_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Inertia > >::iterator

        erase(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::iterator first, std::vector< std::shared_ptr< Physics::Inertia > >::iterator last) -> std::vector< std::shared_ptr< Physics::Inertia > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Inertia > >::iterator
        last: std::vector< std::shared_ptr< Physics::Inertia > >::iterator

        """
        return _PhysicsSwig.Physics_Inertia_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Inertia_Vector self) -> Physics_Inertia_Vector
        __init__(Physics_Inertia_Vector self, Physics_Inertia_Vector other) -> Physics_Inertia_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Inertia > > const &

        __init__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::size_type size) -> Physics_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Inertia > >::size_type

        __init__(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::size_type size, std::vector< std::shared_ptr< Physics::Inertia > >::value_type const & value) -> Physics_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Inertia > >::size_type
        value: std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        """
        _PhysicsSwig.Physics_Inertia_Vector_swiginit(self, _PhysicsSwig.new_Physics_Inertia_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Inertia_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &"""
        return _PhysicsSwig.Physics_Inertia_Vector_front(self)

    def back(self):
        r"""back(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &"""
        return _PhysicsSwig.Physics_Inertia_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::size_type n, std::vector< std::shared_ptr< Physics::Inertia > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Inertia_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Inertia > >::size_type

        resize(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::size_type new_size, std::vector< std::shared_ptr< Physics::Inertia > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Inertia_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::iterator pos, std::vector< std::shared_ptr< Physics::Inertia > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Inertia > >::iterator
        x: std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        insert(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::iterator pos, std::vector< std::shared_ptr< Physics::Inertia > >::size_type n, std::vector< std::shared_ptr< Physics::Inertia > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Inertia > >::iterator
        n: std::vector< std::shared_ptr< Physics::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Inertia_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Inertia > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Inertia > >::size_type

        """
        return _PhysicsSwig.Physics_Inertia_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Inertia_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Inertia_Vector

# Register Physics_Inertia_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Inertia_Vector_swigregister(Physics_Inertia_Vector)

class Physics_Interaction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interaction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interaction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interaction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interaction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interaction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interaction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type j) -> Physics_Interaction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interaction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type

        __setslice__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type j, Physics_Interaction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interaction >,std::allocator< std::shared_ptr< Physics::Interaction > > > const &

        """
        return _PhysicsSwig.Physics_Interaction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interaction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type

        __delitem__(Physics_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interaction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interaction_Vector self, PySliceObject * slice) -> Physics_Interaction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interaction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interaction_Vector self, PySliceObject * slice, Physics_Interaction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interaction >,std::allocator< std::shared_ptr< Physics::Interaction > > > const &

        __setitem__(Physics_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interaction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interaction > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interaction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::value_type"""
        return _PhysicsSwig.Physics_Interaction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interaction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interaction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interaction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interaction_Vector self, Physics_Interaction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interaction > > &

        """
        return _PhysicsSwig.Physics_Interaction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::iterator"""
        return _PhysicsSwig.Physics_Interaction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::iterator"""
        return _PhysicsSwig.Physics_Interaction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interaction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interaction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interaction_Vector self)"""
        return _PhysicsSwig.Physics_Interaction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interaction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interaction_Vector self)"""
        return _PhysicsSwig.Physics_Interaction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interaction > >::iterator

        erase(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::iterator first, std::vector< std::shared_ptr< Physics::Interaction > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interaction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interaction > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interaction > >::iterator

        """
        return _PhysicsSwig.Physics_Interaction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interaction_Vector self) -> Physics_Interaction_Vector
        __init__(Physics_Interaction_Vector self, Physics_Interaction_Vector other) -> Physics_Interaction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interaction > > const &

        __init__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::size_type size) -> Physics_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interaction > >::size_type

        __init__(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::size_type size, std::vector< std::shared_ptr< Physics::Interaction > >::value_type const & value) -> Physics_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interaction > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interaction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interaction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interaction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interaction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interaction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::size_type n, std::vector< std::shared_ptr< Physics::Interaction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interaction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interaction > >::size_type

        resize(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interaction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interaction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::iterator pos, std::vector< std::shared_ptr< Physics::Interaction > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interaction > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        insert(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::iterator pos, std::vector< std::shared_ptr< Physics::Interaction > >::size_type n, std::vector< std::shared_ptr< Physics::Interaction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interaction > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interaction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interaction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interaction > >::size_type

        """
        return _PhysicsSwig.Physics_Interaction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interaction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interaction_Vector

# Register Physics_Interaction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interaction_Vector_swigregister(Physics_Interaction_Vector)

class Physics_Kinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Kinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Kinematics_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Kinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Kinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Kinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Kinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type j) -> Physics_Kinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Kinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type

        __setslice__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type j, Physics_Kinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Kinematics >,std::allocator< std::shared_ptr< Physics::Kinematics > > > const &

        """
        return _PhysicsSwig.Physics_Kinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Kinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type

        __delitem__(Physics_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Kinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Kinematics_Vector self, PySliceObject * slice) -> Physics_Kinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Kinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Kinematics_Vector self, PySliceObject * slice, Physics_Kinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Kinematics >,std::allocator< std::shared_ptr< Physics::Kinematics > > > const &

        __setitem__(Physics_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Kinematics > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Kinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::value_type"""
        return _PhysicsSwig.Physics_Kinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Kinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Kinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Kinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Kinematics_Vector self, Physics_Kinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Kinematics > > &

        """
        return _PhysicsSwig.Physics_Kinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::iterator"""
        return _PhysicsSwig.Physics_Kinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::iterator"""
        return _PhysicsSwig.Physics_Kinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Kinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Kinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Kinematics_Vector self)"""
        return _PhysicsSwig.Physics_Kinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::allocator_type"""
        return _PhysicsSwig.Physics_Kinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Kinematics_Vector self)"""
        return _PhysicsSwig.Physics_Kinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Kinematics > >::iterator

        erase(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::iterator first, std::vector< std::shared_ptr< Physics::Kinematics > >::iterator last) -> std::vector< std::shared_ptr< Physics::Kinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Kinematics > >::iterator
        last: std::vector< std::shared_ptr< Physics::Kinematics > >::iterator

        """
        return _PhysicsSwig.Physics_Kinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Kinematics_Vector self) -> Physics_Kinematics_Vector
        __init__(Physics_Kinematics_Vector self, Physics_Kinematics_Vector other) -> Physics_Kinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Kinematics > > const &

        __init__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::size_type size) -> Physics_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Kinematics > >::size_type

        __init__(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::size_type size, std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const & value) -> Physics_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Kinematics > >::size_type
        value: std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        """
        _PhysicsSwig.Physics_Kinematics_Vector_swiginit(self, _PhysicsSwig.new_Physics_Kinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Kinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &"""
        return _PhysicsSwig.Physics_Kinematics_Vector_front(self)

    def back(self):
        r"""back(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &"""
        return _PhysicsSwig.Physics_Kinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::size_type n, std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Kinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Kinematics > >::size_type

        resize(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::size_type new_size, std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Kinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::iterator pos, std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Kinematics > >::iterator
        x: std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        insert(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::iterator pos, std::vector< std::shared_ptr< Physics::Kinematics > >::size_type n, std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Kinematics > >::iterator
        n: std::vector< std::shared_ptr< Physics::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Kinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Kinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Kinematics > >::size_type

        """
        return _PhysicsSwig.Physics_Kinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Kinematics_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Kinematics_Vector

# Register Physics_Kinematics_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Kinematics_Vector_swigregister(Physics_Kinematics_Vector)

class Physics_System_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::System > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_System_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_System_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::difference_type j) -> Physics_System_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics::System > >::difference_type

        __setslice__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::difference_type j, Physics_System_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics::System > >::difference_type
        v: std::vector< std::shared_ptr< Physics::System >,std::allocator< std::shared_ptr< Physics::System > > > const &

        """
        return _PhysicsSwig.Physics_System_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type

        __delitem__(Physics_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_System_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_System_Vector self, PySliceObject * slice) -> Physics_System_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i) -> std::vector< std::shared_ptr< Physics::System > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_System_Vector self, PySliceObject * slice, Physics_System_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::System >,std::allocator< std::shared_ptr< Physics::System > > > const &

        __setitem__(Physics_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::value_type"""
        return _PhysicsSwig.Physics_System_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector_empty(self)

    def size(self):
        r"""size(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_System_Vector self, Physics_System_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::System > > &

        """
        return _PhysicsSwig.Physics_System_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::iterator"""
        return _PhysicsSwig.Physics_System_Vector_begin(self)

    def end(self):
        r"""end(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::iterator"""
        return _PhysicsSwig.Physics_System_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::reverse_iterator"""
        return _PhysicsSwig.Physics_System_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::reverse_iterator"""
        return _PhysicsSwig.Physics_System_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_System_Vector self)"""
        return _PhysicsSwig.Physics_System_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::allocator_type"""
        return _PhysicsSwig.Physics_System_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_System_Vector self)"""
        return _PhysicsSwig.Physics_System_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::iterator pos) -> std::vector< std::shared_ptr< Physics::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::System > >::iterator

        erase(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::iterator first, std::vector< std::shared_ptr< Physics::System > >::iterator last) -> std::vector< std::shared_ptr< Physics::System > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::System > >::iterator
        last: std::vector< std::shared_ptr< Physics::System > >::iterator

        """
        return _PhysicsSwig.Physics_System_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_System_Vector self) -> Physics_System_Vector
        __init__(Physics_System_Vector self, Physics_System_Vector other) -> Physics_System_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::System > > const &

        __init__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type size) -> Physics_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::System > >::size_type

        __init__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type size, std::vector< std::shared_ptr< Physics::System > >::value_type const & value) -> Physics_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::System > >::size_type
        value: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        _PhysicsSwig.Physics_System_Vector_swiginit(self, _PhysicsSwig.new_Physics_System_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::value_type const &"""
        return _PhysicsSwig.Physics_System_Vector_front(self)

    def back(self):
        r"""back(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::value_type const &"""
        return _PhysicsSwig.Physics_System_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type n, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::System > >::size_type
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::System > >::size_type

        resize(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type new_size, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::System > >::size_type
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::iterator pos, std::vector< std::shared_ptr< Physics::System > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::System > >::iterator
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        insert(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::iterator pos, std::vector< std::shared_ptr< Physics::System > >::size_type n, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::System > >::iterator
        n: std::vector< std::shared_ptr< Physics::System > >::size_type
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::System > >::size_type

        """
        return _PhysicsSwig.Physics_System_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_System_Vector

# Register Physics_System_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_System_Vector_swigregister(Physics_System_Vector)



