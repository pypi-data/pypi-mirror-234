window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "mathmat", "modulename": "mathmat", "kind": "module", "doc": "<p>MathMat is a matrix library built on NumPy that tries to reuse\nexisting data from past computations whenever possible.</p>\n\n<p>The functionality is built around the Matrix class, which represents\na matrix as an array of data plus a dictionary of properties. As\nproperties are checked and/or computed, existing information is reused\nwhen possible to speed up new computations.</p>\n\n<p>MathMat also provides utilities for performing matrix factorizations\nvia the <code>factor</code> submodule, solving linear systems via the <code>solve</code>\nsubmodule, and visualizations using the <code>plot</code> submodule.</p>\n"}, {"fullname": "mathmat.factor", "modulename": "mathmat.factor", "kind": "module", "doc": "<p>MathMat Matrix Factorization Toolbox.</p>\n"}, {"fullname": "mathmat.factor.cholesky", "modulename": "mathmat.factor", "qualname": "cholesky", "kind": "function", "doc": "<p>Compute the Cholesky factorization $M = L L^H$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.factor.diagonalization", "modulename": "mathmat.factor", "qualname": "diagonalization", "kind": "function", "doc": "<p>Compute the eigenvalue decomposition $M = P D P^{-1}$. Densifies.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.factor.lu", "modulename": "mathmat.factor", "qualname": "lu", "kind": "function", "doc": "<p>Compute the pivoted LU factorization $M = P L U$.\nIf the matrix is sparse, returns an object that can be used to solve\nlinear systems.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>, </span><span class=\"param\"><span class=\"n\">densify</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.factor.qr", "modulename": "mathmat.factor", "qualname": "qr", "kind": "function", "doc": "<p>Compute the QR factorization $M = QR$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.factor.svd", "modulename": "mathmat.factor", "qualname": "svd", "kind": "function", "doc": "<p>Compute the SVD $M = U \\Sigma V^H$.</p>\n\n<p>Note that for sparse matrices, there is a limit set by sparse.svds\nas to how many singular values can be found! <code>max</code> is set to half\nof the minimum dimension</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span>, </span><span class=\"param\"><span class=\"n\">sp_k</span><span class=\"o\">=</span><span class=\"s1\">&#39;max&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat", "modulename": "mathmat.mathmat", "kind": "module", "doc": "<p>MathMat is a mathematically aware matrix library for Python.</p>\n\n<p>See the Matrix class for more details.</p>\n"}, {"fullname": "mathmat.mathmat.EPS", "modulename": "mathmat.mathmat", "qualname": "EPS", "kind": "variable", "doc": "<p></p>\n", "default_value": "2.220446049250313e-16"}, {"fullname": "mathmat.mathmat.uniquetol", "modulename": "mathmat.mathmat", "qualname": "uniquetol", "kind": "function", "doc": "<p>Find and return the unique elements of <code>arr</code> within a <code>tolerance</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.MatrixSizeException", "modulename": "mathmat.mathmat", "qualname": "MatrixSizeException", "kind": "class", "doc": "<p>A <code>MatrixSizeException</code> is raised when two matrices have\nincompatible sizes for an operation, usually multiplication.</p>\n", "bases": "builtins.Exception"}, {"fullname": "mathmat.mathmat.MatrixSizeException.__init__", "modulename": "mathmat.mathmat", "qualname": "MatrixSizeException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">operation</span></span>)</span>"}, {"fullname": "mathmat.mathmat.MatrixTypeException", "modulename": "mathmat.mathmat", "qualname": "MatrixTypeException", "kind": "class", "doc": "<p>A <code>MatrixTypeException</code> is raised when a matrix does not satisfy\nthe requirements of an attempted operation.</p>\n", "bases": "builtins.Exception"}, {"fullname": "mathmat.mathmat.MatrixTypeException.__init__", "modulename": "mathmat.mathmat", "qualname": "MatrixTypeException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">operation</span>, </span><span class=\"param\"><span class=\"n\">req_type</span></span>)</span>"}, {"fullname": "mathmat.mathmat.Matrix", "modulename": "mathmat.mathmat", "qualname": "Matrix", "kind": "class", "doc": "<p>A Matrix object is an immutable representation of a matrix.</p>\n\n<p>In addition to the entries, the Matrix keeps track of\ncomputations which have been performed on it, and reuses\nexisting computations whenever possible. Thus, a Matrix\nobject is \"aware\" of linear algebra theorems.</p>\n\n<p>Each Computable Property can be either:</p>\n\n<ol>\n<li>unset (default), in which case the corresponding\nfunction will be called to compute it.</li>\n<li>set to a callable, in which case that callable\nwill be called to compute it.</li>\n<li>set to a value, which will be returned immediately.</li>\n</ol>\n\n<p>List of Computable Properties:</p>\n\n<ul>\n<li>complex        : <code>True</code> if $M$ has complex entries</li>\n<li>conjugate      : The complex conjugate of $M$</li>\n<li>cond_2         : Condition number in 2-norm</li>\n<li>determinant    : <code>det(M)</code></li>\n<li>diagonal       : <code>True</code> if $M$ is zero except for main diag.</li>\n<li>diagonalizable : <code>True</code> if $M = P D P^{-1}$</li>\n<li>eigenvalues    : The eigenvalues of $M$</li>\n<li>eigenvectors   : The right eigenvectors of M</li>\n<li>hermitian      : <code>True</code> if conjugate transpose of $M$ equals $M$</li>\n<li>inverse        : if it exists, M^{-1}</li>\n<li>invertible     : <code>True</code> if M^{-1} exists</li>\n<li>lin_solver     : A function to solve Ax = b for x.</li>\n<li>norm_2         : The 2-norm of the matrix</li>\n<li>normal         : <code>True</code> if $M M^H = M^H M$</li>\n<li>nullity        : <code>dim(Kernel(M))</code></li>\n<li>orthogonal     : <code>True</code> if $M^T = M^{-1}$</li>\n<li>posdef         : <code>True</code> if $M$ is positive definite</li>\n<li>qr             : The <code>(Q, R)</code> factorization of $M$</li>\n<li>rank           : <code>dim(Col(M))</code></li>\n<li>sigmas         : Singular values of $M$</li>\n<li>sparsity       : The fraction of zero entries in $M$</li>\n<li>square         : <code>True</code> if $M$ is square</li>\n<li>svd            : The SVD <code>(U, S, V)</code> of $M$</li>\n<li>symmetric      : <code>True</code> if $M = M^T$</li>\n<li>trace          : The trace of $M$</li>\n<li>transpose      : $M^T$</li>\n<li>triangular_L   : <code>True</code> if $M$ is lower triangular.</li>\n<li>triangular_U   : <code>True</code> if $M$ is upper triangular.</li>\n<li>unitary        : <code>True</code> if $M^H = M^{-1}$</li>\n</ul>\n\n<p>Non-Mathematical:</p>\n\n<ul>\n<li>sparse         : <code>True</code> if the matrix is stored as a\nSciPy Sparse object.</li>\n<li>to_dense       : A dense representation of $M$</li>\n<li>to_sparse      : A sparse representation of $M$</li>\n</ul>\n"}, {"fullname": "mathmat.mathmat.Matrix.__init__", "modulename": "mathmat.mathmat", "qualname": "Matrix.__init__", "kind": "function", "doc": "<p>Initialize a Matrix object.</p>\n\n<p>The argument <code>arr</code> can be a Numpy array, Scipy sparse matrix, list of\nVector objects, or an object convertible to a Numpy array.</p>\n\n<p>If the resulting array is of dimension 1 in either axis, the\nMatrix automatically becomes a Vector.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span>)</span>"}, {"fullname": "mathmat.mathmat.Matrix.set", "modulename": "mathmat.mathmat", "qualname": "Matrix.set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prop</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.size", "modulename": "mathmat.mathmat", "qualname": "Matrix.size", "kind": "variable", "doc": "<p>The shape of the underlying matrix representation.</p>\n", "annotation": ": tuple"}, {"fullname": "mathmat.mathmat.Matrix.nr", "modulename": "mathmat.mathmat", "qualname": "Matrix.nr", "kind": "variable", "doc": "<p>The number of rows in the Matrix.</p>\n", "annotation": ": int"}, {"fullname": "mathmat.mathmat.Matrix.nc", "modulename": "mathmat.mathmat", "qualname": "Matrix.nc", "kind": "variable", "doc": "<p>The number of columns in the Matrix.</p>\n", "annotation": ": int"}, {"fullname": "mathmat.mathmat.Matrix.is_sparse", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_sparse", "kind": "function", "doc": "<p><code>True</code> if the underlying matrix representation is SciPy Sparse.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_complex", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_complex", "kind": "function", "doc": "<p><code>True</code> if the matrix has any non-zero complex entry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_diagonal", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_diagonal", "kind": "function", "doc": "<p><code>True</code> if the non-diagonal elements of the matrix are within\n<code>tolerance</code> of zero.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_diagonalizable", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_diagonalizable", "kind": "function", "doc": "<p><code>True</code> if the matrix can be diagonalized, $M = P D P^{-1}$.\nDoes not necessarily compute the diagonalization. Densifies.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_hermitian", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_hermitian", "kind": "function", "doc": "<p><code>True</code> if the matrix is Hermitian, $M^H = M$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_invertible", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_invertible", "kind": "function", "doc": "<p><code>True</code> if the matrix has an inverse $M^{-1} M = Id$.\nDoes not compute the inverse.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_normal", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_normal", "kind": "function", "doc": "<p><code>True</code> if the matrix satisfies the normal equation $M^H M = M M^H$.\nComputes the conjugate transpose.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_orthogonal", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_orthogonal", "kind": "function", "doc": "<p><code>True</code> if the matrix is orthogonal, $M^T = M^{-1}$.\nComputes the transpose and identifies the inverse if <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_posdef", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_posdef", "kind": "function", "doc": "<p><code>True</code> if the matrix is positive-definite.\nComputes the eigenvalues. Densifies.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_square", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_square", "kind": "function", "doc": "<p><code>True</code> if the matrix is square.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_symmetric", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_symmetric", "kind": "function", "doc": "<p><code>True</code> if the matrix is symmetric, $M^T = M$.\nComputes the transpose only if the matrix is sparse.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_triangular_L", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_triangular_L", "kind": "function", "doc": "<p><code>True</code> if the matrix is lower (left) triangular.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_triangular_U", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_triangular_U", "kind": "function", "doc": "<p><code>True</code> if the matrix is upper (right) triangular.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.is_unitary", "modulename": "mathmat.mathmat", "qualname": "Matrix.is_unitary", "kind": "function", "doc": "<p><code>True</code> if the matrix is unitary, $M^H = M^{-1}$.\nComputes the conjugate transpose and identifies the inverse if True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.cond_2", "modulename": "mathmat.mathmat", "qualname": "Matrix.cond_2", "kind": "function", "doc": "<p>Compute the condition number $\\kappa_2 for inversion of the matrix.\nComputes the singular values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.determinant", "modulename": "mathmat.mathmat", "qualname": "Matrix.determinant", "kind": "function", "doc": "<p>Compute the determinant of the matrix. Densifies.\nComputes the eigenvalues of triangular matrices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.eigenvalues", "modulename": "mathmat.mathmat", "qualname": "Matrix.eigenvalues", "kind": "function", "doc": "<p>Compute the eigenvalues of the matrix.\nDoes not compute the eigenvectors, unless the matrix is sparse.\nChecks whether $M$ is Hermitian, unless the matrix is triangular.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.eigenvectors", "modulename": "mathmat.mathmat", "qualname": "Matrix.eigenvectors", "kind": "function", "doc": "<p>Compute the eigenvectors of the matrix.\nComputes the eigenvalues. Checks whether $M$ is Hermitian.</p>\n\n<p>Note that if the matrix has a sparse representation, then\nonly <code>sparse_k</code> many eigenvalues/vectors can be computed!\nThe <code>max</code> is 90% of the dimension of the matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span>, </span><span class=\"param\"><span class=\"n\">sparse_k</span><span class=\"o\">=</span><span class=\"s1\">&#39;max&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.norm_2", "modulename": "mathmat.mathmat", "qualname": "Matrix.norm_2", "kind": "function", "doc": "<p>Compute the 2-norm of the matrix $\\lVert M \\rVert_2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.nullity", "modulename": "mathmat.mathmat", "qualname": "Matrix.nullity", "kind": "function", "doc": "<p>Compute the nullity as the number of columns minus the rank.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.rank", "modulename": "mathmat.mathmat", "qualname": "Matrix.rank", "kind": "function", "doc": "<p>Compute the rank of the matrix.\nComputes the SVD if no inverse or eigenvalues are known.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.sigmas", "modulename": "mathmat.mathmat", "qualname": "Matrix.sigmas", "kind": "function", "doc": "<p>Compute the singular values of the matrix.\nComputes the SVD if not positive-definite.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.sparsity", "modulename": "mathmat.mathmat", "qualname": "Matrix.sparsity", "kind": "function", "doc": "<p>Compute the sparsity of the matrix as the fraction of zero\nentries out of all entries in the matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.trace", "modulename": "mathmat.mathmat", "qualname": "Matrix.trace", "kind": "function", "doc": "<p>Compute the trace of the matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.row", "modulename": "mathmat.mathmat", "qualname": "Matrix.row", "kind": "function", "doc": "<p>Return the 1-indexed row.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.column", "modulename": "mathmat.mathmat", "qualname": "Matrix.column", "kind": "function", "doc": "<p>Return the 1-indexed column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.diagonal", "modulename": "mathmat.mathmat", "qualname": "Matrix.diagonal", "kind": "function", "doc": "<p>Return the k-th diagonal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.entry", "modulename": "mathmat.mathmat", "qualname": "Matrix.entry", "kind": "function", "doc": "<p>Return the 1-indexed entry $M_{ij}$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">col</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.equals", "modulename": "mathmat.mathmat", "qualname": "Matrix.equals", "kind": "function", "doc": "<p><code>True</code> if the matrix equals another elementwise,\nwithin a tolerance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.to_dense", "modulename": "mathmat.mathmat", "qualname": "Matrix.to_dense", "kind": "function", "doc": "<p>Switch from a sparse to a dense repsresentation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.to_sparse", "modulename": "mathmat.mathmat", "qualname": "Matrix.to_sparse", "kind": "function", "doc": "<p>Switch from a dense to a sparse representation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.conjugate", "modulename": "mathmat.mathmat", "qualname": "Matrix.conjugate", "kind": "function", "doc": "<p>Compute the complex conjugate of the matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.inverse", "modulename": "mathmat.mathmat", "qualname": "Matrix.inverse", "kind": "function", "doc": "<p>Compute the inverse of the matrix. Checks invertibility.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.lin_solver", "modulename": "mathmat.mathmat", "qualname": "Matrix.lin_solver", "kind": "function", "doc": "<p>Return a method which solves $Ax=b$ for $x$.\nSee <code>solve.automatic</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.qr", "modulename": "mathmat.mathmat", "qualname": "Matrix.qr", "kind": "function", "doc": "<p>Compute the QR factorization of the matrix. See <code>factor.qr</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.svd", "modulename": "mathmat.mathmat", "qualname": "Matrix.svd", "kind": "function", "doc": "<p>Compute the SVD factorization of the matrix. See <code>factor.svd</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Matrix.transpose", "modulename": "mathmat.mathmat", "qualname": "Matrix.transpose", "kind": "function", "doc": "<p>Compute the transpose of the matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.DiagonalMatrix", "modulename": "mathmat.mathmat", "qualname": "DiagonalMatrix", "kind": "class", "doc": "<p>A DiagonalMatrix is a Matrix whose only nonzero entries\nare on the primary diagonal.</p>\n", "bases": "Matrix"}, {"fullname": "mathmat.mathmat.DiagonalMatrix.__init__", "modulename": "mathmat.mathmat", "qualname": "DiagonalMatrix.__init__", "kind": "function", "doc": "<p>Initialize a DiagonalMatrix from an array of the diagonal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">diagonal</span></span>)</span>"}, {"fullname": "mathmat.mathmat.DiagonalMatrix.is_invertible", "modulename": "mathmat.mathmat", "qualname": "DiagonalMatrix.is_invertible", "kind": "function", "doc": "<p><code>True</code> if there are no zeros on the diagonal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.DiagonalMatrix.determinant", "modulename": "mathmat.mathmat", "qualname": "DiagonalMatrix.determinant", "kind": "function", "doc": "<p>Compute the determinant as the product of the diagonal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.DiagonalMatrix.eigenvalues", "modulename": "mathmat.mathmat", "qualname": "DiagonalMatrix.eigenvalues", "kind": "function", "doc": "<p>Compute the eigenvalues, equivalent to sorting the diagonal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.DiagonalMatrix.inverse", "modulename": "mathmat.mathmat", "qualname": "DiagonalMatrix.inverse", "kind": "function", "doc": "<p>Compute the inverse as the reciprocal of the diagonal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.DiagonalMatrix.trace", "modulename": "mathmat.mathmat", "qualname": "DiagonalMatrix.trace", "kind": "function", "doc": "<p>Compute the trace of the matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.mathmat.Identity", "modulename": "mathmat.mathmat", "qualname": "Identity", "kind": "class", "doc": "<p>The Identity matrix is a DiagonalMatrix of ones.</p>\n", "bases": "DiagonalMatrix"}, {"fullname": "mathmat.mathmat.Identity.__init__", "modulename": "mathmat.mathmat", "qualname": "Identity.__init__", "kind": "function", "doc": "<p>Initialize the Identity of size n.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span></span>)</span>"}, {"fullname": "mathmat.mathmat.Vector", "modulename": "mathmat.mathmat", "qualname": "Vector", "kind": "class", "doc": "<p>A Vector is a Matrix of size 1 in one dimension.</p>\n", "bases": "Matrix"}, {"fullname": "mathmat.mathmat.Vector.__init__", "modulename": "mathmat.mathmat", "qualname": "Vector.__init__", "kind": "function", "doc": "<p>Initialize a Vector object from a Numpy array.\nIf the array has only one dimension, defaults to being a column vector.\nA row vector can be forced by setting row=True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "mathmat.mathmat.Vector.unit", "modulename": "mathmat.mathmat", "qualname": "Vector.unit", "kind": "function", "doc": "<p>Compute the unit vector in the direction of this Vector.\nComputes the 2-norm.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.random", "modulename": "mathmat.random", "kind": "module", "doc": "<p>MathMat Random Matrix Toolbox</p>\n"}, {"fullname": "mathmat.random.Gaussian", "modulename": "mathmat.random", "qualname": "Gaussian", "kind": "class", "doc": "<p>A Gaussian matrix has entries drawn from a standard normal.</p>\n", "bases": "mathmat.mathmat.Matrix"}, {"fullname": "mathmat.random.Gaussian.__init__", "modulename": "mathmat.random", "qualname": "Gaussian.__init__", "kind": "function", "doc": "<p>Initialize a new Gaussian matrix with the given size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nr</span>, </span><span class=\"param\"><span class=\"n\">nc</span></span>)</span>"}, {"fullname": "mathmat.random.FFTSketchedMatrix", "modulename": "mathmat.random", "qualname": "FFTSketchedMatrix", "kind": "class", "doc": "<p>A sketching matrix based on the FFT / DCT.</p>\n", "bases": "mathmat.mathmat.Matrix"}, {"fullname": "mathmat.random.FFTSketchedMatrix.__init__", "modulename": "mathmat.random", "qualname": "FFTSketchedMatrix.__init__", "kind": "function", "doc": "<p>Sketch an existing Matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span></span>)</span>"}, {"fullname": "mathmat.random.approx_hmt", "modulename": "mathmat.random", "qualname": "approx_hmt", "kind": "function", "doc": "<p>Compute a rank <code>r</code> approximation using the HMT algorithm.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>, </span><span class=\"param\"><span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve", "modulename": "mathmat.solve", "kind": "module", "doc": "<p>MathMat Linear System Solving Toolbox</p>\n"}, {"fullname": "mathmat.solve.Krylov", "modulename": "mathmat.solve", "qualname": "Krylov", "kind": "class", "doc": "<p>A collection of methods for generating Krylov subspaces.</p>\n"}, {"fullname": "mathmat.solve.Krylov.arnoldi_mgs", "modulename": "mathmat.solve", "qualname": "Krylov.arnoldi_mgs", "kind": "function", "doc": "<p>Generate $K_k = \\text{span} ( b, Ab, ... A^{k-1}b )$.\nUses Modified Gram-Schmidt (non-repeated) full orthogonalization.\nOptionally configure the tolerance for stopping early.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.Krylov.arnoldi_mgs_trunc", "modulename": "mathmat.solve", "qualname": "Krylov.arnoldi_mgs_trunc", "kind": "function", "doc": "<p>Generate $K_k = \\text{span} ( b, Ab, ... A^{k-1}b )$.\nUses Modified Gram-Schmidt (non-repeated) <code>r</code>-truncated\northogonalization (see Nakatuskasa and Tropp 2022).\nOptionally configure the tolerance for stopping early.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.Krylov.arnoldi_mgs_2x", "modulename": "mathmat.solve", "qualname": "Krylov.arnoldi_mgs_2x", "kind": "function", "doc": "<p>Generate $K_k = \\text{span} ( b, Ab, ... A^{k-1}b )$.\nUses Modified Gram-Schmidt (twice) full orthogonalization.\nOptionally configure the tolerance for stopping early.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.gmres", "modulename": "mathmat.solve", "qualname": "gmres", "kind": "function", "doc": "<p>Solve Ax=b for x iteratively using the GMRES algorithm.\nStops after <code>k</code> iterations, or when the sub-diagonal entry\nis below the given <code>tolerance</code>.</p>\n\n<p>Optionally specify the method of generating the Krylov\nsubspace by passing a callable to <code>krylov</code>. Otherwise,\nthis is derermined automatically from A. The callable\nshould accept the arguments <code>(A, b, k, tol)</code> and return the\nMatrices $K_k$ and $H$.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">krylov</span><span class=\"o\">=</span><span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.sgmres", "modulename": "mathmat.solve", "qualname": "sgmres", "kind": "function", "doc": "<p>Solve Ax=b for x iteratively using the sGMRES algorithm.\nGenerates a Krylov subspace of dimension <code>k</code> via a truncated\nArnoldi process that orthogonalizes against <code>r</code> previous vectors.\nThe solution is then produced by sketching the matrix using a FFT.</p>\n\n<p>Optionally specify the method of generating the Krylov\nsubspace by passing a callable to <code>krylov</code>. Otherwise,\ntruncated MGS Arnoldi will be used. The callable\nshould accept the arguments <code>(A, b, k, tol, r)</code> and return the\nMatrices $K_k$ and $H$.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">krylov</span><span class=\"o\">=</span><span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.invert", "modulename": "mathmat.solve", "qualname": "invert", "kind": "function", "doc": "<p>Solve $Ax=b$ for $x$ by inverting the matrix $A$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.lstsq", "modulename": "mathmat.solve", "qualname": "lstsq", "kind": "function", "doc": "<p>Find the least-squares, min. norm solution to $Ax=b$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.lu", "modulename": "mathmat.solve", "qualname": "lu", "kind": "function", "doc": "<p>Solve $Ax=b$ for $x% by taking an $LU$ factorization of $A$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.triangular", "modulename": "mathmat.solve", "qualname": "triangular", "kind": "function", "doc": "<p>Solve $Ax=b$ for $x$ for a triangular $A$.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.solve.automatic", "modulename": "mathmat.solve", "qualname": "automatic", "kind": "function", "doc": "<p>Try to pick an optimal solving strategy based on the properties of $A$.</p>\n\n<p>Note that computing some properties may be expensive, and therefore using\n<code>automatic</code> may be sub-optimal if used only once.\nOptionally, if <code>get_method</code> is <code>True</code>, return the solver method instead of\nactually solving for $x$.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Matrix</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">mathmat</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">get_method</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis", "modulename": "mathmat.vis", "kind": "module", "doc": "<p>MathMat Visualization Toolbox.</p>\n"}, {"fullname": "mathmat.vis.params", "modulename": "mathmat.vis", "qualname": "params", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ytick.color&#x27;: &#x27;black&#x27;, &#x27;xtick.color&#x27;: &#x27;black&#x27;, &#x27;axes.labelcolor&#x27;: &#x27;black&#x27;, &#x27;axes.edgecolor&#x27;: &#x27;black&#x27;, &#x27;axes.formatter.use_mathtext&#x27;: True, &#x27;text.usetex&#x27;: False, &#x27;font.family&#x27;: &#x27;serif&#x27;, &#x27;font.serif&#x27;: &#x27;cmr10&#x27;, &#x27;mathtext.fontset&#x27;: &#x27;cm&#x27;, &#x27;figure.dpi&#x27;: 100, &#x27;figure.autolayout&#x27;: True, &#x27;savefig.dpi&#x27;: 300, &#x27;savefig.transparent&#x27;: True, &#x27;savefig.bbox&#x27;: &#x27;tight&#x27;, &#x27;font.size&#x27;: 12, &#x27;lines.linewidth&#x27;: 2}"}, {"fullname": "mathmat.vis.Plot", "modulename": "mathmat.vis", "qualname": "Plot", "kind": "class", "doc": "<p>A Plot is the base class for all visualizations.\nDo not use Plot directly, as it does not show any data.\nInstead, extend it or use a specific type of Plot.</p>\n"}, {"fullname": "mathmat.vis.Plot.__init__", "modulename": "mathmat.vis", "qualname": "Plot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">legend_labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">mpl_kwargs</span></span>)</span>"}, {"fullname": "mathmat.vis.Plot.legend_labels", "modulename": "mathmat.vis", "qualname": "Plot.legend_labels", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.Plot.title", "modulename": "mathmat.vis", "qualname": "Plot.title", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.Plot.x_label", "modulename": "mathmat.vis", "qualname": "Plot.x_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.Plot.y_label", "modulename": "mathmat.vis", "qualname": "Plot.y_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.Plot.plot_on", "modulename": "mathmat.vis", "qualname": "Plot.plot_on", "kind": "function", "doc": "<p>Show the Plot on the specified matplotlib Axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis.DataPlot", "modulename": "mathmat.vis", "qualname": "DataPlot", "kind": "class", "doc": "<p>A DataPlot visualizes data. Do not use it directly, instead\ncall LinePlot or ScatterPlot.</p>\n", "bases": "Plot"}, {"fullname": "mathmat.vis.DataPlot.__init__", "modulename": "mathmat.vis", "qualname": "DataPlot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Xs</span>,</span><span class=\"param\">\t<span class=\"n\">Ys</span>,</span><span class=\"param\">\t<span class=\"n\">formats</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_x</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">log_y</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">mpl_kwargs</span></span>)</span>"}, {"fullname": "mathmat.vis.DataPlot.Xs", "modulename": "mathmat.vis", "qualname": "DataPlot.Xs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.DataPlot.Ys", "modulename": "mathmat.vis", "qualname": "DataPlot.Ys", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.DataPlot.formats", "modulename": "mathmat.vis", "qualname": "DataPlot.formats", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.DataPlot.log_x", "modulename": "mathmat.vis", "qualname": "DataPlot.log_x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.DataPlot.log_y", "modulename": "mathmat.vis", "qualname": "DataPlot.log_y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.DataPlot.plot_on", "modulename": "mathmat.vis", "qualname": "DataPlot.plot_on", "kind": "function", "doc": "<p>Show the Plot on the specified matplotlib Axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis.LinePlot", "modulename": "mathmat.vis", "qualname": "LinePlot", "kind": "class", "doc": "<p>A LinePlot visualizes data as lines.\n<code>Xs</code> and <code>Ys</code> must be are array-like objects of equal length.\nOptionally, <code>formats</code> is an array of equal length containing\nformat specifications for <code>matplotlib</code>.\n<code>log_x</code> and <code>log_y</code> are used to specify logarithmic scaling of axes.</p>\n", "bases": "DataPlot"}, {"fullname": "mathmat.vis.LinePlot.plot_on", "modulename": "mathmat.vis", "qualname": "LinePlot.plot_on", "kind": "function", "doc": "<p>Show the Plot on the specified matplotlib Axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis.ScatterPlot", "modulename": "mathmat.vis", "qualname": "ScatterPlot", "kind": "class", "doc": "<p>A LinePlot visualizes data as points.\n<code>Xs</code> and <code>Ys</code> must be are array-like objects of equal length.\nOptionally, <code>formats</code> is an array of equal length containing\nformat specifications for <code>matplotlib</code>.\n<code>log_x</code> and <code>log_y</code> are used to specify logarithmic scaling of axes.</p>\n", "bases": "DataPlot"}, {"fullname": "mathmat.vis.ScatterPlot.plot_on", "modulename": "mathmat.vis", "qualname": "ScatterPlot.plot_on", "kind": "function", "doc": "<p>Show the Plot on the specified matplotlib Axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis.Histogram", "modulename": "mathmat.vis", "qualname": "Histogram", "kind": "class", "doc": "<p>A Histogram visualizes data by grouping it based on values.\n<code>log_x</code> and <code>log_y</code> are used to specify logarithmic scaling of axes.</p>\n", "bases": "Plot"}, {"fullname": "mathmat.vis.Histogram.__init__", "modulename": "mathmat.vis", "qualname": "Histogram.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Xs</span>,</span><span class=\"param\">\t<span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">mpl_kwargs</span></span>)</span>"}, {"fullname": "mathmat.vis.Histogram.Xs", "modulename": "mathmat.vis", "qualname": "Histogram.Xs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.Histogram.bins", "modulename": "mathmat.vis", "qualname": "Histogram.bins", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.Histogram.plot_on", "modulename": "mathmat.vis", "qualname": "Histogram.plot_on", "kind": "function", "doc": "<p>Show the Plot on the specified matplotlib Axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis.MagnitudePlot", "modulename": "mathmat.vis", "qualname": "MagnitudePlot", "kind": "class", "doc": "<p>A MagnitudePlot shows the magnitude of the entries of a Matrix.\nDensifies.</p>\n", "bases": "Plot"}, {"fullname": "mathmat.vis.MagnitudePlot.__init__", "modulename": "mathmat.vis", "qualname": "MagnitudePlot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">mpl_kwargs</span></span>)</span>"}, {"fullname": "mathmat.vis.MagnitudePlot.M", "modulename": "mathmat.vis", "qualname": "MagnitudePlot.M", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.MagnitudePlot.plot_on", "modulename": "mathmat.vis", "qualname": "MagnitudePlot.plot_on", "kind": "function", "doc": "<p>Show the Plot on the specified matplotlib Axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis.SparsityPlot", "modulename": "mathmat.vis", "qualname": "SparsityPlot", "kind": "class", "doc": "<p>A SparsityPlot shows the sparsity of a Matrix object.\nOptionally specify a tolerance to treat entries as zero. Densifies.</p>\n", "bases": "MagnitudePlot"}, {"fullname": "mathmat.vis.SparsityPlot.__init__", "modulename": "mathmat.vis", "qualname": "SparsityPlot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">2.220446049250313e-16</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">mpl_kwargs</span></span>)</span>"}, {"fullname": "mathmat.vis.SparsityPlot.M", "modulename": "mathmat.vis", "qualname": "SparsityPlot.M", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.SparsityPlot.plot_on", "modulename": "mathmat.vis", "qualname": "SparsityPlot.plot_on", "kind": "function", "doc": "<p>Show the Plot on the specified matplotlib Axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis.OrthogonalityPlot", "modulename": "mathmat.vis", "qualname": "OrthogonalityPlot", "kind": "class", "doc": "<p>An OrthogonalityPlot treats a Matrix as a set of column vectors,\nand shows the magnitude of each dot product by computing M^H M.</p>\n", "bases": "MagnitudePlot"}, {"fullname": "mathmat.vis.OrthogonalityPlot.__init__", "modulename": "mathmat.vis", "qualname": "OrthogonalityPlot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">mpl_kwargs</span></span>)</span>"}, {"fullname": "mathmat.vis.OrthogonalityPlot.M", "modulename": "mathmat.vis", "qualname": "OrthogonalityPlot.M", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mathmat.vis.single", "modulename": "mathmat.vis", "qualname": "single", "kind": "function", "doc": "<p>Show a single Plot on a new figure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plot</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">mpl_kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mathmat.vis.tiled", "modulename": "mathmat.vis", "qualname": "tiled", "kind": "function", "doc": "<p>Tile the given plots in a grid.\n<code>plot_array</code> can be a single plot, a one-dimensional list,\nwhich will be rendered as a row of plots, or a two dimensional\nlist, which will be rendered as a grid of plots.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">plot_array</span>,</span><span class=\"param\">\t<span class=\"n\">sup_title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sup_x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sup_y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">mpl_kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();