[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[tool.hatch.build.targets.sdist]
# limit which files are included in the sdist (.tar.gz) asset,
# see https://github.com/pydantic/pydantic/pull/4542
include = ['/README.md', '/watz', '/tests', '/requirements.txt']

[tool.pdm]
[tool.pdm.dev-dependencies]
nox = ["nox>=2023.4.22"]
test = ["pytest>=7.4.2"]
coverage = ["coverage[toml]>=7.3.2"]
qa = [
    "bandit>=1.7.5",
    "codespell>=2.2.6",
    "ruff>=0.0.292",
    "black>=23.9.1",
    "pre-commit>=3.4.0",
    "pre-commit-hooks>=4.4.0",
    "pyright>=1.1.329",
]
docs = [
    "mkdocs-material>=9.4.4",
    "mkdocstrings[python]>=0.23.0",
    "mike>=1.1.2",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
    "mkdocs-git-committers-plugin-2>=1.2.0",
    "pymdown-extensions>=10.3",
    # Weirdly Mike fails without this being explicitly available (don't think nox is installing it)
    "setuptools>=61.0",
]

[project]
name = "watz"
version = "0.0.2"
description = "Python SDK for Watz APIs"
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [{ name = "Watz Inc", email = "zak@watz.coach" }]
requires-python = ">=3.9"
classifiers = [
    'Development Status :: 1 - Planning',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'License :: OSI Approved',
]

dependencies = []


[project.urls]
"Sourcecode" = "https://github.com/watz-inc/watz-py"
"Documentation" = "https://watz-inc.github.io/watz-py"


[tool.black]
line-length = 100


[tool.ruff]
line-length = 100
ignore-init-module-imports = true # Makes unused imports in __init__.py give message to add to __all__ rather than redundant import
unfixable = [
    "F401", # Don't automatically remove unused imports, can be quite annoying on save when writing code
]
select = [
    "E",   # pycodestyle
    "D",   # pydocstyle for docstrings
    "F",   # pyflakes
    "A",   # prevent using keywords that clobber python builtins
    "B",   # bugbear: security warnings
    "UP",  # alert you when better syntax is available in your python version
    "RUF", # the ruff developer's own rules
    "PD",  # Pandas rules
    "ISC", # implicit string concatenation
    "I",   # Isort import sorting
]
ignore = [
    "E712",   # Allow using if x == False, as it's not always equivalent to if x.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
    "E402",   # Allow imports not at top of file
    "UP032",  # Ignore convert "{}".format(...) to f"{...}"
    "UP015",  # Stops trying to remove "r" from open("..", "r") as it's the default, good to be clear
    "RUF010", # Ignore converting f"{str(x)}" to f"{x!s}" simply because it's less obvious and less people know about it
]

[tool.ruff.per-file-ignores]
"**/{tests}/**/*" = [
    # Don't need docstrings linting for tests
    "D100",
    "D103",
    "D104",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.pyright]
venv = ".venv"
pythonVersion = "3.9"             # Run using the minimum supported version
typeCheckingMode = "basic"        # Additional strict rules are enabled manually
reportUnknownParameterType = true
reportMissingImports = true
deprecateTypingAliases = true
reportImportCycles = true
reportMissingTypeStubs = false

[tool.coverage.paths]
tests = ["tests"]
source = [
    'watz/',
    # This handles the fact that mac/windows/ubuntu github action runners all have different paths
    # This tells coverage to treat the paths as identical and not error:
    '/Users/runner/work/watz-py/watz-py/watz/',
    '/home/runner/work/watz-py/watz-py/watz/',
    'D:\a\watz-py\watz-py\watz',
]

[tool.coverage.run]
source = ["watz"]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 100
