# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['swarms_torch']

package_data = \
{'': ['*']}

install_requires = \
['einops', 'torch']

setup_kwargs = {
    'name': 'swarms-torch',
    'version': '0.0.9',
    'description': 'swarms-torch - Pytorch',
    'long_description': '[![Multi-Modality](agorabanner.png)](https://discord.gg/qUtxnK2NMf)\n\n# Swarms in Torch\nSwarming algorithms like PSO, Ant Colony, Sakana, and more in PyTorch primitivesðŸ˜Š\n\n\n## Installation\n\nYou can install the package using pip\n\n```bash\npip3 install swarms-torch\n```\n\n# Usage\n- We have just PSO now, but we\'re adding in ant colony and others!\n\n```python\nfrom swarms_torch import ParticleSwarmOptimization\n\n#test\npso = ParticleSwarmOptimization(goal="Attention is all you need", n_particles=100)\npso.optimize(iterations=1000)\n```\n\n- Ant Colony Optimization\n```python\nfrom swarms_torch.ant_colony_swarm import AntColonyOptimization\n\n# Usage:\ngoal_string = "Hello ACO"\naco = AntColonyOptimization(goal_string, num_iterations=1000)\nbest_solution = aco.optimize()\nprint("Best Matched String:", best_solution)\n\n```\n\n- Neural Network with Transformers as synapases LMAO.\n```python\nimport torch\nfrom swarms_torch.nnt import NNTransformer\n\nx = torch.randn(1, 10)\n\nnetwork = NNTransformer(\n    #transformer cells\n    neuron_count = 5, \n    \n    #num states\n    num_states = 10,\n\n    #input dim\n    input_dim = 10,\n\n    #output dim\n    output_dim = 10,\n\n    #nhead\n    nhead = 2,\n)\noutput = network(x)\nprint(output)\n```\n\n- CellularSwarm, a Cellular Neural Net with transformers as cells, time simulation, and a local neighboorhood!\n\n```python\nfrom swarms_torch import CellularSwarm \n\nx = torch.randn(10, 32, 512)  # sequence length of 10, batch size of 32, embedding size of 512\nmodel = CellularSwarm(cell_count=5, input_dim=512, nhead=8)\noutput = model(x)\n\n```\n\n# Documentation\n- [Click here for documentation](https://swarmstorch.readthedocs.io/en/latest/swarms/)\n\n\n# Todo\nHere are 10 swarming neural network algorithms, with brief overviews, algorithmic pseudocode, and potential use cases for each:\n\n1. **Particle Swarm Optimization (PSO)**\n    - **Overview**: Simulates the social behavior of birds flocking or fish schooling. It adjusts trajectories of individual agents (particles) based on their own and their neighbors\' best known positions.\n    - **Pseudocode**:\n        ```\n        Initialize each particle with random position and velocity\n        while not converged:\n            for each particle:\n                calculate fitness value\n                if fitness better than its best, update its best\n            end for\n            for each particle:\n                update velocity towards its best and global best\n                update position\n            end for\n        end while\n        ```\n    - **Use Cases**: Function optimization, neural network training, feature selection.\n\n2. **Ant Colony Optimization (ACO)**\n    - **Overview**: Simulates the foraging behavior of ants to find paths through graphs. Uses pheromones to mark good paths, which evaporate over time.\n    - **Pseudocode**:\n        ```\n        Initialize pheromones on paths\n        while not converged:\n            deploy ants to find paths based on pheromone strengths\n            update pheromone strengths based on quality of paths\n            evaporate some pheromone\n        end while\n        ```\n    - **Use Cases**: Path finding, traveling salesman problem, network routing.\n\n3. **Bee Algorithm (BA)**\n    - **Overview**: Simulates the behavior of honey bees finding optimal nectar sources.\n    - **Pseudocode**:\n        ```\n        Initialize scout bees randomly\n        while not converged:\n            deploy scout bees to search for nectar\n            recruit forager bees based on nectar quality\n            more foragers for better nectar sources\n        end while\n        ```\n    - **Use Cases**: Job scheduling, function optimization, image processing.\n\n4. **Firefly Algorithm (FA)**\n    - **Overview**: Based on the flashing behavior of fireflies. Fireflies are attracted to each other depending on the brightness of their flashing.\n    - **Pseudocode**:\n        ```\n        Initialize fireflies randomly\n        while not converged:\n            for each firefly:\n                move towards brighter fireflies\n            end for\n        end while\n        ```\n    - **Use Cases**: Multi-modal optimization, feature selection, clustering.\n\n5. **Bat Algorithm (BA)**\n    - **Overview**: Inspired by the echolocation behavior of bats. Bats fly randomly and adjust positions based on emitted and returned echoes.\n    - **Pseudocode**:\n        ```\n        Initialize bats with random positions and velocities\n        while not converged:\n            for each bat:\n                adjust velocity based on echolocation feedback\n                move bat\n            end for\n        end while\n        ```\n    - **Use Cases**: Engineering design, tuning machine learning algorithms, scheduling.\n\n6. **Wolf Search Algorithm (WSA)**\n    - **Overview**: Models the hunting behavior of gray wolves.\n    - **Pseudocode**:\n        ```\n        Initialize wolves\n        while not converged:\n            calculate fitness of all wolves\n            rank wolves: alpha, beta, delta, and omega\n            adjust position of omega wolves towards alpha, beta, and delta\n        end while\n        ```\n    - **Use Cases**: Neural network training, function optimization, game AI.\n\n7. **Fish School Search (FSS)**\n    - **Overview**: Simulates the social behavior of fish schooling.\n    - **Pseudocode**:\n        ```\n        Initialize fish randomly in search space\n        while not converged:\n            for each fish:\n                if neighbor has better food, move towards it\n                else explore randomly\n            end for\n            adjust school behavior based on total food\n        end while\n        ```\n    - **Use Cases**: Load balancing, function optimization, robotics.\n\n8. **Cuckoo Search (CS)**\n    - **Overview**: Based on the reproduction strategy of cuckoos. They lay eggs in host bird nests and those nests with the best eggs (solutions) will carry on to the next generation.\n    - **Pseudocode**:\n        ```\n        Initialize host nests with eggs (solutions)\n        while not converged:\n            lay new eggs by Levy flights\n            if new egg better than the worst in nest, replace it\n            discover a fraction of nests and lay new eggs\n        end while\n        ```\n    - **Use Cases**: Engineering design optimization, image processing, numerical optimization.\n\n9. **Whale Optimization Algorithm (WOA)**\n    - **Overview**: Simulates the bubble-net hunting strategy of humpback whales.\n    - **Pseudocode**:\n        ```\n        Initialize whales\n        while not converged:\n            for each whale:\n                encircle prey or search using bubble-net approach\n            end for\n\n\n        end while\n        ```\n    - **Use Cases**: Structural optimization, neural network training, function optimization.\n\n10. **Grasshopper Optimization Algorithm (GOA)**\n    - **Overview**: Simulates the swarming behavior of grasshoppers towards food sources.\n    - **Pseudocode**:\n        ```\n        Initialize grasshoppers\n        while not converged:\n            for each grasshopper:\n                adjust position towards other grasshoppers based on distance and food source\n            end for\n        end while\n        ```\n    - **Use Cases**: Job scheduling, clustering, neural network training.\n\n# License\nMIT\n',
    'author': 'Kye Gomez',
    'author_email': 'kye@apac.ai',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/kyegomez/swarms-pytorch',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
