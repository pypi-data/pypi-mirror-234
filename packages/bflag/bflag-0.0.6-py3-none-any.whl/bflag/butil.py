# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_butil.ipynb.

# %% auto 0
__all__ = ['isbooltype', 'boolcall', 'echobool', 'ascall', 'callbool', 'asbool', 'tern2x', 'mapbool', 'mapbools', 'bmap', 'bany',
           'ball']

# %% ../nbs/02_butil.ipynb 3
from typing import Any, List, Callable, overload

# %% ../nbs/02_butil.ipynb 4
from .types import (BoolCall, BoolFunc, BoolCalls, Bools)
from .futil import (hasvargs, haskwargs, islambda, lambdastr)

# %% ../nbs/02_butil.ipynb 6
def isbooltype(b: Any) -> bool:
    '''
    Checks if a given value is of type bool.
    
    Parameters
    ----------
    b : Any
        The value to check.
        
    Returns
    -------
    bool
        True if the value is of type bool, otherwise False.
    '''
    return b == bool

def boolcall(b: Any = None) -> BoolCall:
    '''
    Normalizes a Boolean callable to either bool or Callable.
    
    Parameters
    ----------
    b : BoolCall, optional
        The value to normalize.
        
    Returns
    -------
    BoolCall
        The normalized value.
    '''
    return b if isinstance(b, (bool, Callable)) else bool

def echobool(b: bool) -> BoolFunc:
    '''
    Creates a function that echoes a given boolean value.
    
    Parameters
    ----------
    b : bool
        The boolean value to echo.
        
    Returns
    -------
    BoolFunc
        The function that echoes the given boolean value.
    '''
    assert isinstance(b, bool), 'b must be bool'
    func = lambda *args, **kwargs: b
    func.__name__ = f'Echo{b}'
    return func

def ascall(b: BoolCall) -> BoolFunc:
    '''Normalizes a BoolCall to a BoolFunc.
    
    Parameters
    ----------
    b : BoolCall
        The value to normalize.
        
    Returns
    -------
    BoolFunc
        The normalized value.
    '''
    b = boolcall(b)
    return b if isinstance(b, Callable) else echobool(b)


def callbool(v: Any, b: BoolFunc, *args, **kwargs) -> bool:
    '''Evaluates a boolean function with the given value and optional arguments.
    
    Parameters
    ----------
    v : Any
        The value to evaluate.
    b : BoolFunc
        The boolean function to use for the evaluation.
    args : tuple, optional
        Additional arguments to pass to the function.
    kwargs : dict, optional
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    bool
        The result of the evaluation.
    '''
    b = ascall(b)
    if hasvargs(b) and haskwargs(b): return b(v, *args, **kwargs)
    elif haskwargs(b): return b(v, **kwargs)
    elif hasvargs(b):  return b(v, *args)
    return b(v)

def asbool(v: Any, b: BoolCall, *args, **kwargs) -> bool:
    '''Evaluates a BoolCall with the given value and optional arguments.
    
    Parameters
    ----------
    v : Any
        The value to evaluate.
    b : BoolCall
        The boolean function or value to use for the evaluation.
    args : tuple, optional
        Additional arguments to pass to the function.
    kwargs : dict, optional
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    bool
        The result of the evaluation.
    '''
    return callbool(v, ascall(b), *args, **kwargs)

# %% ../nbs/02_butil.ipynb 7
def tern2x(
    val: Any, boola: BoolCall = None, boolb: BoolCall = None, 
    yesa: Any = None, yesb: Any = None, noab: Any = None
) -> bool:
    '''Apply ternary logic based on two boolean functions.
    
    Parameters
    ----------
    val : Any
        The value to evaluate.
    boola, boolb : BoolCall, optional
        Functions to apply to `val` to determine the outcome.
    yesa, yesb, noab : Any, optional
        Return values based on the outcomes of `boola` and `boolb`.

    Returns
    -------
    bool
        One of the return values (`yesa`, `yesb`, `noab`).

    Examples
    --------
    In python:
    ```python
    yesa if asbool(val, boola) else yesb if asbool(val, boolb) else noab
    ```
    In javascript:
    ```javascript
    boola(val) ? yesa : boolb(val) ? yesb : noab
    ```
    '''
    return yesa if asbool(val, boola) else yesb if asbool(val, boolb) else noab


# %% ../nbs/02_butil.ipynb 8
def mapbool(vals: list, b: BoolCall, *args, **kwargs) -> Bools:
    '''
    Maps a BoolCall over a list of values and returns a list of booleans.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    b : BoolCall
        The boolean function or value to use for the evaluation.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    Bools
        A list of boolean values resulting from the evaluations.
    '''
    return list(asbool(v, b, *args, **kwargs) for v in vals)

def mapbools(vals: list, bools: BoolCalls, *args, **kwargs) -> Bools:
    '''
    Maps a list of BoolCalls over a list of values.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    bools : BoolCalls
        A list of boolean functions or values to use for the evaluations.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    Bools
        A list of boolean values resulting from the evaluations.
    '''
    return list(asbool(v, b, *args, **kwargs) for v, b in zip(vals, bools))

@overload
def bmap(vals: list, bools: BoolCalls, *args, **kwargs) -> Bools: ...
def bmap(vals: list, b: BoolCall, *args, **kwargs) -> Bools:
    '''
    Maps a BoolCall or a list of BoolCalls over a list of values.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    b : Union[BoolCall, BoolCalls]
        The boolean function or list of boolean functions/values to use for the evaluation.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    Bools
        A list of boolean values resulting from the evaluations.
    '''
    if isinstance(b, list): return mapbools(vals, b, *args, **kwargs)
    return mapbool(b, vals, *args, **kwargs)

@overload
def bany(vals: list, bools: BoolCalls, *args, **kwargs) -> bool: ...
def bany(b: BoolCall, vals: Any, *args, **kwargs) -> bool:
    '''
    Checks if any value in the list evaluates to True using the given BoolCall or list of BoolCalls.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    b : Union[BoolCall, BoolCalls]
        The boolean function or list of boolean functions/values to use for the evaluation.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    bool
        True if any value in the list evaluates to True, otherwise False.
    '''
    return any(bmap(vals, b, *args, **kwargs))

@overload
def ball(vals: list, bools: BoolCalls, *args, **kwargs) -> bool: ...
def ball(b: BoolCall, vals: Any, *args, **kwargs) -> bool:
    '''
    Checks if all values in the list evaluate to True using the given BoolCall or list of BoolCalls.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    b : Union[BoolCall, BoolCalls]
        The boolean function or list of boolean functions/values to use for the evaluation.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    bool
        True if all values in the list evaluate to True, otherwise False.
    '''
    return all(bmap(vals, b, *args, **kwargs))
